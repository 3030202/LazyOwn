#!/usr/bin/env python3
# _*_ coding: utf8 _*_
"""
lazyown

Author: Gris Iscomeback
Email: grisiscomeback[at]gmail[dot]com
Creation Date: 13/08/2024
License: GPL v3

Description: This file contains the definition of the logic in the LazyOwnShell class

██╗      █████╗ ███████╗██╗   ██╗ ██████╗ ██╗    ██╗███╗   ██╗
██║     ██╔══██╗╚══███╔╝╚██╗ ██╔╝██╔═══██╗██║    ██║████╗  ██║
██║     ███████║  ███╔╝  ╚████╔╝ ██║   ██║██║ █╗ ██║██╔██╗ ██║
██║     ██╔══██║ ███╔╝    ╚██╔╝  ██║   ██║██║███╗██║██║╚██╗██║
███████╗██║  ██║███████╗   ██║   ╚██████╔╝╚███╔███╔╝██║ ╚████║
╚══════╝╚═╝  ╚═╝╚══════╝   ╚═╝    ╚═════╝  ╚══╝╚══╝ ╚═╝  ╚═══╝

"""

from cmd import Cmd
from utils import *


class LazyOwnShell(Cmd):
    """
    A custom interactive shell for the LazyOwn Framework.

    This class extends the Cmd class to provide an interactive command-line 
    interface for the LazyOwn Framework. It supports various commands and 
    modules related to security and network operations. The shell is initialized 
    with a set of parameters and scripts, allowing users to execute predefined 
    functions and manage tasks within the framework.

    Attributes:
        prompt (str): The command prompt for the shell, obtained from the 
                      `getprompt()` function.
        intro (str): A welcome message and disclaimer displayed when the shell 
                     starts, with information about the framework and its usage.
        aliases (dict): A dictionary of command aliases for easier access to 
                        frequently used commands.
        params (dict): A dictionary of parameters with their default values, 
                       used for configuring various aspects of the framework.
        scripts (list): A list of script names included in the toolkit, representing 
                        the available modules and functionalities.
        output (str): An empty string for storing output or results from executed 
                      commands or scripts.
        custom_prompt (str): A custom prompt for the shell, obtained from the 
                             `getprompt()` function.

    Methods:
        __init__(): Initializes the shell with default parameters, script names, 
                    and an empty output string. Sets up the command prompt and 
                    custom prompt.
    """

    prompt = getprompt()

    if NOBANNER:
        intro = ""
    else:
        intro = f"""    {YELLOW}[*] Welcome to the LazyOwn Framework [;,;] {BLUE}{version} 
    {WHITE}[*] interactive s{RED}H{WHITE}ell! Type ? to list commands{BLUE}
    {RED}[!] Please do not use in military or secret service organizations, 
    {RED}[!] or for illegal purposes (this is non-binding, 
    {RED}[!] these *** ignore laws and ethics anyway){BLUE}
    {GREEN}[+] Github: {BLUE}{UNDERLINE}https://github.com/grisuno/LazyOwn{RESET}
    {GREEN}[+] Web: {BLUE}{UNDERLINE}https://grisuno.github.io/LazyOwn/{RESET}
    {GREEN}[+] Reddit: {BLUE}{UNDERLINE}https://www.reddit.com/r/LazyOwn/{RESET}
    {GREEN}[+] Facebook: {BLUE}{UNDERLINE}https://web.facebook.com/profile.php?id=61560596232150{RESET}
    {GREEN}[+] hackTheBox: {BLUE}{UNDERLINE}https://app.hackthebox.com/teams/overview/6429 {RESET}
        """
    activate_virtualenv("env")

    # Diccionario para almacenar alias
    aliases = {
        "auto": "pyautomate",
        "aslr": "run lazyaslrcheck",
        "discovery": "run lazynmapdiscovery",
        "ftpsniff": "run lazyftpsniff",
        "gpt": "run lazygptcli",
        "ls": "list",
        "nmap": "run lazynmap",
        "now": "clock",
        "p": "payload",
        "poison": "run lazylogpoisoning",
        "q": "exit",
        "sniff": "run lazysniff",
        "venom": "run lazymsfvenom",
        "ww": "whatweb",
    }

    def __init__(self):
        """
        Initializer for the LazyOwnShell class.

        This method sets up the initial parameters and scripts for an instance of
        the LazyOwnShell class. It initializes a dictionary of parameters with default
        values and a list of script names that are part of the LazyOwnShell toolkit.

        Attributes:
            params (dict): A dictionary of parameters with their default values.
            scripts (list): A list of script names included in the toolkit.
            output (str): An empty string to store output or results.
        """
        super().__init__()
        self.params = {
            "binary_name": "gzip",
            "api_key": None,
            "prompt": None,
            "url": None,
            "method": "GET",
            "headers": "{}",
            "params": "{}",
            "data": "{}",
            "json_data": "{}",
            "proxy_port": 8080,
            "wordlist": None,
            "hide_code": None,
            "mode": None,
            "reverse_shell_port": None,
            "path": "/",
            "rhost": None,
            "lhost": None,
            "rport": 1337,
            "lport": 1337,
            "rat_key": "82e672ae054aa4de6f042c888111686a",
            "startip": "192.168.1.1",
            "endip": "192.168.1.254",
            "spoof_ip": "185.199.110.153",
            "device": "eth0",
            "email_from": "email@gmail.com",
            "email_to": "email@gmail.com",
            "email_username": "email@gmail.com",
            "email_password": "pa$$w0rd",
            "smtp_server": "smtp.server.com",
            "smtp_port": "587",
            "field": "page",
            "headers_file": None,
            "data_file": None,
            "params_file": None,
            "json_data_file": None,
            "exploitdb": "/usr/share/exploitdb/exploits/",
            "dirwordlist": "/usr/share/wordlists/SecLists-master/Discovery/Web-Content/directory-list-2.3-medium.txt",
            "usrwordlist": "/usr/share/wordlists/SecLists-master/Usernames/xato-net-10-million-usernames.txt",
            "dnswordlist": "/usr/share/wordlists/SecLists-master/Discovery/DNS/subdomains-top1million-110000.txt",
        }
        self.scripts = [
            "lazysearch",
            "lazysearch_gui",
            "lazyown",
            "update_db",
            "lazynmap",
            "lazyaslrcheck",
            "lazynmapdiscovery",
            "lazygptcli",
            "lazyburpfuzzer",
            "lazymetaextract0r",
            "lazyreverse_shell",
            "lazyattack",
            "lazyownratcli",
            "lazyownrat",
            "lazygath",
            "lazysniff",
            "lazynetbios",
            "lazybotnet",
            "lazybotcli",
            "lazyhoneypot",
            "lazysearch_bot",
            "lazylfi2rce",
            "lazylogpoisoning",
            "lazymsfvenom",
            "lazypathhijacking",
            "lazyarpspoofing",
            "lazyftpsniff",
            "lazyssh77enum",
            "lazywerkzeugdebug",
        ]
        self.output = ""
        self.custom_prompt = getprompt()

    def default(self, line):
        """
        Handles undefined commands, including aliases.

        This method checks if a given command (or its alias) exists within the class
        by attempting to find a corresponding method. If the command or alias is not
        found, it prints an error message.

        :param line: The command or alias to be handled.
        :type line: str
        :return: None
        """

        # Obtener el comando o alias
        command = self.aliases.get(line, line)

        # Separar el comando y los argumentos si existe
        parts = command.split(maxsplit=1)
        cmd_name = parts[0]
        cmd_args = parts[1] if len(parts) > 1 else ""

        # Ejecutar el comando si existe
        method_name = f"do_{cmd_name}"
        if hasattr(self, method_name):
            return getattr(self, method_name)(cmd_args)
        else:
            print_error(f"{YELLOW} Not Found {BLUE}{line}{RESET}")

    def one_cmd(self, command):
        """
        Internal function to execute commands.

        This method attempts to execute a given command using `onecmd` and captures
        the output. It sets the `output` attribute based on whether the command was
        executed successfully or an exception occurred.

        :param command: The command to be executed.
        :type command: str
        :return: A message indicating the result of the command execution.
        :rtype: str
        """

        self.output = self.get_output
        try:
            self.onecmd(command)  # Ejecuta el comando directamente
            self.output = "Command executed successfully."
            return self.output
        except Exception as e:
            self.output = str(e)

    def do_set(self, line):
        """
        Set a parameter value.

        This function takes a line of input, splits it into a parameter and a value,
        and sets the specified parameter to the given value if the parameter exists.

        :param line: A string containing the parameter and value to be set.
                    Expected format: '<parameter> <value>'.
        :type line: str
        :return: None
        :raises: ValueError if the input line does not contain exactly two elements.
        """
        args = shlex.split(line)
        if len(args) != 2:
            print_error(f"{YELLOW} Usage: set <parameter> <value>{RESET}")
            return

        param, value = args
        if param in self.params:
            self.params[param] = value
            print_msg(f"{YELLOW}{param} set to {GREEN}{value} {RESET}")
        else:
            print_error(f"Unknown parameter: {param}{RESET}")
        return

    def do_show(self, line):
        """
        Show the current parameter values.

        This function iterates through the current parameters and their values,
        printing each parameter and its associated value.

        :param line: This parameter is not used in the function.
        :type line: str
        :return: None
        """
        for param, value in self.params.items():
            print_msg(f"{param}: {value}")

    def do_list(self, line):
        """
        Lists all available scripts in the modules directory.

        This method prints a list of available scripts in a formatted manner, arranging
        them into columns. It shows each script with sufficient spacing for readability.

        :param line: This parameter is not used in the method.
        :type line: str
        :return: None
        """

        scripts = self.scripts
        num_columns = 3

        if not scripts:
            print_error(f"No available scripts.{RESET}")
            return

        max_len = max(len(script) for script in scripts)
        column_width = max_len + 2 

        rows = [
            scripts[i : i + num_columns] for i in range(0, len(scripts), num_columns)
        ]

        print_msg(f"Available scripts to run:{RESET}")
        for row in rows:
            print_msg(
                f"   ".join(
                    f"{script.ljust(column_width)}{RESET}    " for script in row
                )
            )

    def do_run(self, line):
        """
        Runs a specific LazyOwn script.

        This method executes a script from the LazyOwn toolkit based on the provided
        script name. If the script is not recognized, it prints an error message.
        To see available scripts, use the `list` or `help list` commands.

        :param line: The command line input containing the script name.
        :type line: str
        :return: None
        """

        args = shlex.split(line)
        if not args:
            print_error(f"Usage: {GREEN} run <script_name> {RESET}")
            return

        script_name = args[0]
        if script_name in self.scripts:
            getattr(self, f"run_{script_name}")()
        else:
            print_error(f"Unknown script: {CYAN}{script_name}{RESET}")

    def run_lazysearch(self):
        """
        Runs the internal module `modules/lazysearch.py`.

        This method executes the `lazysearch` script from the specified path, using
        the `binary_name` parameter from the `self.params` dictionary. If `binary_name`
        is not set, it prints an error message.

        :return: None
        """
        binary_name = self.params["binary_name"]
        if not binary_name:
            print_error("binary_name not set")
            return
        self.run_script("modules/lazysearch.py", binary_name)

    def run_lazysearch_gui(self):
        """
        Run the internal module located at `modules/LazyOwnExplorer.py`.

        This method executes the `LazyOwnExplorer.py` script, which is used for graphical user interface (GUI) functionality within the LazyOwn framework.

        The function performs the following steps:

        1. Calls `self.run_script` with `LazyOwnExplorer.py` to execute the GUI module.

        :returns: None

        Manual execution:
        1. Ensure that the `modules/LazyOwnExplorer.py` script is present in the `modules` directory.
        2. Run the script with:
            `python3 modules/LazyOwnExplorer.py`

        Example:
            To run `LazyOwnExplorer.py` directly, execute:
            `python3 modules/LazyOwnExplorer.py`

        Note:
            - Ensure that the script has the appropriate permissions and dependencies to run.
            - Verify that your environment supports GUI operations if using this script in a non-graphical environment.
        """

        self.run_script("modules/LazyOwnExplorer.py")
        return

    def run_lazyown(self):
        """
        Run the internal module located at `modules/lazyown.py`.

        This method executes the `lazyown.py` script, which is a core component of the LazyOwn framework.

        The function performs the following steps:

        1. Calls `self.run_script` with `lazyown.py` to execute the script.

        :returns: None

        Manual execution:
        1. Ensure that the `modules/lazyown.py` script is present in the `modules` directory.
        2. Run the script with:
            `python3 modules/lazyown.py`

        Example:
            To run `lazyown.py` directly, execute:
            `python3 modules/lazyown.py`

        Note:
            - Ensure that the script has the appropriate permissions and dependencies to run.
        """

        self.run_script("modules/lazyown.py")
        return

    def run_update_db(self):
        """
        Run the internal module located at `modules/update_db.sh`.

        This method executes the `update_db.sh` script to update the database of binary exploitables from `gtofbins`.

        The function performs the following steps:

        1. Executes the `update_db.sh` script located in the `modules` directory using `os.system`.

        :returns: None

        Manual execution:
        1. Ensure that the `modules/update_db.sh` script is present in the `modules` directory.
        2. Run the script with:
            `./modules/update_db.sh`

        Example:
            To manually update the database, execute:
            `./modules/update_db.sh`

        Note:
            - Ensure that the script has execute permissions.
            - The script should be run with the necessary privileges if required.
        """

        os.system("./modules/update_db.sh")
        return

    def run_lazynmap(self):
        """
        Runs the internal module `modules/lazynmap.sh` for multiple Nmap scans.

        This method executes the `lazynmap` script, using the current working directory
        and the `rhost` parameter from the `self.params` dictionary as the target IP.
        If `rhost` is not set, it prints an error message.

        :return: None
        """

        path = os.getcwd()
        target_ip = self.params["rhost"]
        if not target_ip:
            print_error(f"rhost must be set, {GREEN}help set to more info {RESET}")
            return
        os.system(f"{path}/modules/lazynmap.sh -t {target_ip}")
        return

    def run_lazywerkzeugdebug(self):
        """
        Run the internal module located at `modules/lazywerkzeug.py` in debug mode.

        This method executes the `lazywerkzeug.py` script with the specified parameters for remote and local hosts and ports. It is used to test Werkzeug in debug mode.

        The function performs the following steps:

        1. Retrieves the `rhost`, `lhost`, `rport`, and `lport` values from `self.params`.
        2. Checks if all required parameters are set. If not, prints an error message and returns.
        3. Calls `self.run_script` with `lazywerkzeug.py` and the specified parameters.

        :param rhost: The remote host address.
        :type rhost: str

        :param lhost: The local host address.
        :type lhost: str

        :param rport: The remote port number.
        :type rport: int

        :param lport: The local port number.
        :type lport: int

        :returns: None

        Manual execution:
        1. Ensure that `rhost`, `lhost`, `rport`, and `lport` are set in `self.params`.
        2. The script `modules/lazywerkzeug.py` should be present in the `modules` directory.
        3. Run the script with:
            `python3 modules/lazywerkzeug.py <rhost> <rport> <lhost> <lport>`

        Example:
            To run `lazywerkzeug.py` with `rhost` set to `"127.0.0.1"`, `rport` to `5000`, `lhost` to `"localhost"`, and `lport` to `8000`, set:
            `self.params["rhost"] = "127.0.0.1"`
            `self.params["rport"] = 5000`
            `self.params["lhost"] = "localhost"`
            `self.params["lport"] = 8000`
            Then call:
            `run_lazywerkzeugdebug()`

        Note:
            - Ensure that `modules/lazywerkzeug.py` has the appropriate permissions and dependencies to run.
            - Verify that the specified hosts and ports are correct and available.
        """

        rhost = self.params["rhost"]
        lhost = self.params["lhost"]
        rport = self.params["rport"]
        lport = self.params["lport"]
        if not rhost or not lhost or not lport or not rport:
            print_error(
                "rhost, lhost, rpor, and lport must be set, to more info see: help set"
            )
            return
        self.run_script("modules/lazywerkzeug.py", rhost, rport, lhost, lport)
        return

    def run_lazygath(self):
        """
        Run the internal module located at `modules/lazygat.sh`. to gathering the sistem :)

        This method executes the `lazygat.sh` script located in the `modules` directory with `sudo` privileges.

        The function performs the following steps:

        1. Retrieves the current working directory.
        2. Executes the `lazygat.sh` script using `sudo` to ensure it runs with elevated permissions.

        :returns: None

        Manual execution:
        1. Ensure that the `modules/lazygat.sh` script is present in the `modules` directory.
        2. Run the script with:
            `sudo ./modules/lazygat.sh`

        Example:
            To manually run the script with elevated privileges, execute:
            `sudo ./modules/lazygat.sh`

        Note:
            - Ensure that the script has execute permissions.
            - The script should be run with `sudo` if it requires elevated privileges.
        """

        path = os.getcwd()
        os.system(f"sudo {path}/modules/lazygat.sh")
        return

    def run_lazynmapdiscovery(self):
        """
        Runs the internal module `modules/lazynmap.sh` with discovery mode.

        This method executes the `lazynmap` script in discovery mode. It uses the current
        working directory for locating the script.

        :return: None
        """

        path = os.getcwd()
        os.system(f"{path}/modules/lazynmap.sh -d")
        return

    def run_lazysniff(self):
        """
        Run the sniffer internal module located at `modules/lazysniff.py` with the specified parameters.

        This method executes the script with the following arguments:

        - `device`: The network interface to be used for sniffing, specified in `self.params`.

        The function performs the following steps:

        1. Retrieves the `device` value from `self.params`.
        2. Sets up the environment variables `LANG` and `TERM` to ensure proper script execution.
        3. Uses `subprocess.run` to execute the `lazysniff.py` script with the `-i` option to specify the network interface.

        :param device: The network interface to be used for sniffing.
        :type device: str

        :returns: None

        Manual execution:
        1. Ensure that `device` is set in `self.params`.
        2. The script `modules/lazysniff.py` should be present in the `modules` directory.
        3. Run the script with:
            `python3 modules/lazysniff.py -i <device>`

        Example:
            To run `lazysniff` with `device` set to `"eth0"`, set:
            `self.params["device"] = "eth0"`
            Then call:
            `run_lazysniff()`

        Note:
            - Ensure that `modules/lazysniff.py` has the appropriate permissions and dependencies to run.
            - Ensure that the network interface specified is valid and properly configured.
        """


        env = os.environ.copy()
        env["LANG"] = "en_US.UTF-8"
        env["TERM"] = "xterm-256color"
        device = self.params["device"]
        subprocess.run(
            ["python3", "modules/lazysniff.py", "-i", device],
            env=env,
            stdin=sys.stdin,
            stdout=sys.stdout,
            stderr=sys.stderr,
        )

    def run_lazyftpsniff(self):
        """
        Run the sniffer ftp internal module located at `modules/lazyftpsniff.py` with the specified parameters.

        This function executes the script with the following arguments:

        - `device`: The network interface to be used for sniffing, specified in `self.params`.

        The function performs the following steps:

        1. Retrieves the `device` value from `self.params`.
        2. Sets up the environment variables `LANG` and `TERM` to ensure proper script execution.
        3. Uses `subprocess.run` to execute the `lazyftpsniff.py` script with the `-i` option to specify the network interface.

        :param device: The network interface to be used for sniffing.
        :type device: str

        :returns: None

        Manual execution:
        1. Ensure that `device` is set in `self.params`.
        2. The script `modules/lazyftpsniff.py` should be present in the `modules` directory.
        3. Run the script with:
            `python3 modules/lazyftpsniff.py -i <device>`

        Example:
            To run `lazyftpsniff` with `device` set to `"eth0"`, set:
            `self.params["device"] = "eth0"`
            Then call:
            `run_lazyftpsniff()`

        Note:
            - Ensure that `modules/lazyftpsniff.py` has the appropriate permissions and dependencies to run.
            - Ensure that the network interface specified is valid and properly configured.
        """

        device = self.params["device"]
        env = os.environ.copy()
        env["LANG"] = "en_US.UTF-8"
        env["TERM"] = "xterm-256color"
        if not device:
            print_error("device must be set to choice the interface")
            return
        subprocess.run(["python3", "modules/lazyftpsniff.py", "-i", device])

    def run_lazynetbios(self):
        """
        Run the internal module to search netbios vuln victims, located at `modules/lazynetbios.py` with the specified parameters.

        This function executes the script with the following arguments:

        - `startip`: The starting IP address for the NetBIOS scan, specified in `self.params`.
        - `endip`: The ending IP address for the NetBIOS scan, specified in `self.params`.
        - `spoof_ip`: The IP address to be used for spoofing, specified in `self.params`.

        The function performs the following steps:

        1. Retrieves the `startip`, `endip`, and `spoof_ip` values from `self.params`.
        2. Uses `subprocess.run` to execute the `lazynetbios.py` script with the specified parameters.

        :param startip: The starting IP address for the NetBIOS scan.
        :type startip: str

        :param endip: The ending IP address for the NetBIOS scan.
        :type endip: str

        :param spoof_ip: The IP address to be used for spoofing.
        :type spoof_ip: str

        :returns: None

        Manual execution:
        1. Ensure that `startip`, `endip`, and `spoof_ip` are set in `self.params`.
        2. The script `modules/lazynetbios.py` should be present in the `modules` directory.
        3. Run the script with:
            `python3 modules/lazynetbios.py <startip> <endip> <spoof_ip>`

        Example:
            To run `lazynetbios` with `startip` set to `"192.168.1.1"`, `endip` set to `"192.168.1.10"`, and `spoof_ip` set to `"192.168.1.100"`, set:
            `self.params["startip"] = "192.168.1.1"`
            `self.params["endip"] = "192.168.1.10"`
            `self.params["spoof_ip"] = "192.168.1.100"`
            Then call:
            `run_lazynetbios()`

        Note:
            - Ensure that `modules/lazynetbios.py` has the appropriate permissions and dependencies to run.
            - Ensure that the IP addresses are correctly set and valid for the NetBIOS scan.
        """

        startip = self.params["startip"]
        endip = self.params["endip"]
        spoof_ip = self.params["spoof_ip"]
        subprocess.run(["python3", "modules/lazynetbios.py", startip, endip, spoof_ip])

    def run_lazyhoneypot(self):
        """
        Run the internal module located at `modules/lazyhoneypot.py` with the specified parameters.

        This function executes the script with the following arguments:

        - `email_from`: The email address from which messages will be sent, specified in `self.params`.
        - `email_to`: The recipient email address, specified in `self.params`.
        - `email_username`: The username for email authentication, specified in `self.params`.
        - `email_password`: The password for email authentication, specified in `self.params`.

        The function performs the following steps:

        1. Retrieves the `email_from`, `email_to`, `email_username`, and `email_password` values from `self.params`.
        2. Calls the `run_script` method to execute the `lazyhoneypot.py` script with the provided email parameters.

        :param email_from: The email address from which messages will be sent.
        :type email_from: str

        :param email_to: The recipient email address.
        :type email_to: str

        :param email_username: The username for email authentication.
        :type email_username: str

        :param email_password: The password for email authentication.
        :type email_password: str

        :returns: None

        Manual execution:
        1. Ensure that `email_from`, `email_to`, `email_username`, and `email_password` are set in `self.params`.
        2. The script `modules/lazyhoneypot.py` should be present in the `modules` directory.
        3. Run the script with:
            `python3 modules/lazyhoneypot.py --email_from <email_from> --email_to <email_to> --email_username <email_username> --email_password <email_password>`

        Example:
            To run `lazyhoneypot` with `email_from` set to `"sender@example.com"`, `email_to` set to `"recipient@example.com"`, `email_username` set to `"user"`, and `email_password` set to `"pass"`, set:
            `self.params["email_from"] = "sender@example.com"`
            `self.params["email_to"] = "recipient@example.com"`
            `self.params["email_username"] = "user"`
            `self.params["email_password"] = "pass"`
            Then call:
            `run_lazyhoneypot()`

        Note:
            - Ensure that `modules/lazyhoneypot.py` has the appropriate permissions and dependencies to run.
            - Ensure that the email credentials are correctly set for successful authentication and operation.
        """

        email_from = self.params["email_from"]
        email_to = self.params["email_to"]
        email_username = self.params["email_username"]
        email_password = self.params["email_password"]
        self.run_script(
            "modules/lazyhoneypot.py",
            "--email_from",
            email_from,
            "--email_to",
            email_to,
            "--email_username",
            email_username,
            "--email_password",
            email_password,
        )

    def run_lazygptcli(self):
        """
        Run the internal module to create Oneliners with Groq AI located at `modules/lazygptcli.py` with the specified parameters.

        This function executes the script with the following arguments:

        - `prompt`: The prompt to be used by the script, specified in `self.params`.
        - `api_key`: The API key to be set in the environment variable `GROQ_API_KEY`, specified in `self.params`.

        The function performs the following steps:

        1. Retrieves the `prompt` and `api_key` values from `self.params`.
        2. Checks if both `prompt` and `api_key` are set. If either is missing, it prints an error message and returns.
        3. Sets the environment variable `GROQ_API_KEY` with the provided `api_key`.
        4. Calls the `run_script` method to execute the `lazygptcli.py` script with the `--prompt` argument.

        :param prompt: The prompt to be used by the script.
        :type prompt: str

        :param api_key: The API key for accessing the service.
        :type api_key: str

        :returns: None

        Manual execution:
        1. Ensure that `prompt` and `api_key` are set in `self.params`.
        2. The script `modules/lazygptcli.py` should be present in the `modules` directory.
        3. Set the environment variable `GROQ_API_KEY` with the API key value.
        4. Run the script with:
            `python3 modules/lazygptcli.py --prompt <prompt>`

        Example:
            To run `lazygptcli` with `prompt` set to `"Your prompt"` and `api_key` set to `"your_api_key"`, set:
            `self.params["prompt"] = "Your prompt"`
            `self.params["api_key"] = "your_api_key"`
            Then call:
            `run_lazygptcli()`

        Note:
            - Ensure that `modules/lazygptcli.py` has the appropriate permissions and dependencies to run.
            - The environment variable `GROQ_API_KEY` must be correctly set for the script to function.
        """

        prompt = self.params["prompt"]
        api_key = self.params["api_key"]
        if not prompt or not api_key:
            print_error("Prompt and api_key must be set")
            return
        os.environ["GROQ_API_KEY"] = api_key
        self.run_script("modules/lazygptcli.py", "--prompt", prompt)

    def run_lazysearch_bot(self):
        """
        Run the internal module GROQ AI located at `modules/lazysearch_bot.py` with the specified parameters.

        This function executes the script with the following arguments:

        - `prompt`: The prompt to be used by the script, specified in `self.params`.
        - `api_key`: The API key to be set in the environment variable `GROQ_API_KEY`, specified in `self.params`.

        The function performs the following steps:

        1. Retrieves the `prompt` and `api_key` values from `self.params`.
        2. Checks if both `prompt` and `api_key` are set. If either is missing, it prints an error message and returns.
        3. Sets the environment variable `GROQ_API_KEY` with the provided `api_key`.
        4. Calls the `run_script` method to execute the `lazysearch_bot.py` script with the `--prompt` argument.

        :param prompt: The prompt to be used by the script.
        :type prompt: str

        :param api_key: The API key for accessing the service.
        :type api_key: str

        :returns: None

        Manual execution:
        1. Ensure that `prompt` and `api_key` are set in `self.params`.
        2. The script `modules/lazysearch_bot.py` should be present in the `modules` directory.
        3. Set the environment variable `GROQ_API_KEY` with the API key value.
        4. Run the script with:
            `python3 modules/lazysearch_bot.py --prompt <prompt>`

        Example:
            To run `lazysearch_bot` with `prompt` set to `"Search query"` and `api_key` set to `"your_api_key"`, set:
            `self.params["prompt"] = "Search query"`
            `self.params["api_key"] = "your_api_key"`
            Then call:
            `run_lazysearch_bot()`

        Note:
            - Ensure that `modules/lazysearch_bot.py` has the appropriate permissions and dependencies to run.
            - The environment variable `GROQ_API_KEY` must be correctly set for the script to function.
        """

        prompt = self.params["prompt"]
        api_key = self.params["api_key"]
        if not prompt or not api_key:
            print_error("Prompt and api_key must be set")
            return
        os.environ["GROQ_API_KEY"] = api_key
        self.run_script("modules/lazysearch_bot.py", "--prompt", prompt)

    def run_lazymetaextract0r(self):
        """
        Run the Metadata extractor internal module located at `modules/lazyown_metaextract0r.py` with the specified parameters.

        This function executes the script with the following arguments:

        - `path`: The file path to be processed by the script, specified in `self.params`.

        The function performs the following steps:

        1. Retrieves the value for `path` from `self.params`.
        2. Checks if the `path` parameter is set. If not, it prints an error message and returns.
        3. Calls the `run_script` method to execute the `lazyown_metaextract0r.py` script with the appropriate argument.

        :param path: The file path to be processed by the script.
        :type path: str

        :returns: None

        Manual execution:
        1. Ensure that `path` is set in `self.params`.
        2. The script `modules/lazyown_metaextract0r.py` should be present in the `modules` directory.
        3. Run the script with:
            `python3 modules/lazyown_metaextract0r.py --path <path>`

        Example:
            To run `lazyown_metaextract0r` with `path` set to `/home/user/file.txt`, set:
            `self.params["path"] = "/home/user/file.txt"`
            Then call:
            `run_lazymetaextract0r()`

        Note:
            - Ensure that `modules/lazyown_metaextract0r.py` has the appropriate permissions and dependencies to run.
        """

        path = self.params["path"]
        if not path:
            print_error("Path must be set")
            return
        self.run_script("modules/lazyown_metaextract0r.py", "--path", path)

    def run_lazyownratcli(self):
        """
        Run the internal module located at `modules/lazyownclient.py` with the specified parameters.

        This function executes the script with the following arguments:

        - `lhost`: The IP address of the local host, specified in `self.params`.
        - `lport`: The port number of the local host, specified in `self.params`.
        - `rat_key`: The RAT key, specified in `self.params`.

        The function performs the following steps:

        1. Retrieves the values for `lhost`, `lport`, and `rat_key` from `self.params`.
        2. Checks if all required parameters (`lhost`, `lport`, and `rat_key`) are set. If any are missing, it prints an error message and returns.
        3. Calls the `run_script` method to execute the `lazyownclient.py` script with the appropriate arguments.

        :param lhost: The IP address of the local host.
        :type lhost: str
        :param lport: The port number of the local host.
        :type lport: int
        :param rat_key: The RAT key.
        :type rat_key: str

        :returns: None

        Manual execution:
        1. Ensure that `lhost`, `lport`, and `rat_key` are set in `self.params`.
        2. The script `modules/lazyownclient.py` should be present in the `modules` directory.
        3. Run the script with:
            `python3 modules/lazyownclient.py --host <lhost> --port <lport> --key <rat_key>`

        Example:
            To run `lazyownclient` with `lhost` set to `192.168.1.10`, `lport` set to `8080`, and `rat_key` set to `my_secret_key`, set:
            `self.params["lhost"] = "192.168.1.10"`
            `self.params["lport"] = 8080`
            `self.params["rat_key"] = "my_secret_key"`
            Then call:
            `run_lazyownratcli()`

        Note:
            - Ensure that `modules/lazyownclient.py` has the appropriate permissions and dependencies to run.
        """

        lhost = self.params["lhost"]
        lport = self.params["lport"]
        rat_key = self.params["rat_key"]
        if not lhost or not lport or not rat_key:
            print_error("lhost and lport and rat_key must be set")
            return
        self.run_script(
            "modules/lazyownclient.py",
            "--host",
            lhost,
            "--port",
            str(lport),
            "--key",
            rat_key,
        )

    def run_lazyownrat(self):
        """
        Run the internal module located at `modules/lazyownserver.py` with the specified parameters.

        This function executes the script with the following arguments:

        - `rhost`: The IP address of the remote host, specified in `self.params`.
        - `rport`: The port number of the remote host, specified in `self.params`.
        - `rat_key`: The RAT key, specified in `self.params`.

        The function performs the following steps:

        1. Retrieves the values for `rhost`, `rport`, and `rat_key` from `self.params`.
        2. Checks if all required parameters (`rhost`, `rport`, and `rat_key`) are set. If any are missing, it prints an error message and returns.
        3. Calls the `run_script` method to execute the `lazyownserver.py` script with the appropriate arguments.

        :param rhost: The IP address of the remote host.
        :type rhost: str
        :param rport: The port number of the remote host.
        :type rport: int
        :param rat_key: The RAT key.
        :type rat_key: str

        :returns: None

        Manual execution:
        1. Ensure that `rhost`, `rport`, and `rat_key` are set in `self.params`.
        2. The script `modules/lazyownserver.py` should be present in the `modules` directory.
        3. Run the script with:
            `python3 modules/lazyownserver.py --host <rhost> --port <rport> --key <rat_key>`

        Example:
            To run `lazyownserver` with `rhost` set to `192.168.1.10`, `rport` set to `8080`, and `rat_key` set to `my_secret_key`, set:
            `self.params["rhost"] = "192.168.1.10"`
            `self.params["rport"] = 8080`
            `self.params["rat_key"] = "my_secret_key"`
            Then call:
            `run_lazyownrat()`

        Note:
            - Ensure that `modules/lazyownserver.py` has the appropriate permissions and dependencies to run.
        """

        rhost = self.params["rhost"]
        rport = self.params["rport"]
        rat_key = self.params["rat_key"]
        if not rhost or not rport or not rat_key:
            print_error("rhost and lport and rat_key must be set")
            return
        self.run_script(
            "modules/lazyownserver.py",
            "--host",
            rhost,
            "--port",
            str(rport),
            "--key",
            rat_key,
        )

    def run_lazybotnet(self):
        """
        Run the internal module located at `modules/lazybotnet.py` with the specified parameters.

        This function executes the script with the following arguments:

        - `rhost`: The IP address of the remote host, hardcoded to "0.0.0.0".
        - `rport`: The port number of the remote host, specified in `self.params`.
        - `rat_key`: The RAT key, specified in `self.params`.

        The function performs the following steps:

        1. Retrieves the values for `rport` and `rat_key` from `self.params`. The `rhost` is hardcoded to "0.0.0.0".
        2. Checks if all required parameters (`rport` and `rat_key`) are set. If any are missing, it prints an error message and returns.
        3. Calls the `run_script` method to execute the `lazybotnet.py` script with the appropriate arguments.

        :param rport: The port number of the remote host.
        :type rport: int
        :param rat_key: The RAT key.
        :type rat_key: str

        :returns: None

        Manual execution:
        1. Ensure that `rport` and `rat_key` are set in `self.params`.
        2. The script `modules/lazybotnet.py` should be present in the `modules` directory.
        3. Run the script with:
            `python3 modules/lazybotnet.py --host <rhost> --port <rport> --key <rat_key>`

        Example:
            To run `lazybotnet` with `rport` set to `1234` and `rat_key` set to `my_key`, set:
            `self.params["rport"] = 1234`
            `self.params["rat_key"] = "my_key"`
            Then call:
            `run_lazybotnet()`

        Note:
            - Ensure that `modules/lazybotnet.py` has the appropriate permissions and dependencies to run.
        """

        rhost = "0.0.0.0"
        rport = self.params["rport"]
        rat_key = self.params["rat_key"]
        if not rhost or not rport or not rat_key:
            print_error("rhost and lport and rat_key must be set")
            return
        self.run_script(
            "modules/lazybotnet.py",
            "--host",
            rhost,
            "--port",
            str(rport),
            "--key",
            rat_key,
        )

    def run_lazylfi2rce(self):
        """
        Run the internal module located at `modules/lazylfi2rce.py` with the specified parameters.

        This function executes the script with the following arguments:

        - `rhost`: The IP address of the remote host, specified in `self.params`.
        - `rport`: The port number of the remote host, specified in `self.params`.
        - `lhost`: The IP address of the local host, specified in `self.params`.
        - `lport`: The port number of the local host, specified in `self.params`.
        - `field`: The field name for the LFI (Local File Inclusion) attack, specified in `self.params`.
        - `wordlist`: The path to the wordlist file used for the attack, specified in `self.params`.

        The function performs the following steps:

        1. Retrieves the values for `rhost`, `rport`, `lhost`, `lport`, `field`, and `wordlist` from `self.params`.
        2. Checks if all required parameters are set. If any are missing, it prints an error message and returns.
        3. Calls the `run_script` method to execute the `lazylfi2rce.py` script with the appropriate arguments.

        :param rhost: The IP address of the remote host.
        :type rhost: str
        :param rport: The port number of the remote host.
        :type rport: int
        :param lhost: The IP address of the local host.
        :type lhost: str
        :param lport: The port number of the local host.
        :type lport: int
        :param field: The field name for the LFI attack.
        :type field: str
        :param wordlist: The path to the wordlist file.
        :type wordlist: str

        :returns: None

        Manual execution:
        1. Ensure that `rhost`, `rport`, `lhost`, `lport`, `field`, and `wordlist` are set in `self.params`.
        2. The script `modules/lazylfi2rce.py` should be present in the `modules` directory.
        3. Run the script with:
            `python3 modules/lazylfi2rce.py --rhost <rhost> --rport <rport> --lhost <lhost> --lport <lport> --field <field> --wordlist <wordlist>`

        Example:
            To run the lazylfi2rce with `rhost` set to `192.168.1.1`, `rport` set to `80`, `lhost` set to `192.168.1.2`, `lport` set to `8080`, `field` set to `file`, and `wordlist` set to `path/to/wordlist.txt`, set:
            `self.params["rhost"] = "192.168.1.1"`
            `self.params["rport"] = 80`
            `self.params["lhost"] = "192.168.1.2"`
            `self.params["lport"] = 8080`
            `self.params["field"] = "file"`
            `self.params["wordlist"] = "path/to/wordlist.txt"`
            Then call:
            `run_lazylfi2rce()`

        Note:
            - Ensure that `modules/lazylfi2rce.py` has the appropriate permissions and dependencies to run.
        """

        rhost = self.params["rhost"]
        rport = self.params["rport"]
        lhost = self.params["lhost"]
        lport = self.params["lport"]
        field = self.params["field"]
        wordlist = self.params["wordlist"]

        if (
            not rhost
            or not rport
            or not lhost
            or not lport
            or not field
            or not wordlist
        ):
            print_error("rhost and rport field and lhost lport wordlist must be set")
            return
        self.run_script(
            "modules/lazylfi2rce.py",
            "--rhost",
            rhost,
            "--rport",
            str(rport),
            "--lhost",
            lhost,
            "--lport",
            str(lport),
            "--field",
            field,
            "--wordlist",
            wordlist,
        )

    def run_lazylogpoisoning(self):
        """
        Run the internal module located at `modules/lazylogpoisoning.py` with the specified parameters.

        This function executes the script with the following arguments:

        - `rhost`: The IP address of the remote host, specified in `self.params`.
        - `lhost`: The IP address of the local host, specified in `self.params`.

        The function performs the following steps:

        1. Retrieves the values for `rhost` and `lhost` from `self.params`.
        2. Checks if the required parameters `rhost` and `lhost` are set. If not, it prints an error message and returns.
        3. Calls the `run_script` method to execute the `lazylogpoisoning.py` script with the appropriate arguments.

        :param rhost: The IP address of the remote host. Must be set in `self.params`.
        :type rhost: str
        :param lhost: The IP address of the local host. Must be set in `self.params`.
        :type lhost: str

        :returns: None

        Manual execution:
        1. Ensure that `rhost` and `lhost` are set in `self.params`.
        2. The script `modules/lazylogpoisoning.py` should be present in the `modules` directory.
        3. Run the script with:
            `python3 modules/lazylogpoisoning.py --rhost <rhost> --lhost <lhost>`

        Example:
            To run the lazylogpoisoning with `rhost` set to `192.168.1.1` and `lhost` set to `192.168.1.2`, set:
            `self.params["rhost"] = "192.168.1.1"`
            `self.params["lhost"] = "192.168.1.2"`
            Then call:
            `run_lazylogpoisoning()`

        Note:
            - Ensure that `modules/lazylogpoisoning.py` has the appropriate permissions and dependencies to run.
        """

        rhost = self.params["rhost"]
        lhost = self.params["lhost"]

        if not rhost or not lhost:
            print_error("rhost and lhost must be set")
            return
        self.run_script(
            "modules/lazylogpoisoning.py", "--rhost", rhost, "--lhost", lhost
        )

    def run_lazybotcli(self):
        """
        Run the internal module located at `modules/lazybotcli.py` with the specified parameters.

        This function executes the script with the following arguments:

        - `rhost`: The IP address of the remote host (default is `"0.0.0.0"`).
        - `rport`: The port number to be used, specified in `self.params`.
        - `rat_key`: The key for the Remote Access Tool (RAT), specified in `self.params`.

        The function performs the following steps:

        1. Retrieves the values for `rport` and `rat_key` from `self.params`.
        2. Checks if the required parameters `rport` and `rat_key` are set. If not, it prints an error message and returns.
        3. Calls the `run_script` method to execute the `lazybotcli.py` script with the appropriate arguments.

        :param rport: The port number for the connection. Must be set in `self.params`.
        :type rport: int
        :param rat_key: The key for the RAT. Must be set in `self.params`.
        :type rat_key: str

        :returns: None

        Manual execution:
        1. Ensure that `rport` and `rat_key` are set in `self.params`.
        2. The script `modules/lazybotcli.py` should be present in the `modules` directory.
        3. Run the script with:
            `python3 modules/lazybotcli.py --host 0.0.0.0 --port <rport> --key <rat_key>`

        Example:
            To run the lazybotcli with port `12345` and key `mysecretkey`, set:
            `self.params["rport"] = 12345`
            `self.params["rat_key"] = "mysecretkey"`
            Then call:
            `run_lazybotcli()`

        Note:
            - Ensure that `modules/lazybotcli.py` has the appropriate permissions and dependencies to run.
        """

        rhost = "0.0.0.0"
        rport = self.params["rport"]
        rat_key = self.params["rat_key"]
        if not rhost or not rport or not rat_key:
            print_error("rhost and lport and rat_key must be set")
            return
        self.run_script(
            "modules/lazybotcli.py",
            "--host",
            rhost,
            "--port",
            str(rport),
            "--key",
            rat_key,
        )

    def run_lazyssh77enum(self):
        """
        Run the internal module located at `modules/lazybrutesshuserenum.py` with the specified parameters. ONLY valid for 7.x Version !!!

        The script will be executed with the following arguments:

        - `wordlist`: The path to the wordlist file containing potential usernames for SSH enumeration.
        - `rhost`: The target IP address or hostname for SSH enumeration.

        The function performs the following steps:

        1. Retrieves the values for `wordlist` and `rhost` from `self.params`.
        2. Prints a warning message about the potential inaccuracy of the results.
        3. Constructs the command to run the `lazybrutesshuserenum.sh` script with the specified arguments.
        4. Executes the command using the `os.system` method.

        :param wordlist: The path to the wordlist file for username enumeration. Must be set in `self.params`.
        :type wordlist: str
        :param rhost: The target IP address or hostname for SSH enumeration. Must be set in `self.params`.
        :type rhost: str

        :returns: None

        Manual execution:
        1. Ensure that `wordlist` and `rhost` are set in `self.params`.
        2. Run the script `modules/lazybrutesshuserenum.sh` with the appropriate arguments.

        Dependencies:
        - `modules/lazybrutesshuserenum.sh` must be present in the `modules` directory and must be executable.

        Example:
            To run the SSH user enumeration with a wordlist located at `/path/to/wordlist.txt` and target IP `192.168.1.1`, set:
            `self.params["usrwordlist"] = "/path/to/wordlist.txt"`
            `self.params["rhost"] = "192.168.1.1"`
            Then call:
            `run_lazyssh77enum()`

        Note:
            - The accuracy of the results may vary depending on the version of the script and the wordlist used.
        """

        wordlist = self.params["usrwordlist"]
        rhost = self.params["rhost"]
        if not wordlist or not rhost:
            print_error("rhost and wordlist must be set")
            return
        print_warn(
            "this may not be accurate. using a version a little bit updated from searchsploit"
        )
        path = os.getcwd()
        os.system(f"{path}/modules/lazybrutesshuserenum.sh {wordlist} {rhost}")

    def run_lazyburpfuzzer(self):
        """
        Run the internal module located at `modules/lazyown_burpfuzzer.py` with the specified parameters.

        The script will be executed with the following arguments:

        - `--url`: The target URL for the fuzzer.
        - `--method`: The HTTP method to use (e.g., GET, POST).
        - `--proxy_port`: The port for the proxy server.
        - `--headers`: Optional HTTP headers to include in the request.
        - `--data`: Optional data to include in the request body.
        - `--params`: Optional URL parameters to include in the request.
        - `--json_data`: Optional JSON data to include in the request body.
        - `-w`: Optional wordlist for fuzzing.
        - `-hc`: Optional hide code for fuzzing.

        The function performs the following steps:

        1. Retrieves the values for `url`, `method`, `headers`, `params`, `data`, `json_data`, `proxy_port`, `wordlist`, and `hide_code` from `self.params`.
        2. Constructs the command to run the `lazyown_burpfuzzer.py` script with the specified arguments.
        3. Adds optional parameters based on whether the corresponding files (`headers_file`, `data_file`, `params_file`, `json_data_file`) are provided.
        4. Executes the command using the `run_command` method.

        :param url: The target URL for the fuzzer. Must be set in `self.params`.
        :type url: str
        :param method: The HTTP method to use. Must be set in `self.params`.
        :type method: str
        :param headers: Optional HTTP headers. Must be set in `self.params` or provided via `headers_file`.
        :type headers: str
        :param params: Optional URL parameters. Must be set in `self.params` or provided via `params_file`.
        :type params: str
        :param data: Optional data for the request body. Must be set in `self.params` or provided via `data_file`.
        :type data: str
        :param json_data: Optional JSON data for the request body. Must be set in `self.params` or provided via `json_data_file`.
        :type json_data: str
        :param proxy_port: The port for the proxy server. Must be set in `self.params`.
        :type proxy_port: int
        :param wordlist: Optional wordlist for fuzzing. Must be set in `self.params`.
        :type wordlist: str
        :param hide_code: Optional code to hide. Must be set in `self.params`.
        :type hide_code: int
        :param headers_file: Optional file containing headers.
        :type headers_file: str, optional
        :param data_file: Optional file containing data.
        :type data_file: str, optional
        :param params_file: Optional file containing parameters.
        :type params_file: str, optional
        :param json_data_file: Optional file containing JSON data.
        :type json_data_file: str, optional

        :returns: None

        Manual execution:
        1. Ensure that `url`, `method`, and `proxy_port` are set in `self.params`.
        2. Provide additional parameters as needed.
        3. Run the script `modules/lazyown_burpfuzzer.py` with the appropriate arguments.

        Dependencies:
        - `modules/lazyown_burpfuzzer.py` must be present in the `modules` directory and must be executable.

        Example:
            To run the fuzzer with URL `http://example.com`, HTTP method `POST`, and proxy port `8080`, set:
            `self.params["url"] = "http://example.com"`
            `self.params["method"] = "POST"`
            `self.params["proxy_port"] = 8080`
            Then call:
            `run_lazyburpfuzzer()`

        Note:
            - Ensure that all required parameters are set before calling this function.
            - Parameters can also be provided via corresponding files.
        """

        url = self.params["url"]
        method = self.params["method"]
        headers = self.params["headers"]
        params = self.params["params"]
        data = self.params["data"]
        json_data = self.params["json_data"]
        proxy_port = self.params["proxy_port"]
        wordlist = self.params["wordlist"]
        hide_code = self.params["hide_code"]
        headers_file = self.params.get("headers_file")
        data_file = self.params.get("data_file")
        params_file = self.params.get("params_file")
        json_data_file = self.params.get("json_data_file")

        command = [
            "python3",
            "modules/lazyown_bprfuzzer.py",
            "--url",
            url,
            "--method",
            method,
            "--proxy_port",
            str(proxy_port),
        ]

        if headers_file:
            command.extend(["--headers_file", headers_file])
        else:
            command.extend(["--headers", headers])

        if data_file:
            command.extend(["--data_file", data_file])
        else:
            command.extend(["--data", data])

        if params_file:
            command.extend(["--params_file", params_file])
        else:
            command.extend(["--params", params])

        if json_data_file:
            command.extend(["--json_data_file", json_data_file])
        else:
            command.extend(["--json_data", json_data])

        if wordlist:
            command.extend(["-w", wordlist])
        if hide_code:
            command.extend(["-hc", str(hide_code)])

        self.run_command(command)
        return

    def run_lazyreverse_shell(self):
        """
        Run the internal module located at `modules/lazyreverse_shell.sh` with the specified parameters.

        The script will be executed with the following arguments:
        - `--ip`: The IP address to use for the reverse shell.
        - `--puerto`: The port to use for the reverse shell.

        The function performs the following steps:

        1. Retrieves the values for `rhost` (IP address) and `reverse_shell_port` (port) from `self.params`.
        2. Validates that `rhost` and `reverse_shell_port` parameters are set.
        3. Constructs the command to run the `lazyreverse_shell.sh` script with the specified arguments.
        4. Executes the command.

        :param ip: The IP address to use for the reverse shell. Must be set in `self.params`.
        :type ip: str
        :param port: The port to use for the reverse shell. Must be set in `self.params`.
        :type port: str

        :returns: None

        Manual execution:
        1. Ensure that `rhost` and `reverse_shell_port` are set in `self.params`.
        2. Run the script `modules/lazyreverse_shell.sh` with the appropriate arguments.

        Dependencies:
        - `modules/lazyreverse_shell.sh` must be present in the `modules` directory and must be executable.

        Example:
            To set up a reverse shell with IP `192.168.1.100` and port `4444`, set:
            `self.params["rhost"] = "192.168.1.100"`
            `self.params["reverse_shell_port"] = "4444"`
            Then call:
            `run_lazyreverse_shell()`

        Note:
            - Ensure that `modules/lazyreverse_shell.sh` has the necessary permissions to execute.
            - Parameters must be set before calling this function.
        """

        ip = self.params["rhost"]
        port = self.params["reverse_shell_port"]
        path = os.getcwd()
        if not ip or not port:
            print_error(
                "rhost and reverse_shell_port must be set, more info see, help set"
            )
            return
        os.system(f"{path}/modules/lazyreverse_shell.sh --ip {ip} --puerto {port}")
        return

    def run_lazyarpspoofing(self):
        """
        Run the internal module located at `modules/lazyarpspoofing.py` with the specified parameters.

        The script will be executed with the following arguments:
        - `--device`: The network interface to use for ARP spoofing.
        - `lhost`: The local host IP address to spoof.
        - `rhost`: The remote host IP address to spoof.

        The function performs the following steps:

        1. Retrieves the values for `lhost`, `rhost`, and `device` from `self.params`.
        2. Validates that `lhost`, `rhost`, and `device` parameters are set.
        3. Constructs the command to run the `lazyarpspoofing.py` script with the specified arguments.
        4. Executes the command.

        :param lhost: The local host IP address to spoof. Must be set in `self.params`.
        :type lhost: str
        :param rhost: The remote host IP address to spoof. Must be set in `self.params`.
        :type rhost: str
        :param device: The network interface to use for ARP spoofing. Must be set in `self.params`.
        :type device: str

        :returns: None

        Manual execution:
        1. Ensure that `lhost`, `rhost`, and `device` are set in `self.params`.
        2. Run the script `modules/lazyarpspoofing.py` with the appropriate arguments.

        Dependencies:
        - `modules/lazyarpspoofing.py` must be present in the `modules` directory and must be executable.

        Example:
            To execute ARP spoofing with local host `192.168.1.2`, remote host `192.168.1.1`, and device `eth0`, set:
            `self.params["lhost"] = "192.168.1.2"`
            `self.params["rhost"] = "192.168.1.1"`
            `self.params["device"] = "eth0"`
            Then call:
            `run_lazyarpspoofing()`

        Note:
            - Ensure that `modules/lazyarpspoofing.py` has the necessary permissions to execute.
            - Parameters must be set before calling this function.
        """

        lhost = self.params["lhost"]
        rhost = self.params["rhost"]
        device = self.params["device"]
        if not lhost or not rhost or not device:
            print_error("lhost, lhost, and device must be set")
            return
        os.system(f"modules/lazyarpspoofing.py --device {device} {lhost} {rhost}")
        return

    def run_lazyattack(self):
        """
        Run the internal module located at `modules/lazyatack.sh` with the specified parameters.

        The script will be executed with the following arguments:
        - `--modo`: The mode of the attack.
        - `--ip`: The target IP address.
        - `--atacante`: The attacker IP address.

        The function performs the following steps:

        1. Retrieves the current working directory.
        2. Validates that `mode`, `rhost`, and `lhost` parameters are set.
        3. Constructs the command to run the `lazyatack.sh` script with the specified arguments.
        4. Executes the command.

        :param mode: The mode in which the attack should be run. Must be set in `self.params`.
        :type mode: str
        :param target_ip: The IP address of the target. Must be set in `self.params`.
        :type target_ip: str
        :param attacker_ip: The IP address of the attacker. Must be set in `self.params`.
        :type attacker_ip: str

        :returns: None

        Manual execution:
        1. Ensure that `mode`, `rhost`, and `lhost` are set in `self.params`.
        2. Run the script `modules/lazyatack.sh` with the appropriate arguments.

        Dependencies:
        - `modules/lazyatack.sh` must be present in the `modules` directory and must be executable.

        Example:
            To execute the attack with mode `scan`, target IP `192.168.1.100`, and attacker IP `192.168.1.1`, set:
            `self.params["mode"] = "scan"`
            `self.params["rhost"] = "192.168.1.100"`
            `self.params["lhost"] = "192.168.1.1"`
            Then call:
            `run_lazyattack()`

        Note:
            - Ensure that `modules/lazyatack.sh` has the necessary permissions to execute.
            - Parameters must be set before calling this function.
        """

        path = os.getcwd()
        mode = self.params["mode"]
        target_ip = self.params["rhost"]
        attacker_ip = self.params["lhost"]
        if not mode or not target_ip or not attacker_ip:
            print_error("mode, rhost, and lhost must be set, more info see help set")
            return
        os.system(
            f"{path}/modules/lazyatack.sh --modo {mode} --ip {target_ip} --atacante {attacker_ip}"
        )
        return

    def run_lazymsfvenom(self):
        """
        Runs the `msfvenom` tool to generate payloads based on user input.

        Prompts the user to select a payload type from a list and executes the corresponding
        `msfvenom` command to generate a payload. Moves the generated payloads to a `sessions`
        directory and sets appropriate permissions. Optionally compresses the payloads using UPX
        and handles a C payload with shikata_ga_nai.

        :param line: Command line arguments for the script.
        :return: None
        """

        lhost = self.params["lhost"]
        lport = self.params["lport"]

        if not lhost or not lport:
            print_error("lport and lhost must be set")
            return

        # Prompt user for choice
        p