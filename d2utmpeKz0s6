<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="" xml:lang="">
<head>
  <meta charset="utf-8" />
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>README</title>
  <style>
    html {
      color: #1a1a1a;
      background-color: #fdfdfd;
    }
    body {
      margin: 0 auto;
      max-width: 36em;
      padding-left: 50px;
      padding-right: 50px;
      padding-top: 50px;
      padding-bottom: 50px;
      hyphens: auto;
      overflow-wrap: break-word;
      text-rendering: optimizeLegibility;
      font-kerning: normal;
    }
    @media (max-width: 600px) {
      body {
        font-size: 0.9em;
        padding: 12px;
      }
      h1 {
        font-size: 1.8em;
      }
    }
    @media print {
      html {
        background-color: white;
      }
      body {
        background-color: transparent;
        color: black;
        font-size: 12pt;
      }
      p, h2, h3 {
        orphans: 3;
        widows: 3;
      }
      h2, h3, h4 {
        page-break-after: avoid;
      }
    }
    p {
      margin: 1em 0;
    }
    a {
      color: #1a1a1a;
    }
    a:visited {
      color: #1a1a1a;
    }
    img {
      max-width: 100%;
    }
    svg {
      height: auto;
      max-width: 100%;
    }
    h1, h2, h3, h4, h5, h6 {
      margin-top: 1.4em;
    }
    h5, h6 {
      font-size: 1em;
      font-style: italic;
    }
    h6 {
      font-weight: normal;
    }
    ol, ul {
      padding-left: 1.7em;
      margin-top: 1em;
    }
    li > ol, li > ul {
      margin-top: 0;
    }
    blockquote {
      margin: 1em 0 1em 1.7em;
      padding-left: 1em;
      border-left: 2px solid #e6e6e6;
      color: #606060;
    }
    code {
      font-family: Menlo, Monaco, Consolas, 'Lucida Console', monospace;
      font-size: 85%;
      margin: 0;
      hyphens: manual;
    }
    pre {
      margin: 1em 0;
      overflow: auto;
    }
    pre code {
      padding: 0;
      overflow: visible;
      overflow-wrap: normal;
    }
    .sourceCode {
     background-color: transparent;
     overflow: visible;
    }
    hr {
      background-color: #1a1a1a;
      border: none;
      height: 1px;
      margin: 1em 0;
    }
    table {
      margin: 1em 0;
      border-collapse: collapse;
      width: 100%;
      overflow-x: auto;
      display: block;
      font-variant-numeric: lining-nums tabular-nums;
    }
    table caption {
      margin-bottom: 0.75em;
    }
    tbody {
      margin-top: 0.5em;
      border-top: 1px solid #1a1a1a;
      border-bottom: 1px solid #1a1a1a;
    }
    th {
      border-top: 1px solid #1a1a1a;
      padding: 0.25em 0.5em 0.25em 0.5em;
    }
    td {
      padding: 0.125em 0.5em 0.25em 0.5em;
    }
    header {
      margin-bottom: 4em;
      text-align: center;
    }
    #TOC li {
      list-style: none;
    }
    #TOC ul {
      padding-left: 1.3em;
    }
    #TOC > ul {
      padding-left: 0;
    }
    #TOC a:not(:hover) {
      text-decoration: none;
    }
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    div.columns{display: flex; gap: min(4vw, 1.5em);}
    div.column{flex: auto; overflow-x: auto;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    /* The extra [class] is a hack that increases specificity enough to
       override a similar rule in reveal.js */
    ul.task-list[class]{list-style: none;}
    ul.task-list li input[type="checkbox"] {
      font-size: inherit;
      width: 0.8em;
      margin: 0 0.8em 0.2em -1.6em;
      vertical-align: middle;
    }
    .display.math{display: block; text-align: center; margin: 0.5rem auto;}
    /* CSS for syntax highlighting */
    pre > code.sourceCode { white-space: pre; position: relative; }
    pre > code.sourceCode > span { line-height: 1.25; }
    pre > code.sourceCode > span:empty { height: 1.2em; }
    .sourceCode { overflow: visible; }
    code.sourceCode > span { color: inherit; text-decoration: inherit; }
    div.sourceCode { margin: 1em 0; }
    pre.sourceCode { margin: 0; }
    @media screen {
    div.sourceCode { overflow: auto; }
    }
    @media print {
    pre > code.sourceCode { white-space: pre-wrap; }
    pre > code.sourceCode > span { display: inline-block; text-indent: -5em; padding-left: 5em; }
    }
    pre.numberSource code
      { counter-reset: source-line 0; }
    pre.numberSource code > span
      { position: relative; left: -4em; counter-increment: source-line; }
    pre.numberSource code > span > a:first-child::before
      { content: counter(source-line);
        position: relative; left: -1em; text-align: right; vertical-align: baseline;
        border: none; display: inline-block;
        -webkit-touch-callout: none; -webkit-user-select: none;
        -khtml-user-select: none; -moz-user-select: none;
        -ms-user-select: none; user-select: none;
        padding: 0 4px; width: 4em;
        color: #aaaaaa;
      }
    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
    div.sourceCode
      {   }
    @media screen {
    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }
    }
    code span.al { color: #ff0000; font-weight: bold; } /* Alert */
    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
    code span.at { color: #7d9029; } /* Attribute */
    code span.bn { color: #40a070; } /* BaseN */
    code span.bu { color: #008000; } /* BuiltIn */
    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
    code span.ch { color: #4070a0; } /* Char */
    code span.cn { color: #880000; } /* Constant */
    code span.co { color: #60a0b0; font-style: italic; } /* Comment */
    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
    code span.do { color: #ba2121; font-style: italic; } /* Documentation */
    code span.dt { color: #902000; } /* DataType */
    code span.dv { color: #40a070; } /* DecVal */
    code span.er { color: #ff0000; font-weight: bold; } /* Error */
    code span.ex { } /* Extension */
    code span.fl { color: #40a070; } /* Float */
    code span.fu { color: #06287e; } /* Function */
    code span.im { color: #008000; font-weight: bold; } /* Import */
    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
    code span.kw { color: #007020; font-weight: bold; } /* Keyword */
    code span.op { color: #666666; } /* Operator */
    code span.ot { color: #007020; } /* Other */
    code span.pp { color: #bc7a00; } /* Preprocessor */
    code span.sc { color: #4070a0; } /* SpecialChar */
    code span.ss { color: #bb6688; } /* SpecialString */
    code span.st { color: #4070a0; } /* String */
    code span.va { color: #19177c; } /* Variable */
    code span.vs { color: #4070a0; } /* VerbatimString */
    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
  </style>
</head>
<body>
<h1 id="lazyown">LazyOwn</h1>
<p><img
src="https://img.shields.io/badge/python-3670A0?style=for-the-badge&amp;logo=python&amp;logoColor=ffdd54"
alt="Python" /> <img
src="https://img.shields.io/badge/shell_script-%23121011.svg?style=for-the-badge&amp;logo=gnu-bash&amp;logoColor=white"
alt="Shell Script" /> <img
src="https://github.com/user-attachments/assets/961783c2-cd57-4cc2-ab4c-53fde581db79"
alt="image" /> <img
src="https://github.com/user-attachments/assets/79052f87-f87c-4b32-a4a2-854113ca3a4c"
alt="image" /> <a href="https://www.gnu.org/licenses/gpl-3.0"><img
src="https://img.shields.io/badge/License-GPLv3-blue.svg"
alt="License: GPL v3" /></a> <img
src="https://github.com/user-attachments/assets/b69f1d31-c075-4713-a44e-a40a034a7407"
alt="image" /> <img
src="https://github.com/user-attachments/assets/df82a669-be0c-4a03-bd98-842a67baaef6"
alt="image" /></p>
<figure>
<img
src="https://github.com/user-attachments/assets/73097914-3af9-4b8f-8824-ed599dfc7e38"
alt="lazyown" />
<figcaption aria-hidden="true">lazyown</figcaption>
</figure>
<div class="sourceCode" id="cb1"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ex">██╗</span>      █████╗ ███████╗██╗   ██╗ ██████╗ ██╗    ██╗███╗   ██╗</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="ex">██║</span>     ██╔══██╗╚══███╔╝╚██╗ ██╔╝██╔═══██╗██║    ██║████╗  ██║</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="ex">██║</span>     ███████║  ███╔╝  ╚████╔╝ ██║   ██║██║ █╗ ██║██╔██╗ ██║</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="ex">██║</span>     ██╔══██║ ███╔╝    ╚██╔╝  ██║   ██║██║███╗██║██║╚██╗██║</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="ex">███████╗██║</span>  ██║███████╗   ██║   ╚██████╔╝╚███╔███╔╝██║ ╚████║</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="ex">╚══════╝╚═╝</span>  ╚═╝╚══════╝   ╚═╝    ╚═════╝  ╚══╝╚══╝ ╚═╝  ╚═══╝</span></code></pre></div>
<p><a href="https://ko-fi.com/Y8Y2Z73AV"><img
src="https://ko-fi.com/img/githubbutton_sm.svg" alt="ko-fi" /></a></p>
<figure>
<img
src="https://github.com/user-attachments/assets/1debaed0-8f84-4079-ad2f-48cc4cfd9d95"
alt="LazyOwn1" />
<figcaption aria-hidden="true">LazyOwn1</figcaption>
</figure>
<p>LazyOwn Framework is a powerful and versatile security framework
designed to automate and streamline pentesting and vulnerability
analysis tasks. This interactive environment combines multiple tools and
scripts, making it easier for cybersecurity professionals to work
through various stages of the security assessment lifecycle. With an
intuitive command-line interface, LazyOwn allows users to configure
specific parameters, execute custom scripts, and obtain real-time
results, all from a single platform.</p>
<p>Key Features:</p>
<p>Interactive Interface:</p>
<p>Interactive shell with user-friendly commands for configuring and
running scripts. Ability to display and adjust custom parameters
applicable to different scripts. Task Automation:</p>
<p>Automates common pentesting tasks such as vulnerability scanning, web
application fuzzing, brute force attacks, and more. Integration with
popular tools and custom scripts for comprehensive testing coverage on
Parrot Sec. Real-Time Visualization:</p>
<p>Real-time output display of script execution, allowing users to see
results instantly and react swiftly. Modularity and Extensibility:</p>
<p>Designed to be extensible, enabling users to easily add and customize
scripts. Supports multiple scripting languages, including Python and
Bash. Flexible Configuration:</p>
<p>Ability to set specific parameters like IP addresses, API keys, HTTP
methods, request data, and more, providing complete control over
executed scripts. Typical Use:</p>
<p>Parameter Configuration:</p>
<p>Users can set required parameters using commands like set target_ip
192.168.1.1 to define the target IP address. Script Execution:</p>
<p>Execute predefined scripts for various tasks, such as run lazygptcli
to interact with GPT using a configured prompt and API key. Results
Visualization:</p>
<p>Script results are displayed in the console in real-time, providing
immediate feedback on progress and findings. Additional Modules:</p>
<p>LazyOwn includes various specialized modules such as:</p>
<p>lazyownrat and lazyownratcli: For running remote access tools with
configurable parameters. lazyftpsniff and lazysniff: For network
sniffing on specified interfaces. lazysearch_bot and lazygptcli: For
interacting with search APIs and GPT-based tools. lazyhoneypot: For
setting up email-based honeypots. lazynetbios: For NetBIOS enumeration
across IP ranges. lazywerkzeugdebug: For testing Werkzeug in debug mode.
Background:</p>
<p>Originally designed to automate the search and analysis of binaries
with special permissions on Linux and Windows systems, LazyOwn has
evolved to encompass a broader range of functionalities. The project
includes scripts that extract information from GTFOBins, analyze
binaries on the system, and generate options based on the collected
data.</p>
<p>LazyOwn on Reddit</p>
<p>Revolutionize Your Pentesting with LazyOwn: Automate the intrusion on
Linux, MAC OSX, and Windows VICTIMS</p>
<p><a href="https://www.reddit.com/r/LazyOwn/"
class="uri">https://www.reddit.com/r/LazyOwn/</a></p>
<p><a
href="https://github.com/grisuno/LazyOwn/assets/1097185/eec9dbcc-88cb-4e47-924d-6dce2d42f79a"
class="uri">https://github.com/grisuno/LazyOwn/assets/1097185/eec9dbcc-88cb-4e47-924d-6dce2d42f79a</a></p>
<p>Discover LazyOwn, the ultimate solution for automating the pentesting
workflow to attack Linux, MacOSX and Windows systems. Our powerful tool
simplifies pentesting, making it more efficient and effective. Watch
this video to learn how LazyOwn can streamline your security assessments
and enhance your cybersecurity toolkit.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ex">LazyOwn</span><span class="op">&gt;</span> set target_ip 192.168.1.1</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="ex">[SET]</span> target_ip set to 192.168.1.1</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="ex">LazyOwn</span><span class="op">&gt;</span> run lazynmap</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="ex">[INFO]</span> Running Nmap scan on 192.168.1.1</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="ex">...</span></span></code></pre></div>
<figure>
<img
src="https://github.com/grisuno/LazyOwn/assets/1097185/9f30a1a3-dfe8-4cc1-9bd7-76c21bdc64b7"
alt="image" />
<figcaption aria-hidden="true">image</figcaption>
</figure>
<p>LazyOwn es ideal para profesionales de la ciberseguridad que buscan
una solución centralizada y automatizada para sus necesidades de
pentesting, ahorrando tiempo y mejorando la eficiencia en la
identificación y explotación de vulnerabilidades.</p>
<figure>
<img
src="https://github.com/grisuno/LazyOwn/assets/1097185/9a348e76-d667-4526-bdef-863159ba452d"
alt="Captura de pantalla 2024-05-22 021136" />
<figcaption aria-hidden="true">Captura de pantalla 2024-05-22
021136</figcaption>
</figure>
<h2 id="requisitos">Requisitos</h2>
<ul>
<li>Python 3.x</li>
<li>Módulos de Python:
<ul>
<li>python-libnmap</li>
<li>pwn</li>
<li>groq</li>
<li>PyPDF2</li>
<li>docx</li>
<li>python-docx</li>
<li>olefile</li>
<li>exifread</li>
<li>pycryptodome</li>
<li>impacket</li>
<li>pandas</li>
<li>colorama</li>
<li>tabulate</li>
<li>pyarrow</li>
<li>keyboard</li>
<li>flask-unsign</li>
<li>name-that-hash</li>
</ul></li>
<li><code>subprocess</code> (incluido en la biblioteca estándar de
Python)</li>
<li><code>platform</code> (incluido en la biblioteca estándar de
Python)</li>
<li><code>tkinter</code> (Opcional para el GUI)</li>
<li><code>numpy</code> (Opcional para el GUI)</li>
<li></li>
</ul>
<h2 id="instalación">Instalación</h2>
<ol type="1">
<li>Clona el repositorio:</li>
</ol>
<div class="sourceCode" id="cb3"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="fu">git</span> clone https://github.com/grisuno/LazyOwn.git</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="bu">cd</span> LazyOwn</span></code></pre></div>
<ol start="2" type="1">
<li>Instala las dependencias de Python:</li>
</ol>
<div class="sourceCode" id="cb4"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="ex">./install.sh</span></span></code></pre></div>
<h2 id="uso">Uso</h2>
<div class="sourceCode" id="cb5"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="ex">./run</span> or ./fast_run_as_r00t.sh </span></code></pre></div>
<pre><code>Use set &lt;parameter&gt; &lt;value&gt; to set parameters.
Use show to display current parameter values.
Use run &lt;script_name&gt; to execute a script with the set parameters.
Use exit to exit the CLI.
Una vez que el shell esté en funcionamiento, puedes utilizar los siguientes comandos:

list: Lista todos los Modulos de LazyOwn
set &lt;parámetro&gt; &lt;valor&gt;: Establece el valor de un parámetro. Por ejemplo, set target_ip 192.168.1.1.
show: Muestra los valores actuales de todos los parámetros.
run &lt;script&gt;: Ejecuta un script específico disponible en el framework.
Scripts disponibles

LazyOwn&gt; ls
    [+] Available scripts to run: [👽]
lazysearch                lazysearch_gui            lazyown
update_db                 lazynmap                  lazyaslrcheck
lazynmapdiscovery         lazygptcli                lazyburpfuzzer
lazymetaextract0r         lazyreverse_shell         lazyattack
lazyownratcli             lazyownrat                lazygath
lazysniff                 lazynetbios               lazybotnet
lazybotcli                lazyhoneypot              lazysearch_bot
lazylfi2rce               lazylogpoisoning          lazymsfvenom
lazypathhijacking         lazyarpspoofing           lazyftpsniff
lazyssh77enum             lazywerkzeugdebug
LazyOwn&gt; ?

Documented commands (type help &lt;topic&gt;):
========================================
acknowledgearp     dirsearch           lazywebshell     rpcdump
acknowledgeicmp    dnsenum             ldapdomaindump   rubeus
addhosts           dnsmap              list             run
alias              download_exploit    msf              samrdump
arpscan            download_resources  nbtscan          set
asprevbase64       encrypt             nc               sh
banner             enum4linux          nikto            show
bloodhound         exit                nmapscripthelp   smbclient
chisel             fixel               openssl_sclient  smbmap
clean              fixperm             payload          smbserver
clock              getcap              ping             snmpcheck
cme                getnpusers          ports            socat
conptyshell        getseclist          proxy            sqlmap
cp                 gobuster            psexec           ss
cports             gospider            pwd              sshd
createcredentials  hashcat             py3ttyup         tcpdump_icmp
createhash         help                pyautomate       vpn
createrevshell     ignorearp           qa               wfuzz
createwebshell     ignoreicmp          responder        whatweb
createwinrevshell  ip                  rev              winbase64payload
decrypt            john2hash           rhost            wrapper
dig                lazypwn             rpcclient        www


</code></pre>
<h2 id="tag-en-youtube">Tag en youtube</h2>
<p><a href="https://www.youtube.com/hashtag/lazyown"
class="uri">https://www.youtube.com/hashtag/lazyown</a></p>
<div class="sourceCode" id="cb7"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="ex">LazyOwn</span><span class="op">&gt;</span> set binary_name my_binary</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="ex">LazyOwn</span><span class="op">&gt;</span> set target_ip 192.168.1.100</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="ex">LazyOwn</span><span class="op">&gt;</span> set api_key my_api_key</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a><span class="ex">LazyOw